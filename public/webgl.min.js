window.TILE_VERSION = { "ditu": { "normal": { "version": "088", "updateDate": "20220506" }, "satellite": { "version": "009", "updateDate": "20220506" }, "normalTraffic": { "version": "081", "updateDate": "20220506" }, "satelliteTraffic": { "version": "083", "updateDate": "20220506" }, "mapJS": { "version": "104", "updateDate": "20220506" }, "satelliteStreet": { "version": "083", "updateDate": "20220506" }, "earthVector": { "version": "001", "updateDate": "20220506" } }, "webapp": { "high_normal": { "version": "001", "updateDate": "20220506" }, "lower_normal": { "version": "002", "updateDate": "20220506" } }, "api_for_mobile": { "vector": { "version": "002", "updateDate": "20220506" }, "vectorIcon": { "version": "002", "updateDate": "20220506" } } }; window.MSV = { "mapstyle": { "updateDate": "20220225", "version": "001" } }; window.BMAP_AUTHENTIC_KEY = "wv4w1h64pA09EbHt7kxgL5wjjNPh0A3E"; window.BMapGL = window.BMapGL || {}; (function (bk, eL) {
    var ej = ej || { version: "20150702", emptyFn: function () { } }; (function () { ej._log = []; var i = 0; var T = {}; ej.BaseClass = function (iV) { T[(this.hashCode = (iV || ej.BaseClass.guid()))] = this }; ej.BaseClass.guid = function () { return "mz_" + (i++).toString(36) }; ej.BaseClass.create = function () { var iV = new ej.BaseClass(); iV.decontrol(); return iV }; var e = ej.instance = ej.I = function (iV) { return T[iV] }; ej.BaseClass.prototype.dispose = function () { if (this.hashCode) { delete T[this.hashCode] } for (var iV in this) { if (typeof this[iV] != "function") { delete this[iV] } } }; ej.BaseClass.prototype.getHashCode = function () { if (!this.hashCode) { T[(this.hashCode = ej.BaseClass.guid())] = this } return this.hashCode }; ej.BaseClass.prototype.decontrol = function () { delete T[this.hashCode] }; ej.BaseClass.prototype.toString = function () { return "[object " + (this._className || "Object") + "]" }; ej.BaseClass.prototype._wlog = function (iW, iX) { var iV = ej._log; if (iV.length > 100) { iV.reverse().length = 50; iV.reverse() } iV[iV.length] = "[" + iW + "][" + (this._className || "Object") + " " + this.hashCode + "] " + iX } })(); Function.prototype.inherits = function (iV, T) { var e, iW, iY = this.prototype, iX = function () { }; iX.prototype = iV.prototype; iW = this.prototype = new iX(); if (typeof (T) == "string") { iW._className = T } for (e in iY) { iW[e] = iY[e] } this.prototype.constructor = iY.constructor; iY = iX = null; return iW }; ej.BaseEvent = function (e, i) { this.type = e; this.returnValue = true; this.target = i || null; this.currentTarget = this.srcElement = null; this.cancelBubble = false; this.domEvent = null }; ej.BaseClass.prototype.on = ej.BaseClass.prototype.addEventListener = function (T, i) { if (typeof i !== "function") { return this._wlog("error", "addEventListener:" + i + " is not a function") } if (!this._listeners) { this._listeners = {} } var e = this._listeners; if (T.indexOf("on") !== 0) { T = "on" + T } if (typeof e[T] !== "object") { e[T] = {} } var iV = i.hashCode || ej.BaseClass.guid(); i.hashCode = iV; if (e[T][iV]) { this._wlog("warning", "repeat key:" + iV) } e[T][iV] = i }; ej.BaseClass.prototype.off = ej.BaseClass.prototype.removeEventListener = function (T, i) { if (typeof i == "function") { i = i.hashCode } else { if (typeof i !== "string" && typeof i !== "undefined") { return } } if (!this._listeners) { this._listeners = {} } if (T.indexOf("on") != 0) { T = "on" + T } var e = this._listeners; if (!e[T]) { return } if (i === undefined) { e[T] = {}; return } if (e[T][i]) { delete e[T][i] } }; ej.BaseClass.prototype.fire = ej.BaseClass.prototype.dispatchEvent = function (iV) { if (!this._listeners) { this._listeners = {} } var T, e = this._listeners, iW = iV.type; iV.target = iV.srcElement = iV.target || iV.srcElement || this; iV.currentTarget = this; if (typeof this[iW] == "function") { this[iW](iV) } if (typeof e[iW] == "object") { for (T in e[iW]) { if (typeof e[iW][T] == "function") { e[iW][T].call(this, iV) } } } return iV.returnValue }; ej.BaseEvent.prototype.inherit = function (T) { var i = this; this.domEvent = T = window.event || T; i.clientX = T.clientX || T.pageX; i.clientY = T.clientY || T.pageY; i.offsetX = T.offsetX || T.layerX; i.offsetY = T.offsetY || T.layerY; i.screenX = T.screenX; i.screenY = T.screenY; i.ctrlKey = T.ctrlKey || T.metaKey; i.shiftKey = T.shiftKey; i.altKey = T.altKey; return i }; ej.Browser = (function () { var T = navigator.userAgent; var iW = 0; var e = 0; var iX = 0; var i = 0; var i1 = 0; var iZ = 0; var i0 = 0; var iY = 0; var iV = 0; var i2 = 0; if (typeof window.opera === "object" && /Opera(\s|\/)(\d+(\.\d+)?)/.test(T)) { iX = parseFloat(RegExp.$2) } else { if (/OPR(\/(\d+)(\..?)?)/.test(T)) { iX = parseInt(RegExp.$2, 10) } else { if (/Edge\/((\d+)\.\d+)/.test(T)) { iW = parseInt(RegExp.$2, 10) } else { if (/MSIE (\d+(\.\d+)?)/.test(T)) { e = parseFloat(RegExp.$1) } else { if (T.indexOf("Trident") > -1 && /rv:(\d+(\.\d+)?)/.test(T)) { e = parseInt(RegExp.$1, 10) } else { if (/Firefox(\s|\/)(\d+(\.\d+)?)/.test(T)) { i1 = parseFloat(RegExp.$2) } else { if (navigator.vendor === "Netscape" && /Netscape(\s|\/)(\d+(\.\d+)?)/.test(T)) { i0 = parseFloat(RegExp.$2) } else { if (T.indexOf("Safari") > -1 && /Version\/(\d+(\.\d+)?)/.test(T)) { i = parseFloat(RegExp.$1) } } } } } } } } if (T.indexOf("Trident") > -1 && /Trident\/(\d+(\.\d+)?)/.test(T)) { iY = parseInt(RegExp.$1, 10) } else { if (!e && !iW && T.indexOf("Gecko") > -1 && T.indexOf("KHTML") === -1 && /rv\:(\d+(\.\d+)?)/.test(T)) { iV = parseFloat(RegExp.$1) } else { if (!iW && /chrome\/(\d+(\.\d+)?)/i.test(T)) { iZ = parseFloat(RegExp.$1) } else { if (!iW && /AppleWebKit\/(\d+(\.\d+)?)/.test(T)) { i2 = parseInt(RegExp.$1, 10) } } } } var i3 = { edge: iW, ie: e, firefox: i1, netscape: i0, opera: iX, safari: i, chrome: iZ, gecko: iV, trident: iY, webkit: i2 }; return i3 })(); window.FeBrowser = ej.Browser; ej.Dom = {}; ej.Dom.createDom = function (i, e) { if (ej.isIE && e && e.name) { i = "<" + i + ' name="' + ej.String.escapeHTML(e.name) + '">' } var T = document.createElement(i); if (e) { ej.Dom.setProperties(T, e) } return T }; ej.Dom.getOffset = function (iV) { var iY = ej.Dom.getOwnerDocument(iV); var iX = ej.isGecko > 0 && iY.getBoxObjectFor && ej.Dom.getStyle(iV, "position") == "absolute" && (iV.style.top === "" || iV.style.left === ""); var iZ = { left: 0, top: 0 }; var i = (ej.isIE && !ej.isStrict) ? iY.body : iY.documentElement; if (iV == i) { return iZ } var T = null; var iW; if (iV.getBoundingClientRect) { iW = iV.getBoundingClientRect(); iZ.left = iW.left + Math.max(iY.documentElement.scrollLeft, iY.body.scrollLeft); iZ.top = iW.top + Math.max(iY.documentElement.scrollTop, iY.body.scrollTop); iZ.left -= iY.documentElement.clientLeft; iZ.top -= iY.documentElement.clientTop; if (ej.isIE && !ej.isStrict) { iZ.left -= 2; iZ.top -= 2 } } else { if (iY.getBoxObjectFor && !iX) { iW = iY.getBoxObjectFor(iV); var e = iY.getBoxObjectFor(i); iZ.left = iW.screenX - e.screenX; iZ.top = iW.screenY - e.screenY } else { T = iV; do { iZ.left += T.offsetLeft; iZ.top += T.offsetTop; if (ej.isWebkit > 0 && ej.Dom.getStyle(T, "position") == "fixed") { iZ.left += iY.body.scrollLeft; iZ.top += iY.body.scrollTop; break } T = T.offsetParent } while (T && T != iV); if (ej.isOpera > 0 || (ej.isWebkit > 0 && ej.Dom.getStyle(iV, "position") == "absolute")) { iZ.top -= iY.body.offsetTop } T = iV.offsetParent; while (T && T != iY.body) { iZ.left -= T.scrollLeft; if (!ej.isOpera || T.tagName != "TR") { iZ.top -= T.scrollTop } T = T.offsetParent } } } return iZ }; ej.Dom.getOwnerDocument = function (e) { return e.nodeType == 9 ? e : e.ownerDocument || e.document }; ej.Dom.setProperties = function (i, e) { ej.each(e, function (iV, T) { ej.Dom._setProperty(i, T, iV) }) }; ej.Dom._setProperty = function (i, e, T) { if (e == "style") { i.style.cssText = T } else { if (e == "class") { i.className = T } else { if (e == "for") { i.htmlFor = T } else { if (e in ej.Dom._DIRECT_ATTRIBUTE_MAP) { i.setAttribute(ej.Dom._DIRECT_ATTRIBUTE_MAP[e], T) } else { i[e] = T } } } } }; ej.Dom._DIRECT_ATTRIBUTE_MAP = { cellpadding: "cellPadding", cellspacing: "cellSpacing", colspan: "colSpan", rowspan: "rowSpan", valign: "vAlign", height: "height", width: "width", usemap: "useMap", frameborder: "frameBorder" }; ej.G = function () { for (var T = [], iV = arguments.length - 1; iV > -1; iV--) { var iW = arguments[iV]; T[iV] = null; if (typeof iW == "object" && iW && iW.dom) { T[iV] = iW.dom } else { if ((typeof iW == "object" && iW && iW.tagName) || iW == window || iW == document) { T[iV] = iW } else { if (typeof iW == "string" && (iW = document.getElementById(iW))) { T[iV] = iW } } } } return T.length < 2 ? T[0] : T }; ej.ac = function (e, i) { if (!(e = this.G(e))) { return } i = this.trim(i); if (!new RegExp("(^| )" + i.replace(/(\W)/g, "\\$1") + "( |$)").test(e.className)) { e.className = e.className.split(/\s+/).concat(i).join(" ") } }; ej.addClassName = ej.ac; ej.each = function (iX, e) { if (typeof e != "function") { return iX } if (iX) { if (iX.length === undefined) { for (var T in iX) { e.call(iX[T], iX[T], T) } } else { for (var iV = 0, iW = iX.length; iV < iW; iV++) { e.call(iX[iV], iX[iV], iV) } } } return iX }; ej.extend = function (iX, iV) { if (iX && iV && typeof (iV) == "object") { for (var iW in iV) { iX[iW] = iV[iW] } var T = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"]; for (var e = 0, i; e < T.length; e++) { i = T[e]; if (Object.prototype.hasOwnProperty.call(iV, i)) { iX[i] = iV[i] } } } return iX }; ej.hide = function () { ej.each(arguments, function (e) { if (e = ej.G(e)) { e.style.display = "none" } }) }; ej.inherit = function (iZ, iV, T) { var iY = iZ.prototype; var iX = function () { }; iX.prototype = iV.prototype; var iW = iZ.prototype = new iX(); if (typeof T == "string") { iW._className = T } for (var e in iY) { iW[e] = iY[e] } iZ.prototype.constructor = iY.constructor; iY = null; return iW }; ej.isIE = 0; (function () { if (navigator.userAgent.indexOf("MSIE") > 0 && !window.opera) { /MSIE (\d+(\.\d+)?)/.test(navigator.userAgent); ej.isIE = parseFloat(RegExp.$1) } })(); ej.rc = function (e, i) { if (!(e = this.G(e))) { return } i = this.trim(i); var T = e.className.replace(new RegExp("(^| +)" + i.replace(/(\W)/g, "\\$1") + "( +|$)", "g"), "$2"); if (e.className != T) { e.className = T } }; ej.removeClassName = ej.rc; ej.show = function () { this.each(arguments, function (e) { if (e = ej.G(e)) { e.style.display = "" } }) }; ej.trim = function (e) { return e.replace(/(^[\s\t\xa0\u3000]+)|([\u3000\xa0\s\t]+$)/g, "") }; ej.getElementsByClassName = function (e, i) { if (e.getElementsByClassName) { return e.getElementsByClassName(i) } else { return (function T(i2, i0) { if (i0 == null) { i0 = document } var iZ = [], iY = i0.getElementsByTagName("*"), iV = iY.length, i1 = new RegExp("(^|\\s)" + i2 + "(\\s|$)"), iX, iW; for (iX = 0, iW = 0; iX < iV; iX++) { if (i1.test(iY[iX].className)) { iZ[iW] = iY[iX]; iW++ } } return iZ })(i, e) } }; ej.toggleClass = function (e, i) { if (ej.hasClass(e, i)) { ej.removeClassName(e, i) } else { ej.addClassName(e, i) } }; ej.hasClass = function (iV, T) { if (!iV || !iV.className || typeof iV.className != "string") { return false } var i = -1; try { i = iV.className == T || iV.className.search(new RegExp("(\\s|^)" + T + "(\\s|$)")) } catch (iW) { return false } return i > -1 }; ej.insertHTML = function (iV, e, T) { iV = ej.G(iV); if (iV === null) { return iV } var i, iW; if (iV.insertAdjacentHTML) { iV.insertAdjacentHTML(e, T) } else { i = iV.ownerDocument.createRange(); e = e.toUpperCase(); if (e == "AFTERBEGIN" || e == "BEFOREEND") { i.selectNodeContents(iV); i.collapse(e == "AFTERBEGIN") } else { iW = e == "BEFOREBEGIN"; i[iW ? "setStartBefore" : "setEndAfter"](iV); i.collapse(iW) } i.insertNode(i.createContextualFragment(T)) } return iV }; if (typeof HTMLElement != "undefined" && HTMLElement.prototype.__lookupGetter__ && !HTMLElement.prototype.__lookupGetter__("children") && !window.opera) { try { HTMLElement.prototype.__defineGetter__("children", function () { for (var T = [], iV = 0, iX, iW = 0, e = this.childNodes.length; iW < e; iW++) { iX = this.childNodes[iW]; if (iX.nodeType == 1) { T[iV++] = iX; if (iX.name) { if (!T[iX.name]) { T[iX.name] = [] } T[iX.name][T[iX.name].length] = iX } if (iX.id) { T[iX.id] = iX } } } return T }) } catch (ic) { } } if (typeof (HTMLElement) != "undefined" && !window.opera && HTMLElement.prototype && !HTMLElement.prototype.insertAdjacentHTML) { HTMLElement.prototype.insertAdjacentHTML = function (i, T) { var iV = this.ownerDocument.createRange(); iV.setStartBefore(this); iV = iV.createContextualFragment(T); switch (i) { case "beforeBegin": this.parentNode.insertBefore(iV, this); break; case "afterBegin": this.insertBefore(iV, this.firstChild); break; case "beforeEnd": this.appendChild(iV); break; case "afterEnd": if (!this.nextSibling) { this.parentNode.appendChild(iV) } else { this.parentNode.insertBefore(iV, this.nextSibling) } break } } } if (typeof HTMLElement != "undefined" && !window.opera) { HTMLElement.prototype.contains = function (e) { if (e == this) { return true } while (e = e.parentNode) { if (e == this) { return true } } return false } } if (!ej.Browser.ie && typeof Event != "undefined" && !window.opera) { Event.prototype.__defineSetter__("returnValue", function (e) { if (!e) { this.preventDefault() } return e }); Event.prototype.__defineSetter__("cancelBubble", function (e) { if (e) { this.stopPropagation() } return e }) } ej.each = function (iW, iV) { if (bC(iV)) { for (var T = 0, e = iW.length; T < e; T++) { if (iV.call(iW, iW[T], T) === false) { break } } } return iW }; ej.Platform = { x11: 0, macintosh: 0, windows: 0, android: 0, iphone: 0, ipad: 0 }; for (var ia in ej.Platform) { if (ej.Platform.hasOwnProperty(ia)) { ej.Platform[ia] = new RegExp(ia, "i").test(window.navigator.userAgent) ? 1 : 0 } } if (typeof (ej.Dom) === "undefined") { ej.Dom = {} } ej.Dom.getComputedStyle = function (i, e) { var iV = i.nodeType == 9 ? i : i.ownerDocument || i.document, T; if (iV.defaultView && iV.defaultView.getComputedStyle) { T = iV.defaultView.getComputedStyle(i, null); if (T) { return T[e] || T.getPropertyValue(e) } } else { if (i.currentStyle) { return i.currentStyle[e] || "" } } return "" }; var eX = ej.BaseEvent; var cD = ej.BaseClass; cD.prototype.toString = function () { return this._className || "" }; ej.on = function (T, i, e) { if (!(T = ej.G(T))) { return T } i = i.replace(/^on/, ""); if (T.addEventListener) { T.addEventListener(i, e, false) } else { if (T.attachEvent) { T.attachEvent("on" + i, e) } } return T }; ej.un = function (T, i, e) { if (!(T = ej.G(T))) { return T } i = i.replace(/^on/, ""); if (T.removeEventListener) { T.removeEventListener(i, e, false) } else { if (T.detachEvent) { T.detachEvent("on" + i, e) } } return T }; ej.hc = function (iV, T) { if (!iV || !iV.className || typeof iV.className != "string") { return false } var i = -1; try { i = iV.className == T || iV.className.search(new RegExp("(\\s|^)" + T + "(\\s|$)")) } catch (iW) { return false } return i > -1 }; ej.isEmptyObject = function (T) { if (Object.prototype.toString.call(T) === "[object Object]") { for (var e in T) { return false } return true } else { return false } }; var bB = window.location.protocol === "http:" ? "http:" : "https:"; var dR = { fontFamily: 'Arial,Helvetica,"PingFang SC","Hiragino Sans GB",STHeiti,sans-serif', mapStyleNameIdPair: { "default": 0, "grayed-out": 1 }, mapHost: bB + "//map.baidu.com", apiHost: bB + "//api.map.baidu.com", apiIMG: bB + "//api.map.baidu.com/images", staticHost: bB + "//webmap0.bdimg.com", imgPath: bB + "//webmap0.bdimg.com/image/api/", tileDomain: [bB + "//maponline0.bdimg.com", bB + "//maponline1.bdimg.com", bB + "//maponline2.bdimg.com", bB + "//maponline3.bdimg.com"], optDomain: "http://10.120.25.45:8017", rasterTilePath: "/tile/", vectorTilePath: "/pvd/", originTilePath: [bB + "//pcor.baidu.com"], stylePath: "//maponline0.bdimg.com/sty/", getIconSetPath: function (e) { var i = "map_icons2x/"; if (typeof e === "string" && this.mapStyleNameIdPair[e] > 0) { i = "map_icons2x_" + (this.mapStyleNameIdPair[e] - 1) + "/" } return bB + this.stylePath + i }, getMapStyleFiles: function (T) { var iW = true; if (typeof T === "string" && T !== "default") { iW = false } var iX = iW ? "" : "_" + (this.mapStyleNameIdPair[T] - 1); var i = bl(); var iV = "udt=" + i.udt + "&v=" + i.ver; var e = bB + this.stylePath; return [e + "icons_2x" + iX + ".js?" + iV, e + "fs" + iX + ".js?" + iV, e + "indoor_fs.js?" + iV] }, tvc: { ditu: { normal: { version: "088", updateDate: "20210726" }, satellite: { version: "009", updateDate: "20210726" }, normalTraffic: { version: "081", updateDate: "20210726" }, satelliteTraffic: { version: "083", updateDate: "20210726" }, mapJS: { version: "104", updateDate: "20210726" }, satelliteStreet: { version: "083", updateDate: "20210726" }, panoClick: { version: "1033", updateDate: "20180108" }, panoUdt: { version: "20180108", updateDate: "20180108" }, panoSwfAPI: { version: "20150123", updateDate: "20150123" }, panoSwfPlace: { version: "20141112", updateDate: "20141112" }, earthVector: { version: "001", updateDate: "20210726" } } }, msv: { mapstyle: { updateDate: "20210726", version: "001" } } }; dR.imgResources = { blankGIF: dR.staticHost + "/res/litemapapi/v1d1/images/blank.gif?20170501", markerPng: dR.staticHost + "/res/litemapapi/v1d1/images/marker.png?20170501", locPng: dR.staticHost + "/res/litemapapi/v1d1/images/loc.png?20180918", locNewPng: dR.staticHost + "/res/litemapapi/v1d1/images/loc_new.png?20190314", zoomPng: dR.staticHost + "/res/litemapapi/v1d1/images/zoombtn.png?20180918", mapLogoPng: dR.staticHost + "/res/litemapapi/v1d1/images/logo-2x.png?20190226" }; var u = dR; var h5 = "ruler.cur"; if (ej.Browser.ie || ej.Browser.edge) { ej.extend(u, { distCursor: "url(" + u.imgPath + h5 + "),crosshair", defaultCursor: "url(" + u.imgPath + "openhand.cur),default", draggingCursor: "url(" + u.imgPath + "closedhand.cur),move" }) } else { if (ej.Browser.firefox) { ej.extend(u, { distCursor: "url(" + u.imgPath + h5 + "),crosshair", defaultCursor: "-moz-grab", draggingCursor: "-moz-grabbing" }) } else { if (ej.Browser.chrome || ej.Browser.safari) { ej.extend(u, { distCursor: "url(" + u.imgPath + h5 + ") 2 6,crosshair", defaultCursor: "url(" + u.imgPath + "openhand.cur) 8 8,default", draggingCursor: "url(" + u.imgPath + "closedhand.cur) 8 8,move" }); if (ej.Platform.macintosh) { u.defaultCursor = "-webkit-grab"; u.draggingCursor = "-webkit-grabbing" } } else { ej.extend(u, { distCursor: "url(" + u.imgPath + h5 + "),crosshair", defaultCursor: "url(" + u.imgPath + "openhand.cur),default", draggingCursor: "url(" + u.imgPath + "closedhand.cur),move" }) } } } bk = bk || {}; bk.version = "gl"; bk._register = []; bk.register = function (e) { this._register[this._register.length] = e }; bk.guid = 1; bk.getGUID = function (e) { return (e || "") + bk.guid++ }; var ea = window.BMAP_AUTHENTIC_KEY || ""; function J(e, i, iV) { var T = new Date(); T.setTime(T.getTime() + iV * 24 * 60 * 60 * 1000); document.cookie = e + "=" + escape(i) + ";expires=" + T.toGMTString() } function aQ(e, i) { if (navigator.cookieEnabled) { return J(e, i, 30) } if (localStorage) { return localStorage.setItem(e, i) } if (sessionStorage) { return sessionStorage.setItem(e, i) } } bk.getSeckeyCid = function () { var i = +new Date(); var e = bB + "//dlswbr.baidu.com/heicha/mw/abclite-2063-s.js?_t=" + i; fV.load(e, hF) }; function hF() { if (window.___abvk) { aQ("SECKEY_ABVK", window.___abvk) } } window.__abbaidu_2063_cb = function (i) { var e = JSON.parse(i); aQ("BMAP_SECKEY", e.data) }; bk.bmapVerifyCbk = function (e) { if (e && e.error !== 0) { if (typeof map !== "undefined") { map.getContainer().innerHTML = ""; map.__listeners = {} } bk = null; var i = "百度未授权使用地图API，可能是因为您提供的密钥不是有效的百度地图开放平台密钥，或此密钥未对本应用的百度地图JavaScriptAPI授权。您可以访问如下网址了解如何获取有效的密钥：https://lbs.baidu.com/apiconsole/key#。"; switch (e.error) { case 101: i = "您所使用的密钥ak有问题，不支持jsapi服务，可以访问该网址了解如何获取有效密钥：http://lbsyun.baidu.com/apiconsole/key#。"; break; case 102: i = "MCODE参数不存在，mobile类型MCODE参数必需，详情查看：http://lbsyun.baidu.com/apiconsole/key#。"; break; case 200: i = "APP不存在，AK有误请检查再重试，详情查看：http://lbsyun.baidu.com/apiconsole/key#。"; break; case 201: i = "APP被您禁用啦，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看自己的应用具体详情，或联系我们了解详情。"; break; case 202: i = "APP被管理员删除啦，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看自己的应用具体详情，或联系我们了解详情。"; break; case 203: i = "APP类型错误，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看自己的应用具体详情，或联系我们了解详情。"; break; case 210: i = "APP IP校验失败，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看自己的应用具体详情，或联系我们了解详情。"; break; case 220: i = "APP Referer校验失败。请检查该ak设置的白名单与访问所有的域名是否一致。详情查看：http://lbsyun.baidu.com/apiconsole/key#"; break; case 230: i = "APP Mcode码校验失败，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看自己的应用具体详情，或联系我们了解详情。"; break; case 240: i = "APP服务被禁用了，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看自己的应用具体详情，或联系我们了解详情。"; break; case 250: i = "该用户不存在... 请登录 https://lbs.baidu.com 的控制台，注册成为开发者申请ak吧。"; break; case 251: i = "该用户被自己删除啦，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看自己的应用具体详情。"; break; case 252: i = "该用户被管理员删除啦，可以访问 http://lbsyun.baidu.com/apiconsole/key# 了解如何获取有效密钥，或请联系我们了解详情。"; break; case 260: i = "您所使用的密钥AK不包含该服务呢，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看服务选择情况，或请联系我们了解详情。"; break; case 261: i = "您所使用的密钥AK的该服务被禁用啦，可以访问 http://lbsyun.baidu.com/apiconsole/key# 查看服务选择情况，或请联系我们了解详情。"; break; case 401: i = "您所使用的AK并发超限了，请登录 http://lbsyun.baidu.com/cashier/quota#/home 了解详情。"; break; case 302: i = "您所使用的AK天配额超限了，请登录 http://lbsyun.baidu.com/cashier/quota#/home 了解详情。"; break }alert(i) } }; bk.frequencyCbk = function (e) { if (e) { window.QTFrequency = e } }; bk.verify = function () { var e = u.apiHost + "/?qt=verify&v=gl&type=webgl&ak=" + ea + "&callback=" + eL + ".bmapVerifyCbk"; fV.load(e) }; bk.frequency = function () { }; bk.apiLoad = bk.apiLoad || function () { }; function g8(i, e) { this._size = i; this._cache = []; this._totalGetTimes = 0; this._totalHitTimes = 0; this._options = { clearCallback: null, removeOldCallback: null }; e = e || {}; for (var T in e) { if (e.hasOwnProperty(T)) { this._options[T] = e[T] } } } g8.prototype.setData = function (T, iV) { var e = this._cache; var i = this._size; if (i === 0) { return } if (e.length > i) { this._removeOld() } if (!e[T]) { e.push(iV) } e[T] = iV; iV._key_ = T }; g8.prototype.getHitRate = function () { return Math.round(this._totalHitTimes / this._totalGetTimes * 1000) / 1000 }; g8.prototype.getData = function (i) { var e = this._cache[i]; if (e) { this._totalHitTimes++ } this._totalGetTimes++; return e }; g8.prototype.removeData = function (iW) { if (this._options.clearCallback) { this._options.clearCallback(this._cache[iW]) } var T = this._cache; var iX = T[iW]; for (var iV = 0, e = T.length; iV < e; iV++) { if (T[iV] === iX) { T.splice(iV, 1); break } } delete T[iW] }; g8.prototype._removeOld = function () { var e = this._cache; var iW = Math.round(this._size * 0.6); for (var iV = 0; iV < iW; iV++) { var T = e[iV]._key_; if (this._options.clearCallback) { this._options.clearCallback(e[T]) } delete e[T] } e.splice(0, iW); if (this._options.removeOldCallback) { this._options.removeOldCallback() } }; g8.prototype.clear = function () { var T = this._cache; for (var iW = 0, e = T.length; iW < e; iW++) { var iV = T[iW]._key_; if (this._options.clearCallback) { this._options.clearCallback(T[iV]) } delete T[iV] } this._cache = T = [] }; g8.prototype.forEach = function (iV) { var T = this._cache; for (var iX = 0, e = T.length; iX < e; iX++) { var iW = T[iX]._key_; iV(T[iW]) } }; g8.prototype.getBatch = function (iW) { var e = []; for (var iV = 0, T = iW.length; iV < T; iV++) { if (this.getData(iW[iV])) { e[e.length] = this.getData(iW[iV]) } } return e }; g8.prototype.clearExcept = function (iX) { var T = this._cache; for (var e = T.length, iW = e - 1; iW >= 0; iW--) { var iV = this._cache[iW]._key_; if (!iX[iV]) { T.splice(iW, 1); if (this._options.clearCallback) { this._options.clearCallback(T[iV]) } delete T[iV] } } }; g8.prototype.getDataCount = function () { return this._cache.length }; function hK() { } ej.extend(hK.prototype, { centerAndZoomIn: function (i0, T, i1) { var iY = this; if (!i0 && !T) { return } i0 = i0 || this.centerPoint; T = T || this.zoomLevel; T = this._getProperZoom(T).zoom; if (this.mapType === BMAP_EARTH_MAP) { if (!this._earth) { this.mapType = BMAPGL_NORMAL_MAP; this.temp.originMapType = BMAP_EARTH_MAP; function iZ() { iY._earth = new bk.Earth(iY, { showRealSunlight: iY.config.showRealSunlight, showMilkyway: iY.config.showMilkyway, earthBackground: iY.config.earthBackground }); iY._proxyEarthEvents(); iY._changeEarthMapType(BMAP_EARTH_MAP); ej.extend(iY, bk.EarthView.prototype); if (!iY._navigationCtrl && iY.config.showControls) { iY._navigationCtrl = new bk.NavigationControl3D(iY) } delete iY.temp.originMapType } f8.load("earth", function () { if (bk["FeatureStyle" + iY.config.style]) { iZ() } else { iY.loadMapStyleFiles(function () { iZ() }) } }) } } this.lastLevel = this.zoomLevel || T; this.zoomLevel = T; var iW = new eX("onload"); iW.point = i0; iW.zoom = T; this.centerPoint = this.restrictCenter(new b8(i0.lng, i0.lat)); if (this.centerPoint.zoom) { this.zoomLevel = this.centerPoint.zoom } this.defaultZoomLevel = this.defaultZoomLevel || this.zoomLevel; this.defaultCenter = this.defaultCenter || this.centerPoint; if (!this.loaded && !(this.temp.originMapType === BMAP_EARTH_MAP)) { var i = this.config.defaultMaxBounds; var iX = new g(i, "baidu", this.mapType); var iV = new gy({ mapType: this.mapType, copyright: iX, customLayer: false, baseLayer: true, tileTypeName: "web" }); iV._isInnerLayer = true; this.addTileLayer(iV); if (this.mapType === BMAP_SATELLITE_MAP && this._isHybridShow === true) { this._addHybirdMap() } } this.dispatchEvent(iW); this.loaded = true; i1 = i1 || {}; i1.callback && i1.callback() }, _setPlatformPosition: function (i1, i0, i4) { i4 = i4 || {}; if (i1 === 0 && i0 === 0 && !i4.point) { return } if (isNaN(i4.initMapOffsetX)) { i4.initMapOffsetX = this.offsetX } if (isNaN(i4.initMapOffsetY)) { i4.initMapOffsetY = this.offsetY } var i2 = i1 + i4.initMapOffsetX; var iZ = i0 + i4.initMapOffsetY; if (i4.point) { var i = this.restrictCenter(i4.point); if (!i.equals(this.centerPoint)) { this.centerPoint = i.clone(); this.fire(new eX("oncenter_changed")) } } else { var iV = this.offsetX - i2; var e = this.offsetY - iZ; var T = this.getZoomUnits(); var iY = this.centerPoint.lng; var iX = this.centerPoint.lat; var iW = new b8(iY, iX); this.centerPoint = this.restrictCenter(new b8(iW.lng + iV * T, iW.lat - e * T), T); this.fire(new eX("oncenter_changed")); if (this.zoomLevel < 10) { i2 = this.offsetX - (this.centerPoint.lng - iW.lng) / T; iZ = this.offsetY + (this.centerPoint.lat - iW.lat) / T } } this.offsetX = i2; this.offsetY = iZ; var i3 = this.platform.style; i3.left = i2 + "px"; i3.top = iZ + "px"; this.maskLayer.style.left = -i2 + "px"; this.maskLayer.style.top = -iZ + "px"; if (i4.dispatchEvent !== false) { this.dispatchEvent(new eX("onmoving")) } }, zoomTo: function (e, iY, i2) { i2 = i2 || {}; i2.zoomCenter = iY; if (i2.noAnimation !== true) { this.deepZoomTo(e, i2); return } if (typeof e !== "number") { return } var iW = dG[this.mapType]; if (!iW) { return } var T = e; e = this._getProperZoom(e).zoom; if (e === this.zoomLevel) { var iZ = new eX("onzoomexceeded"); iZ.targetZoom = T; this.dispatchEvent(iZ); i2.callback && i2.callback(); return } this.lastLevel = this.zoomLevel; if (iY) { this.temp._cPoint = iY; this.temp._cPixel = this.pointToPixelIn(iY) } else { if (this.getInfoWindow()) { var i1 = this.getInfoWindow().getPoint(); this.temp._cPixel = this.pointToPixelIn(i1); this.temp._cPoint = i1 } } if (this.config.zoomCenter) { iY = this.config.zoomCenter; this.temp._cPoint = iY; this.temp._cPixel = this.pointToPixelIn(iY) } if (iY || this.temp.infoWin && this.temp.infoWin.isOpen()) { var i = this.temp._cPoint; var i0 = this.temp._cPixel; var iV = this.getZoomUnits(e); var iX = new b8(i.lng + iV * (this.width / 2 - i0.x), i.lat - iV * (this.height / 2 - i0.y)); this.centerPoint = this.restrictCenter(iX, iV, e); if (this.centerPoint.zoom) { e = this.centerPoint.zoom } } if (i2.fireEvent !== false) { this.dispatchEvent(new eX("onzoomstart")) } if (e !== this.zoomLevel) { this.zoomLevel = e; this.dispatchEvent(new eX("onzooming")); this.dispatchEvent(new eX("onzoomstartcode")) } if (i2.fireEvent !== false) { this.dispatchEvent(new eX("onzoomend")) } if (i2.callback) { i2.callback() } }, deepZoomMedia: function (e) { var i = this; if (!i.temp.isStdCtrlBusy) { i.temp.isStdCtrlBusy = true; i.deepZoomTo(i.zoomLevel + e); setTimeout(function () { i.temp.isStdCtrlBusy = false }, 400) } }, deepZoomTo: function (iZ, iV) { iV = iV || {}; var iX = iZ - this.zoomLevel; var iW = this._getProperZoom(iZ); if (iW.exceeded) { var e = new eX("onzoomexceeded"); e.targetZoom = iZ; this.dispatchEvent(e); return } var i; if (iV.zoomCenter) { i = this.pointToPixelIn(iV.zoomCenter) } else { if (this.getInfoWindow()) { i = this.pointToPixelIn(this.getInfoWindow().getPoint(), { zoom: this.lastLevel }) } else { var i = new eB(this.width / 2, this.height / 2) } } this.lastLevel = this.zoomLevel; var iY = this.deepZoom || new at(this); var T = iX > 0 ? 1 : -1; iY.zoomMap(i, iX, T, null, iV) }, flyToIn: function (i0, e) { if (e === this.zoomLevel) { this.panToIn(i0); return } var iX = this._getProperZoom(e); if (iX.exceeded) { var i1 = new eX("onzoomexceeded"); i1.targetZoom = e; this.dispatchEvent(i1); return } var iZ = e - this.zoomLevel; var T = new eB(this.width / 2, this.height / 2); var i = this.pointToPixelIn(i0); var iY = new hS(i.x - T.x, i.y - T.y); this.lastLevel = this.zoomLevel; if (Math.abs(iZ) >= 4 || Math.abs(iY.width) > this.width || Math.abs(iY.height) > this.height) { this.centerAndZoomIn(i0, e); return } var iW = this.deepZoom || new at(this); var iV = iZ > 0 ? 1 : -1; iW.zoomMap(i, iZ, iV, iY) }, panToIn: function (i, T) { T = T || {}; if (!i || i.equals(this.centerPoint)) { T.callback && T.callback(); return } var iV = this.pointToPixelIn(i); var e = Math.round(this.width / 2); var iW = Math.round(this.height / 2); if (Math.abs(e - iV.x) > this.width || Math.abs(iW - iV.y) > this.height || T.noAnimation === true) { this._panToIn(e - iV.x, iW - iV.y, i); T.callback && T.callback() } else { this._panBy(e - iV.x, iW - iV.y, T) } }, _panToIn: function (i, e, iV) { var T = this.temp; if (T.operating === true) { return } if (T.dragAni) { T.dragAni.stop(); T.dragAni = null; this.dispatchEvent(new eX("onmoveend")) } this.dispatchEvent(new eX("onmovestart")); this._setPlatformPosition(i, e, { point: iV }); this.dispatchEvent(new eX("onmoveend")) }, panBy: function (i, e, T) { T = T || {}; i = Math.round(i) || 0; e = Math.round(e) || 0; if (Math.abs(i) <= this.width && Math.abs(e) <= this.height && T.noAnimation !== true) { this._panBy(i, e, T) } else { this._panToIn(i, e); T.callback && T.callback() } }, _panBy: function (i, e, iW) { if (this.temp.operating === true) { return } iW = iW || {}; this.dispatchEvent(new eX("onmovestart")); var iV = this; var T = iV.temp; T.pl = iV.offsetX; T.pt = iV.offsetY; if (T.tlPan) { T.tlPan.cancel() } if (T.dragAni) { T.dragAni.stop(); T.dragAni = null; this.dispatchEvent(new eX("onmoveend")) } T.tlPan = new eQ({ fps: iW.fps || iV.config.fps, duration: iW.duration || iV.config.actionDuration, transition: iW.transition || fJ.easeInOutQuad, render: function (iX) { this.terminative = iV.temp.operating; if (iV.temp.operating) { return } iV._setPlatformPosition(Math.ceil(i * iX), Math.ceil(e * iX), { initMapOffsetX: T.pl, initMapOffsetY: T.pt }) }, finish: function (iX) { iV.dispatchEvent(new eX("onmoveend")); iV.temp.tlPan = false; if (iV.temp.stopArrow === true) { iV.temp.stopArrow = false; if (iV.temp.arrow !== 0) { iV._arrow() } } iW.callback && iW.callback() } }) }, getCenterIn: function () { return this.centerPoint }, getZoom: function () { return this.zoomLevel }, setTilt: function () { }, getTilt: function () { return this._tilt }, setHeading: function () { }, getHeading: function () { return this._heading }, restrictCenter: function (i3, i, e) { this.isRestrict = false; i = i || this.getZoomUnits(); e = e || this.zoomLevel; var i1 = this.pixelToPointIn(new eB(this.width, 0), { center: i3, zoom: e }); var iZ = this.pixelToPointIn(new eB(0, this.height), { center: i3, zoom: e }); var i4 = i3.lng; var i9 = i3.lat; if (this.config.restrictBounds !== null && !this.config.restrictBounds.isEmpty()) { var i8 = this.config.restrictBounds; var iV = i8.getSouthWest(); var i6 = i8.getNorthEast(); var i2 = hZ.convertLL2MC(iV); var iX = hZ.convertLL2MC(i6); i3.lng = this.calcNewLngByBounds(i4, iZ, i1, i2.lng, iX.lng, i); i3.lat = this.calcNewLatByBounds(i9, iZ, i1, i2.lat, iX.lat, i); return i3 } var i0 = this.pixelToPointIn(new eB(0, 0), { center: i3, zoom: e }); var iW = this.pixelToPointIn(new eB(0, this.height), { center: i3, zoom: e }); if (this.zoomLevel < 5) { if (i0.lat > gL.MAX_LAT && iW.lat < gL.MIN_LAT) { this.isRestrict = true; var T = gL.MAX_LAT - i3.lat; var iY = i3.lat - gL.MIN_LAT; var i7; if (T < iY) { i7 = T / (this.height / 2) } else { i7 = iY / (this.height / 2) } var i5 = 18 - k(i7); this.zoomLevel = Math.ceil(i5); i3.zoom = Math.ceil(i5); return i3 } } if (i0.lat > gL.MAX_LAT) { this.isRestrict = true; i3.lat = gL.MAX_LAT - this.height / 2 * i } else { if (iW.lat < gL.MIN_LAT) { this.isRestrict = true; i3.lat = gL.MIN_LAT + this.height / 2 * i } } return i3 } }); function gL(e, T) { if (typeof e === "string") { e = document.getElementById(e) } cD.call(this); this.container = e; this.width = e.clientWidth; this.height = e.clientHeight; this.offsetX = 0; this.offsetY = 0; this._setStyle(e); e.unselectable = "on"; e.innerHTML = ""; ej.ac(e, "bmap-container"); e.appendChild(this.render()); this._initDate = new Date(); this.platform = e.children[0]; this.maskLayer = this.platform.children[0]; this._panes = {}; this.centerPoint = new b8(0, 0); this.zoomLevel = 0; this._heading = 0; this._tilt = 0; this._bounds = new g0(); this.lastLevel = 0; this._lock = false; this._enableTiltZoom = 7; this._enableHeadingZoom = 7; this.defaultZoomLevel = null; this.defaultCenter = null; this.zoomEventStatus = "idle"; this.currentOperation = dA.idle; this._setConfig(T); this._initMapRenderType(); this._animationInfo = {}; this._animationInfoUnstopable = {}; this.suspendLoad = false; this._customTileLabels = []; if (this._renderType === "webgl") { this._workerMgr = new ig(this); this._featureMgr = new bT(); ej.extend(this, v.prototype); this.jobScheduler = new a6(this); this.benchmark = new cw(); this._setupWebGLMap(); this.deviceInfo = { hardwareInfo: { renderer: "", vendor: "" } }; if (cB.ifSupportWebGL._renderer) { this.deviceInfo.hardwareInfo.renderer = cB.ifSupportWebGL._renderer; this.deviceInfo.hardwareInfo.vendor = cB.ifSupportWebGL._vendor } } else { ej.extend(this, hK.prototype) } if (!dG[this.config.mapType]) { this.config.mapType = BMAPGL_NORMAL_MAP } if (this.config.mapType === BMAP_EARTH_MAP && !this.config.enableEarth) { if (this.forceEnableEarth() === false) { this.config.mapType = BMAPGL_NORMAL_MAP } } this.mapType = this.config.mapType; this.preMapType = null; if (this.config.enableEarth) { var iX = this.maskLayer.style; iX.opacity = 0; iX.background = "#000"; if (this.config.mapType === BMAP_EARTH_MAP) { iX.opacity = 1 } setTimeout(function () { iX.WebkitTransition = iX.transition = "opacity .4s" }, 100) } this._isHybridShow = this.config.showStreetLayer; this.temp = { operating: false, arrow: 0, lastDomMoveTime: 0, lastLoadTileTime: 0, lastMovingTime: 0, canKeyboard: false, I: function (i) { return ej.I(i) }, curSpots: [], curSpotsArray: [], curAreaSpot: null, spotsGuid: 1, registerIndex: -1, hoverOnSpot: null, isStdCtrlBusy: false }; window.InstanceCore = this.temp.I; this.platform.style.cursor = this.config.defaultCursor; this._bind(); for (var iV = 0; iV < bk._register.length; iV++) { bk._register[iV](this) } this.temp.registerIndex = iV; var iW = this; if (this._renderType === "webgl") { f8.load("oppcgl", function () { iW._asyncRegister() }) } else { f8.load("oppc", function () { iW._asyncRegister() }) } if (this.config.mapType === "B_EARTH_MAP") { if (!bk.Earth) { f8.load("earth", function () { }) } else { iW._syncAndChangeMapType("B_EARTH_MAP") } } } gL.MAX_TILT = 87; gL.MAX_DRAG_TILT = 73; gL.MAX_DRAG_TILT_L2 = 50; gL.MIN_TILT = 0; gL.MAX_LAT = 19431424; gL.MIN_LAT = -16023552; gL.WORLD_SIZE_MC_HALF = 20037726.372307256; gL.WORLD_SIZE_MC = gL.WORLD_SIZE_MC_HALF * 2; gL.RIGHT_EDGE_POINT = new b8(gL.WORLD_SIZE_MC_HALF, 0); gL.LEFT_EDGE_POINT = new b8(-gL.WORLD_SIZE_MC_HALF, 0); gL.HIGH_RES_MIN_RATIO = 1.2; gL.inherits(cD, "Map"); var eJ = { NORMAL: "B_NORMAL_MAP", EARTH: "B_EARTH_MAP", SATELLITE: "B_STREET_MAP" }; bk.MapTypeId = eJ; ej.extend(gL.prototype, { render: function () { var e = bG("div", { id: "platform" }); var iV = e.style; iV.overflow = "visible"; iV.position = "absolute"; iV.zIndex = 5; iV.top = iV.left = "0px"; var i = bG("div", { id: "mask", "class": "BMap_mask" }); var T = i.style; T.position = "absolute"; T.top = T.left = "0px"; T.zIndex = "9"; T.overflow = "hidden"; T.WebkitUserSelect = "none"; T.width = this.width + "px"; T.height = this.height + "px"; e.appendChild(i); return e }, _initMapRenderType: function () { var e = this.config.forceRenderType; if (e === "dom") { this._renderType = "dom"; return } else { if (e === "canvas") { if (cB.isModernBrowser && !cB.ifCanvas2dInBlackList()) { this._renderType = "canvas"; return } else { this._renderType = "dom"; return } } else { if (e === "webgl") { if (cB.ifSupportWebGL()) { this._renderType = "webgl"; return } } } } if (cB.ifSupportWebGL() && cB.ifEnableWebGLMap()) { this._renderType = "webgl"; return } if (cB.isModernBrowser && cB.ifEnableCanvas2dMap()) { this._renderType = "canvas"; return } this._renderType = "dom" }, _setConfig: function (i) { i = i || {}; this.config = { bottomOffset: 0, clickInterval: 200, enableDragging: true, enableRotate: true, enableTilt: true, enableKeyboard: false, enableDblclickZoom: true, enableContinuousZoom: true, enableWheelZoom: false, enableRotateGestures: true, enableTiltGestures: true, enablePinchZoom: true, fixCenterWhenPinch: false, enableAutoResize: true, zoomCenter: null, fps: ej.Browser.ie ? 30 : 60, zoomerDuration: 240, actionDuration: 450, defaultCursor: u.defaultCursor, draggingCursor: u.draggingCursor, overlayMoveCursor: "pointer", coordType: BMAP_COORD_MERCATOR, mapType: BMAPGL_NORMAL_MAP, drawer: BMAP_SYS_DRAWER, enableInertialDragging: true, drawMargin: 500, drawMarginGL: 500, enableFulltimeSpotClick: false, enableResizeOnCenter: false, isModernBrowser: cB.isModernBrowser, forceRenderType: "", textRenderType: null, ratio: fp() >= gL.HIGH_RES_MIN_RATIO ? 2 : 1, enableEarth: cB.ifEnableEarth(), defaultMaxBounds: new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)), showControls: false, showRealSunlight: true, showMilkyway: true, earthBackground: null, showStreetLayer: true, minZoom: null, maxZoom: null, style: "default", backgroundColor: null, enableIconClick: false, autoSafeArea: false, ak: null, webgl2: false, restrictCenter: true, restrictBounds: null, smaa: true, preserveDrawingBuffer: false, privateOn: false, privateRegions: null }; for (var T in i) { if (i.hasOwnProperty(T)) { this.config[T] = i[T]; if (T === "fixCenterWhenResize") { this.config.enableResizeOnCenter = i[T] } } } if (i.style) { if (i.style["styleId"] && i.style["styleId"].length < 32) { this.config.style = i.style["styleId"] } else { this.config.style = i.style } } this._setTextRenderType(); this._displayOptions = { poi: true, poiText: true, poiIcon: true, overlay: true, layer: true, building: true, indoor: true, street: true, skyColors: ["rgba(226, 237, 248, 0)", "rgba(186, 211, 252, 1)"], isFlat: false, labelMargin: 0 }; if (i.displayOptions) { for (var e in i.displayOptions) { if (i.displayOptions.hasOwnProperty(e)) { this._displayOptions[e] = i.displayOptions[e] } } } if (this.config.restrictCenter === false) { this._enableTiltZoom = 0; this._enableHeadingZoom = 0 } }, getMinZoom: function () { var T; if (dG[this.mapType][this._renderType]) { T = dG[this.mapType][this._renderType].minZoom } else { T = dG[this.mapType].minZoom } if (this.config.minZoom !== null && this.config.minZoom >= T) { T = this.config.minZoom } if (this.mapType === "B_EARTH_MAP") { return T } var i = this.getSize(); var e = this.worldSize(T); while (e < i.width) { T++; e = this.worldSize(T) } return T }, getMaxZoom: function () { var e; if (dG[this.mapType][this._renderType]) { e = dG[this.mapType][this._renderType].maxZoom } else { e = dG[this.mapType].maxZoom } if (this.config.maxZoom !== null && this.config.maxZoom <= e) { e = this.config.maxZoom } else { if (this._renderType === "webgl") { e = 21 } } return e }, _drawFrame: function () { this._webglMapScene._painter.draw() }, _setupWebGLMap: function () { var e = this; f8.load("mapgl", function () { e._asyncRegister() }) }, _setStyle: function (i) { var e = i.style; e.overflow = "hidden"; if (bW(i).position !== "absolute") { e.position = "relative" } e.backgroundImage = "url(" + u.imgPath + "bg.png)"; e.textAlign = "left"; e.touchAction = e.MSTouchAction = "none" }, _bind: function () { var e = this; if (e._renderType !== "webgl") { e._watchSize = function () { var T = e.getContainerSize(); if (e.width !== T.width || e.height !== T.height) { var iY = (T.width - e.width) / 2; var i0 = (T.height - e.height) / 2; var iV = e.getZoomUnits(); var iX = e.centerPoint; if (iX && !e.config.enableResizeOnCenter) { e.centerPoint = new b8(iX.lng + iY * iV, iX.lat - i0 * iV) } e.maskLayer.style.width = (e.width = T.width) + "px"; e.maskLayer.style.height = (e.height = T.height) + "px"; var iW = new eX("onresize"); iW.size = T; e.dispatchEvent(iW); e.fire(new eX("onsize_changed")); var i = parseInt(e.platform.style.left, 10) || 0; var iZ = parseInt(e.platform.style.top, 10) || 0; if (e.currentOperation !== "undefined" && e.currentOperation !== dA.idle && (e.offsetX !== i || e.offsetY !== iZ)) { e._setPlatformPosition(i, iZ) } } } } else { e._watchSize = function () { var i = e.getContainerSize(); if (e.width !== i.width || e.height !== i.height) { var iV = e.getSize(); e.maskLayer.style.width = (e.width = i.width) + "px"; e.maskLayer.style.height = (e.height = i.height) + "px"; if (fp() !== e.config.ratio) { e.config.ratio = fp() } var iW = new eX("onresize"); iW.size = i; e.dispatchEvent(iW); var T = new eX("onsize_changed"); T.size = i; T.oldSize = iV; e.fire(T) } } } if (e.config.enableAutoResize) { e.temp.autoResizeTimer = setInterval(e._watchSize, 16) } this.on("size_changed", function () { var i = e.getMinZoom(); if (e.zoomLevel < i) { e.setZoomIn(i, { noAnimation: true }) } }); this.on("zoom_changed", function () { this.dispatchEvent(new eX("onzooming")) }) }, addControl: function (e) { if (e && bC(e._i)) { e._i(this); this.dispatchEvent(new eX("onaddcontrol", e)) } }, removeControl: function (e) { if (e && bC(e.remove)) { e.remove(); this.dispatchEvent(new eX("onremovecontrol", e)) } }, addContextMenu: function (e) { if (e) { e.initialize(this); this.dispatchEvent(new eX("onaddcontextmenu", e)) } }, removeContextMenu: function (e) { if (e) { this.dispatchEvent(new eX("onremovecontextmenu", e)); e.remove() } }, addDistrictLayer: function (e) { if (e) { e.initialize(this) } }, removeDistrictLayer: function (e) { if (e) { e.removeDistrict(this, e) } }, addOverlay: function (i) { if (i && bC(i._i)) { var T = new eX("onbeforeaddoverlay", i); T.overlay = i; this.dispatchEvent(T); i._i(this); T = new eX("onaddoverlay", i); T.overlay = i; this.dispatchEvent(T) } }, removeOverlay: function (i) { if (i && bC(i.remove)) { var T = new eX("onremoveoverlay", i); T.overlay = i; i.remove(); this.dispatchEvent(T) } }, clearOverlays: function () { this.dispatchEvent(new eX("onclearoverlays")) }, addTileLayer: function (iW) { if (!iW) { return } for (var iV = 0, e = this.tileMgr.tileLayers.length; iV < e; iV++) { var T = this.tileMgr.tileLayers[iV]; if (T === iW || T.getMapType() === iW.getMapType()) { return } } iW.initialize(this); this.dispatchEvent(new eX("onaddtilelayer", iW)) }, removeTileLayer: function (e) { if (e) { e.remove(); this.dispatchEvent(new eX("onremovetilelayer", e)) } }, getTileLayer: function (e) { if (this.tileMgr) { return this.tileMgr.getTileLayer(e) } return null }, setMapType: function (e) { var i = this; if (this.mapType === e || this._mapTypeChanging) { return } if (e === BMAP_EARTH_MAP && !this.config.enableEarth) { return } if (this._earth && this._earth.getLock()) { return } this._mapTypeChanging = true; this.preMapType = this.mapType; this._boundsInPreMapType = this.getBoundsIn(); if (this.preMapType === BMAP_SATELLITE_MAP) { this._preStreetLayerShow = this._isHybridShow } if (e === BMAP_EARTH_MAP) { if (!bk.Earth) { f8.load("earth", function () { i._syncAndChangeMapType(e) }); return } i._syncAndChangeMapType(e) } else { if (this.preMapType !== BMAP_EARTH_MAP) { this._changeFlatMapType(e); this._mapTypeChanging = false } else { this._setMapTypeStatus(e, function (T, iV) { var iW = i._earth.getEarthCanvas(); i._changeFlatMapType(e, this.preMapType); if (i._mapTypeChangAni) { i._mapTypeChangAni.stop() } i._mapTypeChangAni = cS.start({ el: iW, style: "opacity", startValue: 1, endValue: 0, duration: 200, callback: function () { i._mapTypeChangAni = null; i._mapTypeChanging = false } }); T = hZ.convertLL2MC(T); if (i._renderType === "webgl") { ej.extend(i, v.prototype); i.setCenterIn(T, { noAnimation: true }); i.setZoomIn(iV, { noAnimation: true }) } else { ej.extend(i, hK.prototype); i.centerAndZoomIn(T, iV) } }) } } }, _changeFlatMapType: function (iY) { if (!iY || !dG[iY]) { return } var i6 = this.preMapType; this.mapType = iY; var iV = this.getTileLayer(i6); if (iV) { this.removeTileLayer(iV) } else { if (this.tileMgr.tileLayers.length) { var i5 = this.getTileLayer("B_NORMAL_MAP"); if (i5) { this.removeTileLayer(i5) } else { i5 = this.getTileLayer("B_SATELLITE_MAP"); i5 && this.removeTileLayer(i5) } } } this._preStreetLayerShow = this.config.showStreetLayer; if (i6 === BMAP_SATELLITE_MAP && this._preStreetLayerShow) { this._removeHybirdMap() } if (this.mapType !== BMAP_EARTH_MAP || this._renderType !== "webgl" || this.baseLayerAdded !== true) { var T = new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)); var i3 = new g(T, "baidu", iY); var iW = new gy({ mapType: this.mapType, copyright: i3, dataType: this.mapType === BMAP_SATELLITE_MAP ? fO : gJ, customLayer: this.mapType === BMAP_SATELLITE_MAP, baseLayer: true, transparentPng: true, tileTypeName: this.mapType === BMAP_SATELLITE_MAP ? "web" : "na" }); iW._isInnerLayer = true; iW.setZIndex(0); this.addTileLayer(iW); if (this._renderType === "webgl" && !this.baseLayerAdded) { this.baseLayerAdded = true } } if (iY === BMAP_SATELLITE_MAP) { this._featureMgr.clearLabelOverlayData(); this._featureMgr.setLabelData([]); if (this._preStreetLayerShow === true || typeof this._preStreetLayerShow === "undefined") { this._addHybirdMap() } } var i0 = this.tileMgr.tileLayers; for (var iZ = 0, iX = i0.length; iZ < iX; iZ++) { var i1 = i0[iZ]; var i4 = i1.tilesDiv; if (!i4) { continue } if (!i1._isInnerLayer && i4.style.visibility === "hidden") { i4.style.visibility = "" } } var i2 = new eX("onmaptypechange"); i2.zoomLevel = this.zoomLevel; i2.mapType = iY; i2.exMapType = i6; this.dispatchEvent(i2) }, showStreetLayer: function (e) { e ? this._addHybirdMap() : this._removeHybirdMap() }, hideStreetLayer: function (e) { this._hideStreetLayerOptions = e; this._removeHybirdMap(e) }, _addHybirdMap: function () { this._isHybridShow = true; if (this.mapType === "B_EARTH_MAP") { if (this._earth) { this._earth.showStreetLayer() } return } if (this._hybridTileLayer) { this.addTileLayer(this._hybridTileLayer); var iY = new eX("onstreetlayer_show"); this.dispatchEvent(iY); return } var iW = new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)); var T = new g(iW, "", BMAP_HYBRID_MAP); var i = new gy({ copyright: T, transparentPng: true, tileTypeName: "web" }); i._isInnerLayer = true; var iV = this.isCanvasMap(); i.getTilesUrl = function (iZ, i4) { var i2 = dG.B_STREET_MAP; var i3 = iB("ditu", "satelliteStreet"); var i0 = i3.ver; var e = i3.udt; var i1 = i2.tileUrls[Math.abs(iZ.x + iZ.y) % i2.tileUrls.length] + "?qt=vtile&x=" + (iZ.x + "").replace(/-/gi, "M") + "&y=" + (iZ.y + "").replace(/-/gi, "M") + "&z=" + i4 + "&styles=sl&v=" + i0 + "&udt=" + e + "$scaler=" + fp() + "&showtext=" + (iV ? 0 : 1); return i1 }; this._isHybridShow = true; this.addTileLayer(i); this._hybridTileLayer = i; var iX = new eX("onstreetlayer_show"); this.dispatchEvent(iX) }, _removeHybirdMap: function (i) { this._isHybridShow = false; if (this.mapType === "B_EARTH_MAP") { if (this._earth) { this._earth.hideStreetLayer(i) } return } if (this._hybridTileLayer) { this.removeTileLayer(this._hybridTileLayer); var T = new eX("onstreetlayer_hide"); this.dispatchEvent(T) } }, isStreetLayerShow: function () { return this._isHybridShow }, getTileId: function (e, iX) { var iV = dG[this.mapType]; if (typeof iV !== "object") { return null } var T = iV.baseUnits * Math.pow(2, (iV.zoomLevelBase - iX)); var iW = parseInt(e.lng / T, 10); var i = parseInt(e.lat / T, 10); return { row: iW, column: i, level: iX } }, reset: function () { this.centerAndZoomIn(this.defaultCenter, this.defaultZoomLevel, true) }, setOptions: function (i) { i = i || {}; var iW = this; for (var iV in i) { if (i.hasOwnProperty(iV)) { var T = true; if (typeof i[iV] !== "object") { T = i[iV] !== this.config[iV] } this.config[iV] = i[iV]; if (iV === "fixCenterWhenResize") { this.config.enableResizeOnCenter = i[iV] } if (!T) { continue } switch (iV) { case "style": case "styleUrl": var e = { os: i.style.os, sv: i.style.sv }; if (iV === "style" && i.styleUrl) { break } this.fire(new eX("onstyle_willchange")); this.loadMapStyleFiles(function () { var iX = new eX("onlayer_update"); iX.name = "na"; iW.fire(iX) }, e); break; case "enableAutoResize": if (i[iV] === true) { this.enableAutoResize() } else { this.disableAutoResize() } break; case "displayOptions": this.setDisplayOptions(i[iV]); break } } } }, setPrivateStatus: function (i) { if (typeof i === "boolean") { if (this.config.privateOn !== i) { this.config.privateOn = i; var e = new eX("onlayer_update"); e.name = "na"; this.fire(e) } } }, getPrivateStatus: function () { return this.config.privateOn }, setPrivateRegions: function (iW) { if (iW && iW instanceof Array) { var iV = true; for (var T = 0; T < iW.length; T++) { if (iW[T] instanceof ck) { continue } else { iV = false; break } } if (iV) { this.config.privateRegions = iW; var e = new eX("onlayer_update"); e.name = "na"; this.fire(e) } } }, getPrivateRegions: function () { if (!this.config.privateRegions) { return null } else { return this.config.privateRegions } }, enableDragging: function () { this.config.enableDragging = true }, disableDragging: function () { this.config.enableDragging = false }, enableInertialDragging: function () { this.config.enableInertialDragging = true }, disableInertialDragging: function () { this.config.enableInertialDragging = false }, enableScrollWheelZoom: function () { this.config.enableWheelZoom = true }, disableScrollWheelZoom: function () { this.config.enableWheelZoom = false }, enableContinuousZoom: function () { this.config.enableContinuousZoom = true }, disableContinuousZoom: function () { this.config.enableContinuousZoom = false }, enableResizeOnCenter: function () { this.config.enableResizeOnCenter = true }, disableResizeOnCenter: function () { this.config.enableResizeOnCenter = false }, enableDoubleClickZoom: function () { this.config.enableDblclickZoom = true }, disableDoubleClickZoom: function () { this.config.enableDblclickZoom = false }, enableKeyboard: function () { this.config.enableKeyboard = true }, disableKeyboard: function () { this.config.enableKeyboard = false }, getSize: function () { return new hS(this.width, this.height) }, enablePinchToZoom: function () { this.config.enablePinchZoom = true }, disablePinchToZoom: function () { this.config.enablePinchZoom = false }, enableTilt: function () { this.config.enableTilt = true }, disableTilt: function () { this.config.enableTilt = false }, enableRotate: function () { this.config.enableRotate = true }, disableRotate: function () { this.config.enableRotate = false }, enableAutoResize: function () { this.config.enableAutoResize = true; this._watchSize(); if (!this.temp.autoResizeTimer) { this.temp.autoResizeTimer = setInterval(this._watchSize, 16) } }, disableAutoResize: function () { this.config.enableAutoResize = false; if (this.temp.autoResizeTimer) { clearInterval(this.temp.autoResizeTimer); this.temp.autoResizeTimer = null } }, checkResize: function () { this._watchSize() }, resize: function () { this._watchSize() }, getContainerSize: function () { return new hS(this.container.clientWidth, this.container.clientHeight) }, _getProperZoom: function (T) { if (!T) { T = this.zoomLevel } var i = this.getMinZoom(); var e = this.getMaxZoom(); var iV = false; if (T < i) { iV = true; T = i } if (T > e) { iV = true; T = e } if (this._renderType !== "webgl") { T = Math.round(T) } return { zoom: T, exceeded: iV } }, getContainer: function () { return this.container }, getZoomUnits: function (T) { if (this.mapType === BMAP_EARTH_MAP) { return Math.pow(2, 18 - this._earth.getImageZoom()) } var e = dG[this.mapType]; if (typeof e !== "object") { return null } var i = T || this.zoomLevel; return Math.pow(2, (e.zoomLevelBase - i)) }, pointToPixelIn: function (i6, i8) { if (!i6) { return } i8 = i8 || {}; if (this.mapType === BMAP_EARTH_MAP) { var iX; if (!i6._llPt) { iX = hZ.convertMC2LL(i6); i6._llPt = iX } iX = i6._llPt; var i2 = null; var iW = null; if (typeof i8.zoom === "number") { var i5 = this._earth; var i7 = i5._getEarthZoomByImgZoom(i8.zoom); if (i7 <= 3) { i2 = i5._generateTmpPMatrix(i7) } iW = i5._generateTmpMVMatrix(i5.getCenter(), i7) } var iY = this._earth.fromLatLngToPixel(iX, { useRound: false, isCalcOnBack: true, matrixInfo: { modelViewMatrix: iW, projectionMatrix: i2 } }); return iY } if ((this._heading % 360 === 0 && this._tilt === 0) || !this._webglMapCamera) { var i4 = this.getZoomUnits(i8.zoom); var i0 = i8.center || this.centerPoint; var iV = this.width / 2; var iZ = this.height / 2; var i3; if (i6.lng * i0.lng < 0) { var i = Math.abs(i6.lng - i0.lng); var e = (em._mc180X * 2 - i) / i4; if (i0.lng < 0) { i3 = iV - e } else { i3 = iV + e } } else { i3 = (i6.lng - i0.lng) / i4 + iV } var i1 = (i0.lat - i6.lat) / i4 + iZ; if (i8.useRound !== false) { i3 = Math.round(i3); i1 = Math.round(i1) } return new eB(i3, i1) } var T = this._webglMapCamera.fromMCToScreenPixel(i6.lng, i6.lat, i8); if (i8.useRound === false) { return T } T.x = Math.round(T.x); T.y = Math.round(T.y); return T }, pixelToPointIn: function (e, i2) { if (!e) { return } i2 = i2 || {}; if (this.mapType === BMAP_EARTH_MAP) { if (typeof i2.zoom === "number") { var i0 = this._earth; var iX = null; var T = null; var i1 = i0._getEarthZoomByImgZoom(i2.zoom); if (i1 <= 3) { iX = i0._generateTmpPMatrix(i1) } T = i0._generateTmpMVMatrix(i0.getCenter(), i1) } var i = this._earth.fromPixelToLatLng(e, { matrixInfo: { modelViewMatrix: T, projectionMatrix: iX } }); if (i === null) { return null } return hZ.convertLL2MC(i) } if ((this._heading % 360 !== 0 || this._tilt > 0) && this._webglMapCamera) { return this._webglMapCamera.fromScreenPixelToMC(e.x, e.y, i2) } var iY = i2.center || this.centerPoint; var iZ = this.getZoomUnits(i2.zoom); var iW = iY.lng + iZ * (e.x - this.width / 2); var iV = iY.lat - iZ * (e.y - this.height / 2); return new b8(iW, iV) }, pointToOverlayPixelIn: function (e, iV) { iV = iV || {}; var T = this.pointToPixelIn(e, { zoom: iV.zoom, center: iV.center, forLabel: true, frustumTest: true, useRound: iV.useRound }); if (!T) { return } if (iV.fixPosition && this.mapType !== "B_EARTH_MAP") { var iW = this.getSize(); var i = this.worldSize(iV.zoom); if (T.x > iW.width) { while (T.x > iW.width) { T.x -= i } } else { if (T.x < 0) { while (T.x < 0) { T.x += i } } } } if (this._renderType === "webgl") { return T } T.x -= this.offsetX; T.y -= this.offsetY; return T }, overlayPixelToPointIn: function (i, e) { if (!i) { return } var T = i.clone(); if (this._renderType !== "webgl") { T.x += this.offsetX; T.y += this.offsetY } return this.pixelToPointIn(T, e) }, getProjection: function () { return new hZ() }, lnglatToMercator: function (e, iV) { var i = new b8(e, iV); var T = hZ.convertLL2MC(i); return [T.lng, T.lat] }, mercatorToLnglat: function (i, e) { if (isNaN(i) || isNaN(e)) { return [] } i = parseFloat(i); e = parseFloat(e); var iV = new b8(i, e); var T = hZ.convertMC2LL(iV); return [T.lng, T.lat] }, getBoundsIn: function () { var i8 = arguments[0]; if (this.mapType === BMAP_EARTH_MAP && this._earth) { var i2 = this._earth.getCustomBounds(); if (!i2) { return this.config.defaultMaxBounds } var i1 = i2.getSouthWest(); var e = i2.getNorthEast(); if (i1.lng > e.lng) { e.lng = 180 } var jp = hZ.convertLL2MC(i1); var jf = hZ.convertLL2MC(e); var i5 = this.config.defaultMaxBounds; var je = Math.max(jp.lng, i5.sw.lng); var jd = Math.max(jp.lat, i5.sw.lat); var i7 = Math.min(jf.lng, i5.ne.lng); var i6 = Math.min(jf.lat, i5.ne.lat); var ja = new g0(new b8(je, jd), new b8(i7, i6)); ja.pointBottomLeft = new b8(je, jd); ja.pointBottomRight = new b8(i7, jd); ja.pointTopLeft = new b8(je, i6); ja.pointTopRight = new b8(i7, i6); ja.setMinMax(); ja.makeNormalizedPoint(this._earth.getHeading()); return ja } i8 = i8 || {}; var iW = i8.margins || [0, 0, 0, 0]; var jk = this.pixelToPointIn({ x: iW[3], y: this.height - iW[2] }, i8); var jo = this.pixelToPointIn({ x: this.width - iW[1], y: iW[0] }, i8); var jc = typeof i8.heading === "number" ? i8.heading : (this._heading % 360); var T = typeof i8.tilt === "number" ? i8.tilt : this._tilt; var i4 = this._webglMapCamera; if ((jc === 0 && T === 0) || !i4) { this._bounds.setSouthWest(jk); this._bounds.setNorthEast(jo); this._bounds.pointBottomLeft = jk; this._bounds.pointBottomRight = new b8(jo.lng, jk.lat); this._bounds.pointTopRight = jo; this._bounds.pointTopLeft = new b8(jk.lng, jo.lat); this._bounds.setMinMax(); this._bounds.makeNormalizedPoint(jc); return this._bounds } var jb = this.pixelToPointIn({ x: iW[3], y: iW[0] }, i8); var iV = i4.getPosition(); var jq = Math.sqrt(Math.pow(jb.lng - iV[0], 2) + Math.pow(jb.lat - iV[1], 2)); var jl = this.getZoomUnits(); var js = jq / jl; var ji = i4._frustumSideLen; var i0 = i4._fovy; if (js > ji || (90 - T) < i0 / 2) { var jr = [jb.lng - iV[0], jb.lat - iV[1]]; if ((90 - T) < i0 / 2) { jr[0] = -jr[0]; jr[1] = -jr[1] } var jj = ji * jl; var iZ = [jr[0] / jq * jj + iV[0], jr[1] / jq * jj + iV[1]]; var jg = [jo.lng - iV[0], jo.lat - iV[1]]; if ((90 - T) < i0 / 2) { jg[0] = -jg[0]; jg[1] = -jg[1] } var iX = [jg[0] / jq * jj + iV[0], jg[1] / jq * jj + iV[1]]; jb.lng = iZ[0]; jb.lat = iZ[1]; jo.lng = iX[0]; jo.lat = iX[1] } var i9 = this.pixelToPointIn({ x: this.width - iW[1], y: this.height - iW[2] }, i8); var jh = [jk, jo, jb, i9]; var jn = jh[0].lng; var jt = jh[0].lat; var iY = jh[0].lng; var i3 = jh[0].lat; for (var jm = 1; jm < 4; jm++) { if (jh[jm].lng < jn) { jn = jh[jm].lng } if (jh[jm].lng > iY) { iY = jh[jm].lng } if (jh[jm].lat < jt) { jt = jh[jm].lat } if (jh[jm].lat > i3) { i3 = jh[jm].lat } } this._bounds.setSouthWest(new b8(jn, jt)); this._bounds.setNorthEast(new b8(iY, i3)); this._bounds.pointTopLeft = jb; this._bounds.pointTopRight = jo; this._bounds.pointBottomRight = i9; this._bounds.pointBottomLeft = jk; this._bounds.makeNormalizedPoint(jc); this._bounds.setMinMax(); return this._bounds }, isLoaded: function () { return !!this.loaded }, _getBestLevel: function (i, i4) { var iX = 0; if (this._renderType === "webgl" && !bF()) { iX = 100 } var iY = i4.margins || [10, 10, 10, 10]; var iV = i4.zoomFactor || 0; var iZ = iY[1] + iY[3]; var iW = iY[0] + iY[2]; var e = this.getMinZoom(); var i3 = this.getMaxZoom(); var i2 = i.toSpan(); var i1 = i2.width / (this.width - iZ - iX); var i0 = i2.height / (this.height - iW - iX); var T = 18 - k(Math.max(i1, i0)); if (T < e) { T = e } if (T > i3) { T = i3 } T += iV; if (this._renderType !== "webgl") { T = Math.floor(T) } return T }, getViewportIn: function (i4, iW) { if (this.mapType === BMAP_EARTH_MAP) { i4 = i4 || []; var iY = []; for (var i5 = 0; i5 < i4.length; i5++) { if (!i4[i5]) { continue } iY.push(hZ.convertMC2LL(i4[i5])) } var i6 = this._earth.getViewportIn(iY, iW); var iV = i6.center; var i2 = i6.zoom; var ja = hZ.convertLL2MC(iV); return { center: ja, zoom: i2 } } var i0 = { center: this.getCenterIn(), zoom: this.getZoom() }; if (!i4 || i4.length === 0) { return i0 } iW = iW || {}; var iZ; if (i4 instanceof g0) { iZ = i4 } else { var iX = i4; iZ = new g0(); for (var i3 = iX.length - 1; i3 >= 0; i3--) { iZ.extend(iX[i3]) } if (iZ.isEmpty()) { return i0 } } var i9 = iZ.getCenter(); var e = this._getBestLevel(iZ, iW); if (iW.margins) { var T = iW.margins; var i8 = (T[1] - T[3]) / 2; var i1 = (T[0] - T[2]) / 2; var i7 = this.getZoomUnits(e); i9.lng = i9.lng + i7 * i8; i9.lat = i9.lat + i7 * i1 } return { center: i9, zoom: e } }, setViewportIn: function (iV, iW) { if (this.mapType === BMAP_EARTH_MAP) { var i0; if (iV && iV.center) { var T = hZ.convertMC2LL(iV.center); var iY = this._earth._getEarthZoomByImgZoom(iV.zoom, T); i0 = { center: T, zoom: iY } } else { i0 = []; for (var iX = 0; iX < iV.length; iX++) { var iZ = hZ.convertMC2LL(iV[iX]); i0[iX] = new b3(iZ.lat, iZ.lng) } } this._earth.setViewportIn(i0, iW); return } var e; if (iV && iV.center) { e = iV } else { e = this.getViewportIn(iV, iW) } iW = iW || {}; if (this._renderType === "webgl") { this.centerAndZoomIn(e.center, e.zoom, iW); return } if (e.zoom === this.zoomLevel && iW.enableAnimation !== false) { this.panToIn(e.center, { duration: 200, callback: iW.callback }) } else { this.centerAndZoomIn(e.center, e.zoom, iW) } }, addSpots: function (T, i) { if (!T || T.length === 0) { return } i = i || {}; var iX = i.zIndex || 0; var iW = typeof i.enableMultiResponse === "undefined" ? true : !!i.enableMultiResponse; this.spotsPool = this.spotsPool || {}; var e = "sp" + (this.temp.spotsGuid++); this.spotsPool[e] = { spots: T.slice(0), zIndex: iX, enableMultiResponse: iW }; var iV = this; f8.load("hotspot", function () { iV._asyncRegister() }); return e }, getSpots: function (e) { return this.spotsPool[e] && this.spotsPool[e].spots || [] }, removeSpots: function (e) { if (!e || !this.spotsPool[e]) { return } delete this.spotsPool[e] }, clearSpots: function () { delete this.spotsPool }, getIconByClickPosition: function (i) { if (!this.config.enableIconClick || !this._spotsMgr) { return null } var e = this._spotsMgr.getSpotsByScreenPosition(i); if (e[0] && e[0].userdata) { var T = e[0].userdata; return { name: T.name, uid: T.uid, position: T.iconPoint || e[0].pt } } return null }, setBounds: function (e) { dG[this.mapType].bounds = e.clone() }, getCoordType: function () { return this.config.coordType }, getPanes: function () { return this._panes }, getInfoWindow: function () { if (this.temp.infoWin && this.temp.infoWin.isOpen()) { return this.temp.infoWin } return null }, getDistanceIn: function (iW, e) { if (!iW || !e) { return } if (iW.equals(e)) { return 0 } if (this.mapType === BMAP_EARTH_MAP) { var iV = hZ.convertMC2LL(iW); var T = hZ.convertMC2LL(e); return this._earth.getDistance(iV, T) } var i = hZ.getDistanceByMC(iW, e); return i }, getOverlays: function () { var iX = []; var iY = this._overlays; var iW = this._customOverlays; if (iY) { for (var iV in iY) { if (iY[iV] instanceof dX) { iX.push(iY[iV]) } } } if (iW) { for (var T = 0, e = iW.length; T < e; T++) { iX.push(iW[T]) } } return iX }, getMapType: function () { return this.mapType }, getMapCoordType: function () { return this.coordType }, _asyncRegister: function () { for (var e = this.temp.registerIndex; e < bk._register.length; e++) { bk._register[e](this) } this.temp.registerIndex = e }, setDefaultCursor: function (e) { this.config.defaultCursor = e; if (this.platform) { this.platform.style.cursor = this.config.defaultCursor } }, getDefaultCursor: function () { return this.config.defaultCursor }, setOverlayMoveCursor: function (e) { this.config.overlayMoveCursor = e }, getOverlayMoveCursor: function () { return this.config.overlayMoveCursor }, setDraggingCursor: function (e) { this.config.draggingCursor = e }, getDraggingCursor: function () { return this.config.draggingCursor }, _syncAndChangeMapType: function (e) { var i = this; if (i._renderType === "webgl" && i.getTilt() > gL.MAX_DRAG_TILT_L2) { i.setTilt(gL.MAX_DRAG_TILT_L2, { callback: function () { i._changeEarthMapType(e) } }) } else { i._changeEarthMapType(e) } }, _changeEarthMapType: function (T) { var iV = this; var iY = iV.tileMgr.tileLayers; if (this._mapTypeChangAni) { this._mapTypeChangAni.stop() } var iX; if (this._earth) { iX = this._earth.getEarthCanvas() } if (!this._earth) { this.maskLayer.style.opacity = 1; this.maskLayer.style.zIndex = 999; this.maskLayer.style.background = "#000" } this._mapTypeChangAni = new eQ({ duration: 400, render: function (e) { if (!iV._earth) { return } iX.style.opacity = e }, finish: function () { for (var e = iY.length - 1, iZ = e; iZ >= 0; iZ--) { var i1 = iY[iZ].tilesDiv; if (i1) { i1.style.visibility = "hidden" } if (iY[iZ]._isInnerLayer && iV._renderType !== "webgl") { iV.removeTileLayer(iY[iZ]) } } iV._mapTypeChangAni = null; iV._mapTypeChanging = false; function i0() { var i5 = iV.getZoom() - 2; var i6 = iV.getCenterIn(); var i3 = hZ.convertMC2LL(i6); iV._earth = new bk.Earth(iV, { center: i3, zoom: i5, showRealSunlight: iV.config.showRealSunlight, showMilkyway: iV.config.showMilkyway, earthBackground: iV.config.earthBackground }); iV._proxyEarthEvents(); var i2 = iV.mapType; iV.mapType = T; var i4 = new eX("onmaptypechange"); i4.zoomLevel = this.zoomLevel; i4.mapType = T; i4.exMapType = i2; iV.dispatchEvent(i4); iV._setMapTypeStatus(T); ej.extend(iV, bk.EarthView.prototype); if (!iV._navigationCtrl && iV.config.showControls) { iV._navigationCtrl = new el(iV) } } if (!iV._earth) { if (bk["FeatureStyle" + iV.config.style]) { i0() } else { iV.loadMapStyleFiles(function () { i0() }) } } if (parseInt(iV.maskLayer.style.opacity, 10) === 1) { setTimeout(function () { iV.maskLayer.style.zIndex = 9; iV.maskLayer.style.opacity = 0 }, 1000) } } }); if (!this._earth) { return } var i = this.mapType; this.mapType = T; var iW = new eX("onmaptypechange"); iW.zoomLevel = this.zoomLevel; iW.mapType = T; iW.exMapType = i; this.dispatchEvent(iW); iV._setMapTypeStatus(T); ej.extend(iV, bk.EarthView.prototype) }, getMapStyleId: function () { if (typeof this.config.style === "string") { return this.config.style } return this.config.mapStyleId || "custom" }, _setMapTypeStatus: function (T) { var iZ = arguments[1]; if (T === BMAP_EARTH_MAP) { var iX = this._earth.getEarthCanvas(); if (iX) { iX.style.display = "" } var i0 = { noAnimation: true }; this._earth.setCenter(hZ.convertMC2LL(this.centerPoint), i0); this._earth.setImageZoom(this.zoomLevel, i0); this._earth.setTilt(this.getTilt(), i0); this._earth.setHeading(this.getHeading(), i0) } else { if (this.preMapType === BMAP_EARTH_MAP && this._earth) { var iY = this._earth; var iV = iY.getMapZoom(); var iW = iY._imageRawZoom || iV; var i = iW - iV; var e = iY.getCenter(); if (this._renderType === "webgl") { this._tilt = iY.getTilt(); if (this.zoomLevel > 7) { this._heading = iY.getHeading(); iZ && iZ(e, iV); return } if (iY.getHeading() !== 0) { iY.setTilt(this.getTilt()); iY.setHeading(this.getHeading(), { callback: function () { iZ && iZ(e, iV) } }) } else { iZ && iZ(e, iV) } return } if (i < 0.1 && iY.getTilt() === 0 && iY.getHeading() === 0) { iZ && iZ(e, iV); return } iY.setTilt(0); iY.setHeading(0); iY.setZoom(iY.getZoom() - i, { callback: function () { iZ && iZ(e, iV) } }) } } }, _proxyEarthEvents: function () { var iW = this; var iX = this._earth; iX.on("tilesload", function (i) { iW.fire(i) }); iX.on("centerandzoom", function (i) { iW.dispatchEvent(new eX("onmoveend")); iW.dispatchEvent(new eX("onzoomend")) }); function iV(i) { iW.fire(i) } var e = ["zoomstart", "zoomend", "tilesload", "sunlighttime_change", "sunlighttime_clear", "centerandzoom", "animation_start", "animation_stop", "movestart", "moveend", "moving", "dragstart", "dragend", "dragging"]; for (var T = 0; T < e.length; T++) { iX.on(e[T], iV) } }, forceEnableEarth: function () { this.config.forceEnableEarth = true; this.config.enableEarth = cB.ifEnableEarth(true); this.dispatchEvent(new eX("forceenableearth")); return this.config.enableEarth }, setLock: function (e) { if (this.mapType === BMAP_EARTH_MAP) { this._earth.setLock(e) } this._lock = e }, getLock: function () { if (this.mapType === BMAP_EARTH_MAP) { return this._earth.getLock() } return this._lock }, getEarth: function () { return this._earth }, isSupportEarth: function () { return this.config.enableEarth }, isCanvasMap: function () { return !!(this._renderType === "canvas" && this.getMapType() !== "B_EARTH_MAP") }, getCanvasMapCoordByUid: function (iW) { if (this._renderType === "webgl") { var iX = this.tileMgr.tileLayers; for (var iV = 0; iV < iX.length; iV++) { if (iX[iV].labelProcessor) { return iX[iV].labelProcessor.getLabelByUid(iW, "") } } return null } var e = this.canvas2dMapMgr._labelClick; var T = e.findLabelByUid(iW); return T ? new b8(T.iconPos.geoX, T.iconPos.geoY) : null }, loadBizData: function (i) { var e = new eX("onloadbizdata"); e.data = i; this.dispatchEvent(e) }, unloadBizData: function () { var e = new eX("onunloadbizdata"); this.dispatchEvent(e) }, zoomIn: function (e) { this.setZoomIn(this.zoomLevel + 1, { zoomCenter: e }) }, zoomOut: function (e) { this.setZoomIn(this.zoomLevel - 1, { zoomCenter: e }) }, setMaxZoom: function (e) { if (this._renderType === "webgl") { this.config.maxZoom = e <= 21 ? e : 21 } else { this.config.maxZoom = e <= 19 ? e : 19 } }, setMinZoom: function (e) { this.config.minZoom = e >= 3 ? e : 3 }, setCenterIn: function (e, i) { this.panToIn(e, i) }, getRenderType: function () { return this._renderType }, getSolarInfo: function (iV) { iV = iV || this._initDate; var T = eP(iV); var e = hZ.convertLL2MC(new b8(T[0], T[1])); var i3 = e.latLng; var iY = bk.Projection.convertMC2LL(this.centerPoint); var i0 = iV.getUTCHours(); var i2 = i0 + 24 * iY.lng / 360; var i1 = i2 - 12; var iZ = i1 * 60 * 0.25; var iX = Math.asin(Math.sin(hw(iY.lat)) * Math.sin(hw(i3.lat)) + Math.cos(hw(iY.lat)) * Math.cos(hw(i3.lat)) * Math.cos(hw(iZ))); var iW = Math.asin(Math.sin(hw(iZ)) * Math.cos(hw(i3.lat)) / Math.cos(iX)); var i = "north"; if (iY.lat < i3.lat) { i = "south" } return { zenith: e, solarAltitude: iX, solarAzimuth: iW, centerPosition: i, position: e } }, setDisplayOptions: function (T) { if (!T) { return } for (var e in this._displayOptions) { if (this._displayOptions.hasOwnProperty(e)) { if (typeof T[e] === "boolean" || (e === "skyColors" && typeof T.skyColors === "object") || (e === "labelMargin" && typeof T.labelMargin === "number")) { this._displayOptions[e] = T[e] } } } var i = this.getMapType(); if (i === eJ.NORMAL) { this.fire(new eX("ondisplayoptions_changed")) } else { if (i === eJ.EARTH && this._earth) { this._earth.fire(new eX("ondisplayoptions_changed")) } } }, getHorizonPosY: function (e) { if (!e || !this._webglMapCamera) { return null } var i = this._webglMapCamera.fromMCToScreenPixel(e.lng, e.lat, { heading: 0 }); return i.y }, getIndoorInfo: function () { if (!this._indoorMgr) { return } return this._indoorMgr.getData() }, showIndoor: function (e, T) { var i = new eX("onindoor_status_changed"); i.uid = e; i.floor = T; this.fire(i) }, addAreaSpot: function (e, T) { if (!e || e.length === 0) { return } T = T || {}; this.areaSpots = this.areaSpots || {}; var i = T.id || ("sp" + (this.temp.spotsGuid++)); this.areaSpots[i] = { spot: e, userData: T.userData }; var iV = this; f8.load("hotspot", function () { iV._asyncRegister() }); return i }, getAreaSpot: function (e) { if (this.areaSpots && this.areaSpots[e]) { return this.areaSpots[e] } return null }, removeAreaSpot: function (e) { if (!e || !this.areaSpots[e]) { return } delete this.areaSpots[e] }, clearAreaSpots: function () { this.areaSpots = {} }, resetSpotStatus: function () { this.fire(new eX("onspot_status_reset")) }, hightlightSpotByUid: function (e, T) { var i = new eX("onspot_highlight"); i.uid = e; i.tilePosStr = T; this.fire(i) }, setZoomIn: function (i, e) { e = e || {}; this.zoomTo(i, e.zoomCenter || null, e) }, restrictBounds: function (e) { if (e instanceof g0) { this.config.restrictBounds = e; this.restrictCenter(this.getCenterIn()); this.fire(new eX("oncenter_changed")) } }, getCurrentMaxTilt: function () { var e = this.zoomLevel; if (this.mapType === "B_EARTH_MAP") { return gL.MAX_DRAG_TILT_L2 } if (this.config.restrictCenter === false) { return gL.MAX_DRAG_TILT } if (e >= 19) { return gL.MAX_DRAG_TILT } else { if (e <= 18) { if (e < this._enableTiltZoom) { if (e >= this._enableTiltZoom - 2) { return (1 - (this._enableTiltZoom - e) / 2) * gL.MAX_DRAG_TILT_L2 } return 0 } return gL.MAX_DRAG_TILT_L2 } else { return (gL.MAX_DRAG_TILT - gL.MAX_DRAG_TILT_L2) * (e - 18) + gL.MAX_DRAG_TILT_L2 } } }, worldSize: function (i) { var e = i || this.zoomLevel; return gL.WORLD_SIZE_MC / this.getZoomUnits(e) }, setTrafficOn: function (e) { if (e && Number(e) > 1) { io.setZIndex(Number(e)) } this.addTileLayer(io) }, setTrafficOff: function () { this.removeTileLayer(io) }, showOverlayContainer: function () { this.setDisplayOptions({ overlay: true }) }, hideOverlayContainer: function () { this.setDisplayOptions({ overlay: false }) }, addLabelsToMapTile: function (T) { for (var e = 0; e < T.length; e++) { if (typeof T[e].type === "undefined") { T[e].type = "fixed" } if (typeof T[e].rank !== "number") { T[e].rank = 50000 } T[e].pt = T[e].position; T[e].custom = true; T[e].processedInZoom = 0; this._customTileLabels.push(T[e]) } this.dispatchEvent(new eX("onadd_tile_labels")) }, removeLabelsFromMapTile: function (T) { for (var iV = 0; iV < T.length; iV++) { for (var e = 0; e < this._customTileLabels.length; e++) { if (this._customTileLabels[e].uid === T[iV]) { this._customTileLabels.splice(e, 1) } } } this.dispatchEvent(new eX("onremove_tile_labels")) }, clearLabels: function () { this._customTileLabels.length = 0; this.dispatchEvent(new eX("onclear_labels")) }, loadMapStyleFiles: function (iX, e) { this.customLoaded = false; var T = this.config.style; var iW = this.config.styleUrl; var iV = this; this._setTextRenderType(); if (typeof T === "string" && !iW) { if (bk["FeatureStyle" + T]) { this.customLoaded = true; iV.fire(new eX("onstyle_loaded")); iX(); return } bk["FeatureStyle" + T] = window.FeatureStyle; bk["iconSetInfo" + T] = window.iconSetInfo_high; bk.indoorStyle = window.indoorStyle; fV.load(u.getMapStyleFiles(T), function () { if (iV.config.style === T) { bk["FeatureStyle" + T] = window.FeatureStyle; bk["iconSetInfo" + T] = window.iconSetInfo_high; bk.indoorStyle = window.indoorStyle; iV.customLoaded = true; iV.fire(new eX("onstyle_loaded")); iX() } }) } else { var i = T; r.init(iV); r.getStyleJson(i, function (iZ) { var i4 = ea; var i6 = bk.getGUID("custom"); iV.config.mapStyleId = i6; var i2 = {}; ej.extend(i2, iZ); var i0 = Math.floor(iV.getZoom()); var i3; window["styleCbk_" + i6] = function (i7, i8) { if (i8 !== i3) { return } if (typeof i7 === "string") { i7 = JSON.parse(i7) } r.onStyleDataBack(i7, i0, i6, i2, i4, bk["customStyleInfo_" + i6]); iV.customLoaded = true; iV.fire(new eX("onstyle_loaded")); iX() }; bk["customStyleInfo_" + i6] = { zoomRegion: {}, zoomStyleBody: [], zoomFrontStyle: {} }; var i5 = r.getStyleUrl(iZ, i4, "styleCbk_" + i6, i0, e, bk["customStyleInfo_" + i6]); var iY = i5.split("?")[0]; i3 = i5.split("?")[1]; if (iW) { iY = iW; i3 = iY.split("?")[1] } if (!bk.iconSetInfoCustom) { var i1 = u.getMapStyleFiles("default"); i1.splice(1, 1); fV.load(i1, function () { bk.iconSetInfoCustom = window.iconSetInfo_high; bk.indoorStyle = window.indoorStyle; if (iY.indexOf("jsonp") > "-1") { fV.load(iY) } else { bk["customStyleInfo_" + i6].xhr = g7.post(iY, i3, window["styleCbk_" + i6]) } }) } else { if (iY.indexOf("jsonp") > "-1") { fV.load(iY) } else { bk["customStyleInfo_" + i6].xhr = g7.post(iY, i3, window["styleCbk_" + i6]) } } }) } }, getFeatureStyleTags: function () { var e = []; var iW = Object.keys(bk); for (var iV = 0; iV < iW.length; iV++) { var T = iW[iV]; if (T.indexOf("FeatureStyle") > -1 && bk[T]) { e.push(T) } } return e }, setCopyrightOffset: function (iV, i) { var T = new eX("oncopyrightoffsetchange", { logo: iV, cpy: i }); this.dispatchEvent(T) }, _setTextRenderType: function (e) { if (e) { this.config.textRenderType = e; return } if (this.config.textRenderType !== null) { return } if (bF()) { this.config.textRenderType = "canvas" } else { if (typeof this.config.style === "string") { this.config.textRenderType = "image" } else { this.config.textRenderType = "canvas" } } }, destroy: function () { this._destroyed = true; this.fire(new eX("ondestroy")) }, centerAndZoom: function (e, iY, T) { if (Object.prototype.toString.call(iY) !== "[object Undefined]") { iY = parseInt(iY, 10) } if (typeof e === "string") { var iV = this; var iX = new a2(); iX.getPoint(e, function (iZ) { e = iZ; var i0 = hZ.convertLL2MC(e); iV.centerAndZoomIn(i0, iY, T) }) } else { if (this.config.coordType === BMAP_COORD_GCJ02) { var iW = hp(e, 3); var i = hZ.convertLL2MC(iW) } else { var i = hZ.convertLL2MC(e) } this.centerAndZoomIn(i, iY, T) } }, pointToPixel: function (e, T) { var i = hZ.convertLL2MC(e); var iV = {}; ej.extend(iV, T); if (iV && iV.center) { iV.center = hZ.convertLL2MC(iV.center) } return this.pointToPixelIn(i, iV) }, pixelToPoint: function (T, i) { var iV = {}; ej.extend(iV, i); if (iV && iV.center) { iV.center = hZ.convertLL2MC(iV.center) } var e = this.pixelToPointIn(T, iV); return hZ.convertMC2LL(e) }, pointToOverlayPixel: function (e, T) { var i = hZ.convertLL2MC(e); var iV = {}; ej.extend(iV, T); if (iV && iV.center) { iV.center = hZ.convertLL2MC(iV.center) } return this.pointToOverlayPixelIn(i, iV) }, overlayPixelToPoint: function (T, i) { var iV = {}; ej.extend(iV, i); if (iV && iV.center) { iV.center = hZ.convertLL2MC(iV.center) } var e = this.overlayPixelToPointIn(T, iV); return hZ.convertMC2LL(e) }, setViewport: function (T, iV) { var e; if (T && T.center) { e = {}; ej.extend(e, T); e.center = hZ.convertLL2MC(e.center) } else { e = []; for (var iW = 0; iW < T.length; iW++) { e[iW] = hZ.convertLL2MC(T[iW]) } } this.setViewportIn(e, iV) }, getViewport: function (iX, iV) { var T; if (iX && iX.length) { T = []; for (var iW = 0; iW < iX.length; iW++) { T[iW] = hZ.convertLL2MC(iX[iW]) } } else { if (iX instanceof g0) { T = new g0(hZ.convertLL2MC(iX.getSouthWest()), hZ.convertLL2MC(iX.getNorthEast())); T.setMinMax() } } var e = this.getViewportIn(T, iV); e.center = hZ.convertMC2LL(e.center); return e }, getDistance: function (iW, T) { var i = hZ.convertLL2MC(iW); var iV = hZ.convertLL2MC(T); var e = this.getDistanceIn(i, iV); return e }, setCenter: function (e, T) { if (typeof e === "string") { var iV = this; var iX = new a2(); iX.getPoint(e, function (iY) { e = iY; var iZ = hZ.convertLL2MC(e); iV.setCenterIn(iZ, T) }) } else { if (this.config.coordType === BMAP_COORD_GCJ02) { var iW = hp(e, 3); var i = hZ.convertLL2MC(iW) } else { var i = hZ.convertLL2MC(e) } this.setCenterIn(i, T) } }, setZoom: function (T, e) { var i = {}; ej.extend(i, e); if (i && i.zoomCenter) { i.zoomCenter = hZ.convertLL2MC(i.zoomCenter) } this.setZoomIn(T, i) }, flyTo: function (e, iW, T) { if (this.config.coordType === BMAP_COORD_GCJ02) { var iV = hp(e, 3); var i = hZ.convertLL2MC(iV) } else { var i = hZ.convertLL2MC(e) } this.flyToIn(i, iW, T) }, panTo: function (e, T) { var i = hZ.convertLL2MC(e); this.panToIn(i, T) }, getCenter: function () { var e = this.getCenterIn(); if (this.config.coordType === BMAP_COORD_GCJ02) { var i = hZ.convertMC2LL(e); return d4(i) } return hZ.convertMC2LL(e) }, getBounds: function () { var e = this.getBoundsIn(); var i = new g0(hZ.convertMC2LL(e.getSouthWest()), hZ.convertMC2LL(e.getNorthEast())); return i }, setMapStyleV2: function (e) { if (typeof e === "string") { this._setTextRenderType("image") } else { this._setTextRenderType("canvas") } this.setOptions({ style: e }) }, startViewAnimation: function (T) { var e = T._options.delay; var i = this; setTimeout(function () { T._start(i) }, e) }, pauseViewAnimation: function (e) { e._pause(this) }, continueViewAnimation: function (e) { e._continue(this) }, cancelViewAnimation: function (e) { e._cancel(this) }, getMapScreenshot: function () { return this._webglMapScene._painter._canvas.toDataURL() } }); window.BMAP_NORMAL_MAP = "B_NORMAL_MAP"; window.BMAPGL_NORMAL_MAP = "B_NORMAL_MAP"; window.BMAP_SATELLITE_MAP = "B_SATELLITE_MAP"; window.BMAP_HYBRID_MAP = "B_STREET_MAP"; window.BMAP_EARTH_MAP = "B_EARTH_MAP"; window.BMAP_NONE_MAP = "B_NONE_MAP"; window.BMAP_COORD_MERCATOR = 1; window.BMAP_COORD_GCJ02 = 2; window.BMAP_SYS_DRAWER = 0; window.BMAP_SVG_DRAWER = 1; window.BMAP_VML_DRAWER = 2; window.BMAP_CANVAS_DRAWER = 3; var r = { environment: "jsapi", map: null, ontilesloaded: false, onstyle_loaded: false, init: function (i) { var e = this; e.map = i; this.changeCopyright(); this.setEnvironment(e.map.config.style); this.resetEventListener() }, resetEventListener: function () { var e = this; this.ontilesloaded = false; this.onstyle_loaded = false; e.map.addEventListener("ontilesloaded", e.checkLoadedStatus); e.map.addEventListener("onstyle_loaded", e.checkLoadedStatus) }, checkLoadedStatus: function (i) { r[i.type] = true; if (r.ontilesloaded && r.onstyle_loaded) { this.dispatchEvent(new eX("onstylechangetilesloaded")); this.removeEventListener("ontilesloaded", r.checkLoadedStatus); this.removeEventListener("onstyle_loaded", r.checkLoadedStatus) } }, changeCopyright: function () { var e = this; if (e.map.cpyCtrl) { e.map.cpyCtrl.hide(); if (e.environment !== "customEditor") { e.map.setCopyrightOffset(new hS(1, 1)) } } else { e.map.addEventListener("oncopyrightaddend", function () { e.map.cpyCtrl.hide(); if (e.environment !== "customEditor") { e.map.setCopyrightOffset(new hS(1, 1)) } }) } }, setEnvironment: function (e) { if (e.customEditor) { this.environment = "customEditor"; aJ.map = this.map } else { if (e.sharing) { this.environment = "sharing" } else { if (e.preview) { this.environment = "preview" } else { this.environment = "jsapi" } } } }, getStyleJson: function (iV, iX) { var iW = this; if (iV.styleJson) { iX && iX(iV.styleJson) } else { if (iV.styleId) { var i = iV.styleId; var e = (Math.random() * 100000).toFixed(0); bk["_cbk_si_phpui" + e] = function (iZ) { var iY = []; if (iZ.result && iZ.result["error"] === 0 && iZ.content && iZ.content["status"] === 0) { iY = iW.parseJson(iZ.content["data"]["json"]); iX && iX(iY) } else { iX && iX("default") } }; bk["_cbk_si_api" + e] = function (iZ) { var iY = []; if (iZ.status === 0) { if (iZ.info) { iY = iW.parseJson(iZ.info["json"]) } else { iY = iW.parseJson(iZ.data["json"]) } iX && iX(iY) } else { iX && iX("default") } }; var T = ""; switch (this.environment) { case "jsapi": T = dR.apiHost + "/?qt=custom_map&v=3.0&style_id=" + i + "&type=publish&ak=" + ea; T += "&callback=" + eL + "._cbk_si_phpui" + e; break; case "sharing": T += "/apiconsole/custommap/getSharingJson"; T += "?styleid=" + i + "&type=edit"; T += "&ck=" + eL + "._cbk_si_api" + e; break; case "preview": T += "/apiconsole/custommap/getJson"; T += "?styleid=" + i + "&type=edit"; T += "&ck=" + eL + "._cbk_si_api" + e; break }fV.load(T) } else { iX && iX("default") } } }, parseJson: function (T) { if (T === null || T === "") { return [] } var i = { t: "featureType", e: "elementType", v: "visibility", c: "color", l: "lightness", s: "saturation", w: "weight", z: "level", h: "hue", f: "fontsize", zri: "curZoomRegionId", zr: "curZoomRegion" }; var iW = { all: "all", g: "geometry", "g.f": "geometry.fill", "g.s": "geometry.stroke", l: "labels", "l.t.f": "labels.text.fill", "l.t.s": "labels.text.stroke", "l.t": "labels.text", "l.i": "labels.icon", "g.tf": "geometry.topfill", "g.sf": "geometry.sidefill" }; var iV = T.split(","); var e = iV.map(function (i0) { var iZ = i0.split("|").map(function (i6) { var i4 = i[i6.split(":")[0]]; var i3 = (iW[i6.split(":")[1]] ? iW[i6.split(":")[1]] : i6.split(":")[1]); switch (i3) { case "poi": i3 = "poilabel"; break; case "districtlabel": i3 = "districtlabel"; break }var i5 = {}; i5[i4] = i3; return i5 }); var iX = iZ[0]; var i2 = 1; if (iZ[1]["elementType"]) { i2 = 2; ej.extend(iX, iZ[1]) } var i1 = {}; for (var iY = i2; iY < iZ.length; iY++) { ej.extend(i1, iZ[iY]) } return ej.extend(iX, { stylers: i1 }) }); return e }, getStyleUrl: function (iW, iZ, iX, i, e, iV) { this.styleJson = iW; var T = u.apiHost + "/custom/v2/mapstyle?version=" + 4 + "&ak=" + iZ + "&is_all=true&is_new=1&"; var iY = this.styleJson2styleStringV2(iW, i, iV); T += "styles=" + encodeURIComponent(iY); if (e && e.os && e.sv) { T += "&os=" + e.os + "&sv=" + e.sv } return T }, styleJson2styleStringV2: function (e, i3, iZ) { var i4 = { featureType: "t", elementType: "e", visibility: "v", color: "c", lightness: "l", saturation: "s", weight: "w", level: "z", hue: "h", fontsize: "f" }; var i5 = { all: "all", geometry: "g", "geometry.fill": "g.f", "geometry.stroke": "g.s", labels: "l", "labels.text.fill": "l.t.f", "labels.text.stroke": "l.t.s", "labels.text": "l.t", "labels.icon": "l.i", "geometry.topfill": "g.tf", "geometry.sidefill": "g.sf" }; var i6 = []; for (var iV = this.map.getMinZoom(); iV <= this.map.getMaxZoom(); iV++) { iZ.zoomFrontStyle[iV] = {} } iZ.zoomFrontStyle.main = {}; var T = false; for (var iV = 0; !!e[iV]; iV++) { var i2 = e[iV]; if (this.isOnlyZoomStyler(i2)) { continue } i3 = this.getFrontZoom(i2, i3); if ((i2.featureType === "land" || i2.featureType === "all" || i2.featureType === "background") && typeof i2.elementType === "string" && (i2.elementType === "geometry" || i2.elementType === "geometry.fill" || i2.elementType === "all") && i2.stylers && !T) { if (i2.stylers["color"]) { iZ.bmapLandColor = i2.stylers["color"] } if (i2.stylers["visibility"] && i2.stylers["visibility"] === "off") { iZ.bmapLandColor = "#00000000" } if (i2.featureType === "land") { T = true } } if (i2.featureType === "building" && typeof i2.elementType === "string" && i2.elementType === "geometry.fill") { iZ.buildingFill = true } if (i2.featureType === "roadarrow" && i2.elementType === "labels.icon" && i2.stylers) { var i0 = i2.stylers["visibility"]; iZ.zoomFrontStyle[i3]["bmapRoadarrowVisibility"] = i0 } var iW = {}; ej.extend(iW, i2); var iY = iW.stylers; delete iW.stylers; ej.extend(iW, iY); var iX = []; for (var i1 in i4) { if (iW[i1]) { if (this.isEditorZoomKeys(i1)) { continue } if (i1 === "elementType") { iX.push(i4[i1] + ":" + i5[iW[i1]]) } else { switch (iW[i1]) { case "poilabel": iW[i1] = "poi"; break; case "districtlabel": iW[i1] = "label"; break }iX.push(i4[i1] + ":" + iW[i1]) } } } if (iX.length > 2) { i6.push(iX.join("|")) } } return i6.join(",") }, getFrontZoom: function (i, e) { var T = i.stylers["level"]; if (T === undefined) { return "main" } else { return parseInt(T, 10) } }, isZoomConfig: function (e) { var i = e.stylers["level"]; if (i === undefined) { return false } else { return true } }, isOnlyZoomStyler: function (e) { var i = {}; ej.extend(i, e.stylers); delete i.curZoomRegionId; delete i.curZoomRegion; delete i.level; if (ej.isEmptyObject(i)) { return true } else { return false } }, isSelectZoom: function (i, e) { var T = i.stylers["level"]; if (T === undefined) { return true } else { if (T === e + "") { return true } else { return false } } }, isEditorZoomKeys: function (e) { var i = { curZoomRegionId: true, curZoomRegion: true }; if (i[e]) { return true } else { return false } }, getZoomRegion: function (e, i) { var iV = e.stylers["level"]; var T = {}; ej.extend(T, i); if (iV === undefined) { return T } else { T[parseInt(iV, 10)] = true; return T } }, onStyleDataBack: function (iW, e, i, iV, iY, T) { if (iW.status !== 0) { return } if (iW.data.style.length === 3) { if (!T.baseFs) { T.baseFs = iW.data.style } bk.StyleBody = iW.data.style[2] } else { bk.StyleBody = iW.data.style } var iX = T.baseFs; bk["FeatureStyle" + i] = iX; this.updateFrontFeatureStyle(T) }, updateFrontFeatureStyle: function (T) { if (T.zoomFrontStyle.main["bmapRoadarrowVisibility"]) { for (var e = this.map.getMinZoom(); e <= this.map.getMaxZoom(); e++) { if (!T.zoomFrontStyle[e]["bmapRoadarrowVisibility"]) { T.zoomFrontStyle[e]["bmapRoadarrowVisibility"] = T.zoomFrontStyle.main["bmapRoadarrowVisibility"] } } } } }; var aJ = { map: null, labelCache: {}, calcDrawMc: function (T, i, e) { var iV = []; switch (i) { case "fill": iV = this.calcFill(T, e); break; case "line": break; case "building3d": iV = this.calcBuilding3d(T, e); break }return iV }, calcFill: function (iW, T) { var iX = []; for (var iV = 0; iV < iW.length; iV = iV + 5) { var e = this.coordToMc({ x: iW[iV], y: iW[iV + 1] }, T.row, T.col, T.mercatorSize, T.baseTileSize); iX.push(e[0], e[1]) } return iX }, calcLine: function (iW, T) { var iX = []; var iY = new Int16Array(iW.buffer); for (var iV = 0; iV < iY.length; iV = iV + 10) { var e = this.coordToMc({ x: iY[iV] / 10, y: iY[iV + 1] / 10 }, T.row, T.col, T.mercatorSize, T.baseTileSize); iX.push(e[0], e[1]) } return iX }, calcBuilding3d: function (iX, T) { var iY = []; var iV = {}; for (var iW = 0; iW < iX.length / 2; iW = iW + 7) { if (iX[iW] === iX[iW - 7] && iX[iW + 1] === iX[iW - 6]) { continue } if (iV[iX[iW].toString() + iX[iW + 1].toString()]) { continue } iV[iX[iW].toString() + iX[iW + 1].toString()] = true; var e = this.coordToMc({ x: iX[iW], y: iX[iW + 1] }, T.row, T.col, T.mercatorSize, T.baseTileSize); iY.push(e[0], e[1]) } return iY }, coordToMc: function (iW, iV, e, i, T) { return [iW.x * (i / T) + e * i, iW.y * (i / T) + iV * i] }, addDrawIntoAreaSpots: function (e, iW) { if (r.environment !== "customEditor") { return } if (!iW.styleIds) { return } for (var T = 0; T < iW.styleIds.length; T++) { var iZ = 0; if (T > 0) { iZ = iW.verticesLength[T - 1] } end = iW.verticesLength[T]; var iX = []; var iV = ""; if (iW.vertex) { iX = iW.vertex; iV = "building3d" } else { if (iW.data[0]) { iX = iW.data[0]; iV = iW.type } else { continue } } var iY = this.calcDrawMc(iX.slice(iZ, end), iV, e); this.map.addAreaSpot(iY, { userData: { styleId: iW.styleIds[T], type: "mapstyle" } }) } }, addLabelIntoAreaSpots: function (e) { if (r.environment !== "customEditor") { return } for (var iW = 0; iW < e.length; iW++) { var iX = e[iW]; for (var iV = 0; iV < iX.fixedLabel.length; iV++) { var T = iX.fixedLabel[iV]; if (!T._mcBds) { continue } var iY = [T._mcBds[0].lng, T._mcBds[0].lat, T._mcBds[0].lng, T._mcBds[1].lat, T._mcBds[1].lng, T._mcBds[1].lat, T._mcBds[1].lng, T._mcBds[0].lat]; if (!this.labelCache[iY.join()]) { this.labelCache[iY.join()] = true; this.map.addAreaSpot(iY, { userData: { styleId: T.styleId, type: "mapstyle", name: T.name } }) } } } } }; function bZ(i, e, iV, T) { this.cx = 3 * i; this.bx = 3 * (iV - i) - this.cx; this.ax = 1 - this.cx - this.bx; this.cy = 3 * e; this.by = 3 * (T - e) - this.cy; this.ay = 1 - this.cy - this.by; this.p1x = i; this.p1y = T; this.p2x = iV; this.p2y = T } bZ.prototype.sampleCurveX = function (e) { return ((this.ax * e + this.bx) * e + this.cx) * e }; bZ.prototype.sampleCurveY = function (e) { return ((this.ay * e + this.by) * e + this.cy) * e }; bZ.prototype.sampleCurveDerivativeX = function (e) { return (3 * this.ax * e + 2 * this.bx) * e + this.cx }; bZ.prototype.solveCurveX = function (e, i0) { if (typeof i0 === "undefined") { i0 = 0.000001 } var iZ; var iY; var iW; var T; var iV; for (iW = e, iV = 0; iV < 8; iV++) { T = this.sampleCurveX(iW) - e; if (Math.abs(T) < i0) { return iW } var iX = this.sampleCurveDerivativeX(iW); if (Math.abs(iX) < 0.000001) { break } iW = iW - T / iX } iZ = 0; iY = 1; iW = e; if (iW < iZ) { return iZ } if (iW > iY) { return iY } while (iZ < iY) { T = this.sampleCurveX(iW); if (Math.abs(T - e) < i0) { return iW } if (e > T) { iZ = iW } else { iY = iW } iW = (iY - iZ) * 0.5 + iZ } return iW }; bZ.prototype.solve = function (e, i) { return this.sampleCurveY(this.solveCurveX(e, i)) }; var fJ = {}; function eQ(T) { var e = { duration: 1000, fps: 30, delay: 0, transition: fJ.linear, dropLastAnimation: false }; if (T) { for (var iV in T) { e[iV] = T[iV] } } if (T.beginTime) { this._beginTime = T.beginTime } this._callbacks = []; this._options = e; if (e.delay) { var iW = this; setTimeout(function () { iW._doStart() }, e.delay) } else { this._doStart() } this._pauseTime = 0 } eQ.INFINITE = "INFINITE"; eQ.prototype._doStart = function () { if (this._isPausing) { var e = performance.now() || new Date().getTime(); this._pauseTime += e - this._isPausing; this._isPausing = undefined } if (window.requestAnimationFrame) { var i = this; i._timer = window.requestAnimationFrame(function (T) { i._loop(T) }) } else { this._beginTime = new Date().getTime(); if (this._options.duration === eQ.INFINITE) { this._endTime = null } else { this._endTime = this._beginTime + this._options.duration } this._loop() } }; eQ.prototype._loop = function (iV) { var iY = this; iV = iV || new Date().getTime(); iV = iV - this._pauseTime; if (!this._beginTime) { this._beginTime = iV } if (!this._endTime && typeof this._options.duration === "number") { this._endTime = this._beginTime + this._options.duration } if (iY._endTime !== null && iV >= iY._endTime) { if (iY._options.dropLastAnimation === false) { iY._options.render(iY._options.transition(1), 1, iV) } if (typeof iY._options.finish === "function") { iY._options.finish(iV, this) } for (var iX = 0, e = iY._callbacks.length; iX < e; iX++) { iY._callbacks[iX]() } return } var iW; if (typeof iY._options.duration === "number") { iW = (iV - iY._beginTime) / iY._options.duration; iY.schedule = iY._options.transition(iW) } else { iW = iV - iY._beginTime; iY.schedule = 0 } iY._options.render(iY.schedule, iW, iV); if (!iY.terminative) { if (window.requestAnimationFrame) { iY._timer = requestAnimationFrame(function T(i) { iY._loop(i) }) } else { iY._timer = setTimeout(function () { iY._loop() }, 1000 / iY._options.fps) } } }; eQ.prototype.stop = function (i, e) { this.terminative = true; if (this._timer) { if (window.cancelAnimationFrame) { cancelAnimationFrame(this._timer) } else { clearTimeout(this._timer) } this._timer = null; if (typeof this._options.onStop === "function") { this._options.onStop(e) } } if (i) { this._endTime = this._beginTime; this._loop() } }; eQ.prototype.pause = function () { if (!this._isPausing) { this.stop(); this.terminative = undefined; this._isPausing = performance.now() || new Date().getTime() } }; eQ.prototype.cancel = function () { this.stop() }; eQ.prototype.append = function (e) { this._callbacks.push(e); return this }; fJ = { _p1: 1, _p2: 1 * 1.525, linear: function (e) { return e }, reverse: function (e) { return 1 - e }, easeInQuad: function (e) { return e * e }, easeInCubic: function (e) { return Math.pow(e, 3) }, easeInBiquad: function (e) { return Math.pow(e, 4) }, easeInBack: function (e) { return e * e * ((fJ._p1 + 1) * e - fJ._p1) }, easeOutQuad: function (e) { return -(e * (e - 2)) }, easeOutCubic: function (e) { return Math.pow((e - 1), 3) + 1 }, easeOutBiquad: function (e) { return 1 - Math.pow((e - 1), 4) }, easeOutBack: function (e) { return ((e = e - 1) * e * ((fJ._p1 + 1) * e + fJ._p1) + 1) }, easeInOutQuad: function (e) { if (e < 0.5) { return e * e * 2 } else { return -2 * (e - 2) * e - 1 } }, easeInOutCubic: function (e) { if (e < 0.5) { return Math.pow(e, 3) * 4 } else { return Math.pow(e - 1, 3) * 4 + 1 } }, easeInOutBiquad: function (e) { if (e < 0.5) { return Math.pow(e, 4) * 8 } else { return 1 - (Math.pow(e - 1, 4) * 8) } }, easeInOutSine: function (e) { return (1 - Math.cos(Math.PI * e)) / 2 } }; fJ.ease = (function () { var e = new bZ(0.4, 0, 0.6, 1); return function (i) { return e.solve(i) } })(); fJ["ease-in"] = fJ.easeInQuad; fJ["ease-out"] = fJ.easeOutQuad; var cS = { start: function (i1) { var iV = i1.el; var e = i1.style; var i = i1.startValue; var iY = i1.endValue; var iW = i1.duration || 1400; var iX = i1.transition || fJ.linear; var i0 = i1.callback; var iZ = iY - i; var T = i1.unit || ""; return new eQ({ fps: 60, duration: iW, transition: iX, render: function (i2) { iV.style[e] = i + iZ * i2 + T }, finish: function () { i0 && i0() } }) } }; function l(iW, T) { cD.call(this); this.keyframes = iW; var e = { duration: 1000, delay: 0, transition: fJ.linear, interation: 1 }; if (T) { for (var iV in T) { e[iV] = T[iV] } } this._options = e } l.inherits(cD, "ViewAnimation"); l.prototype._start = function (iX) { var T = this; T.map = iX; var iW = new eX("onanimationstart"); T.dispatchEvent(iW); this._initStatus(T.map); var iV = this._options.duration; var i = this._options.interation; var iY = this._options.transition; var iZ = 0; T.poiStatus = T.map._displayOptions.poi; if (T.poiStatus) { T.map.setDisplayOptions({ poi: false }) } T.map.viewAnimationTime = new Date().getTime(); this.animation = new eQ({ duration: iV, transition: iY, start: function (e) { }, render: function (i0, e) { if (i0 === 0) { T._initStatus(T.map) } else { T._setViewByRate(i0) } }, finish: function (i1, i0) { if (++iZ < i || i === "INFINITE") { var i2 = new eX("onanimationiterations"); T.dispatchEvent(i2); delete i0._beginTime; delete i0._endTime; i0._doStart() } else { var i2 = new eX("onanimationend"); T.dispatchEvent(i2); delete T.map.viewAnimationTime; T.map.setDisplayOptions({ poi: T.poiStatus }) } } }) }; l.prototype._getTotalDuration = function (e, i) { if (e === eQ.INFINITE) { return eQ.INFINITE } else { return e * i } }; l.prototype._initStatus = function (e) { if (this.keyframes[0]) { e.setCenter(this.keyframes[0].center, { noAnimation: true }); e.setZoom(this.keyframes[0].zoom, { noAnimation: true }); e.setTilt(this.keyframes[0].tilt, { noAnimation: true }); e.setHeading(this.keyframes[0].heading, { noAnimation: true }) } }; l.prototype._setViewByRate = function (iV) { for (var e = 0; e < this.keyframes.length - 1; e++) { var iW = this.keyframes[e]; var T = this.keyframes[e + 1]; if (iV >= iW.percentage && iV < T.percentage) { this.map.setHeading(this._getHeadingDelta(iW, T, iV), { noAnimation: true }); this.map.setTilt(this._getTiltDelta(iW, T, iV), { noAnimation: true }); this.map.setCenter(this._getCenterDelta(iW, T, iV), { noAnimation: true }); this.map.setZoom(this._getZoomDelta(iW, T, iV), { noAnimation: true }) } } }; l.prototype._getHeadingDelta = function (T, i, e) { var iW = (e - T.percentage) / (i.percentage - T.percentage); var iV = T.heading + (i.heading - T.heading) * iW; return iV }; l.prototype._getTiltDelta = function (T, i, e) { var iW = (e - T.percentage) / (i.percentage - T.percentage); var iV = T.tilt + (i.tilt - T.tilt) * iW; return iV }; l.prototype._getCenterDelta = function (T, i, e) { var iW = (e - T.percentage) / (i.percentage - T.percentage); var iV = T.center.add(i.center.sub(T.center).mult(iW)); return iV }; l.prototype._getZoomDelta = function (iV, T, i) { var iW = (i - iV.percentage) / (T.percentage - iV.percentage); var e = iV.zoom + (T.zoom - iV.zoom) * iW; return e }; l.prototype._pause = function (e) { this.animation.pause() }; l.prototype._continue = function (e) { this.animation._doStart() }; l.prototype._cancel = function (T) { T.setDisplayOptions({ poi: this.poiStatus }); this.animation.cancel(); delete T.viewAnimationTime; var i = new eX("onanimationcancel"); this.dispatchEvent(i) }; var ch = undefined; var eM = { is64Bit: function () { if (/Windows/.test(navigator.userAgent)) { if (/Win64; x64/.test(navigator.userAgent)) { return true } else { if (/WOW64/.test(navigator.userAgent)) { return true } else { return false } } } return true }, isIOS112: function aS(e) { return /11_2/.test(navigator.userAgent) }, canUseWebAssembly: function (i) { if (ch !== undefined) { i && i(ch); return } if (window.WebAssembly && this.is64Bit()) { if (window.disableWebAssembly === true) { ch = false; i && i(ch) } else { if (!b4()) { ch = true; i && i(ch) } else { if (this.isIOS112()) { ch = false; i && i(ch) } else { var e = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]); WebAssembly.instantiate(e).then(function (T) { ch = true; i && i(ch) }, function (T) { ch = false; i && i(ch) }) } } } } else { ch = false; i && i(ch) } } }; var aw = {}; bk.Utils = aw; function iN(e) { return e.style } function g2(i) { if (ej.Browser.ie > 0) { i.unselectable = "on"; i.selectstart = function () { return false }; i.onmousedown = function (T) { T.preventDefault(); return false } } else { var e = iN(i); e.MozUserSelect = "none"; e.WebkitUserSelect = "none"; i.addEventListener("mousedown", function (T) { T.preventDefault() }, false) } } function aE(e) { return e && e.parentNode && e.parentNode.nodeType !== 11 } function bw(i, e) { i.insertAdjacentHTML("beforeEnd", e); return i.lastChild } function e1(T, i) { var iV = document.createElement("div"); iV.innerHTML = i; var e = iV.childNodes[0]; return T.parentNode.insertBefore(e, T) } function aa(i) { i = i || window.event; i.stopPropagation ? i.stopPropagation() : i.cancelBubble = true } function b(i) { i = i || window.event; i.preventDefault ? i.preventDefault() : i.returnValue = false; return false } function gs(i) { aa(i); return b(i) } function fZ() { var e = document.documentElement; var i = document.body; if (e && (e.scrollTop || e.scrollLeft)) { return [e.scrollTop, e.scrollLeft] } else { if (i) { return [i.scrollTop, i.scrollLeft] } else { return [0, 0] } } } function hk(iW) { if (!iW) { return } iW.onload = iW.onerror = null; var T = iW.attributes, iV, e, iX; if (T) { e = T.length; for (iV = 0; iV < e; iV += 1) { iX = T[iV].name; if (typeof iW[iX] === "function") { iW[iX] = null } } } T = iW.children; if (T) { e = T.length; for (iV = 0; iV < e; iV += 1) { hk(iW.children[iV]) } } } function e3(i, iY, iX) { var iW = iY.lng - iX.lng; var iV = iY.lat - iX.lat; if (iW === 0) { return Math.abs(i.lng - iY.lng) } if (iV === 0) { return Math.abs(i.lat - iY.lat) } var T = iV / iW; var e = iY.lat - T * iY.lng; return Math.abs(T * i.lng - i.lat + e) / Math.sqrt(T * T + 1) } function bX(i, e) { if (!i || !e) { return } return Math.round(Math.sqrt(Math.pow(i.x - e.x, 2) + Math.pow(i.y - e.y, 2))) } function dO(i, e) { if (!i || !e) { return 0 } return Math.round(Math.sqrt(Math.pow(i.lng - e.lng, 2) + Math.pow(i.lat - e.lat, 2))) } function ev(T, i) { var e = Math.round((T.x + i.x) / 2); var iV = Math.round((T.y + i.y) / 2); return new eB(e, iV) } function h8(e, T) { var i = []; T = T || function (iW) { return iW }; for (var iV in e) { i.push(iV + "=" + T(e[iV])) } return i.join("&") } function bG(T, i, iX) { var iY = document.createElement(T); if (iX) { iY = document.createElementNS(iX, T) } i = i || {}; for (var iV in i) { var iW = { "for": "htmlFor", "class": "cssClass" }[iV] || iV; if (iV === "style") { iY.style.cssText = i[iV]; continue } if (iV === "class") { ej.ac(iY, i[iV]); continue } if (iY.setAttribute) { iY.setAttribute(iW, i[iV]) } else { try { iY[iW] = i[iV] } catch (iY) { } } } return iY } function bW(e) { if (e.currentStyle) { return e.currentStyle } else { if (e.ownerDocument && e.ownerDocument.defaultView) { return e.ownerDocument.defaultView.getComputedStyle(e, null) } } } function bC(e) { return typeof e === "function" } function fo(e) { return e === void 0 } function il(e, i) { return Object.prototype.hasOwnProperty.call(e, i) } function d(iW, iX) { if (fo(iW.length)) { for (var iV in iW) { if (il(iW, iV)) { iX.call(null, iV, iW[iV]) } } } else { var T = iW.length; if (T) { for (var e = 0; e < T; e++) { iX.call(null, e, iW[e]) } } } } function ah(i, e) { if (!e) { return i } d(e, function (T, iV) { i[T] = iV }); return i } var gc = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; function cP(iW) { var T = ""; var i3; var i1; var iZ = ""; var i2; var i0; var iY; var iX = ""; var iV = 0; var e = /[^A-Za-z0-9+/=]/g; if (!iW || e.exec(iW)) { return iW } iW = iW.replace(/[^A-Za-z0-9+/=]/g, ""); do { i2 = gc.indexOf(iW.charAt(iV++)); i0 = gc.indexOf(iW.charAt(iV++)); iY = gc.indexOf(iW.charAt(iV++)); iX = gc.indexOf(iW.charAt(iV++)); i3 = (i2 << 2) | (i0 >> 4); i1 = ((i0 & 15) << 4) | (iY >> 2); iZ = ((iY & 3) << 6) | iX; T = T + String.fromCharCode(i3); if (iY !== 64) { T = T + String.fromCharCode(i1) } if (iX !== 64) { T = T + String.fromCharCode(iZ) } i3 = i1 = iZ = ""; i2 = i0 = iY = iX = "" } while (iV < iW.length); return T } function h7(e) { return btoa(encodeURIComponent(e)) } function fa(e) { return decodeURIComponent(atob(e)) } (function (e) { if (!e.Utils) { e.Utils = {} } var i = e.Utils; i.format = (function () { function T(iY, iX, iZ) { var iW = iZ[+iX]; return typeof (iW) === "function" ? iW(iX) : iW } function iV(iY, iX, iZ) { var i1 = iX; var i2 = []; var iW = iX.split(":"); if (iW.length === 2) { i1 = iW[0]; i2.push(iW[1]) } var i0 = typeof (iZ[i1]); if (i0 === "function") { return iZ[i1].apply(undefined, i2) } else { if (i0 === "undefined") { return iY } else { return String(iZ[i1]) } } } return function (iW, iX) { var iZ = iX.splice ? T : iV; var iY = iW.splice ? iW.join("") : iW; return iY.replace(/{([a-zA-Z0-9_$:.]+)}/g, function (i1, i0) { return iZ(i1, i0, iX) }) } })(); i.ErrorMonitor = function (iV, T, iW) { }; eM.canUseWebAssembly(function (T) { i.canUseWebAssembly = T }) })(bk); function bF() { return (b4() || gU()) } function b4() { var e = navigator.userAgent; if (e.indexOf("iPhone") > -1 || e.indexOf("iPad") > -1) { return true } return false } function gU() { var e = navigator.userAgent; if (e.indexOf("Android") > -1) { return true } return false } function hw(e) { return e * Math.PI / 180 } function eu(e) { return e / Math.PI * 180 } function bo(e, iW) { var iV = Math.pow(10, iW); if (typeof e === "number") { return Math.round(e * iV) / iV } for (var T = 0; T < e.length; T++) { e[T] = bo(e[T], iW) } return e } function bR(T, i, e) { if (T < i) { T = i } else { if (T > e) { T = e } } return T } function dB(e, i) { while (e < 0) { e += i } return e % i } function gQ(i, e) { return (i >= 0 && e >= 0) || (i < 0 && e < 0) } function E(i) { if (i._gl) { return i._gl } var e = { alpha: true, antialias: false, failIfMajorPerformanceCaveat: false, preserveDrawingBuffer: false, stencil: false }; var T = i.getContext("webgl", e) || i.getContext("experimental-webgl", e); i._gl = T; return T } function hu(iV, T) { for (var e = 0; e < T.length; e++) { ej.on(iV, T[e], aa) } } function ed(i, T, e) { T[e] = i.getUniformLocation(T, e) } function bI(iW, iX, e, T, i) { var iV = ""; switch (i) { case "mat4": iW.uniformMatrix4fv(iX[e], false, T); return; case "v3": iV = "uniform3fv"; break; case "f": iV = "uniform1f"; break; case "i": iV = "uniform1i"; break }if (iV === "") { throw "error" } iW[iV](iX[e], T) } function gB(i3, e) { while (i3 < 0) { i3 += 360 } i3 = i3 % 360; var iV = e.width; var i2 = e.height; var iY = iV; var T = i2; if (i3 < 90) { var i = Math.sin(hw(i3)) * iV; var i0 = Math.sin(hw(i3)) * i2; var i1 = Math.cos(hw(i3)) * iV; var iX = Math.cos(hw(i3)) * i2; var iY = Math.ceil(i1 + i0); var T = Math.ceil(i + iX) } else { if (i3 < 180) { var i3 = i3 - 90; var i = Math.sin(hw(i3)) * iV; var i0 = Math.sin(hw(i3)) * i2; var i1 = Math.cos(hw(i3)) * iV; var iX = Math.cos(hw(i3)) * i2; var iY = Math.ceil(i + iX); var T = Math.ceil(i1 + i0) } else { if (i3 < 270) { var i3 = i3 - 180; var i = Math.sin(hw(i3)) * iV; var i0 = Math.sin(hw(i3)) * i2; var i1 = Math.cos(hw(i3)) * iV; var iX = Math.cos(hw(i3)) * i2; var iY = Math.ceil(i1 + i0); var T = Math.ceil(i + iX) } else { var i3 = i3 - 270; var i = Math.sin(hw(i3)) * iV; var i0 = Math.sin(hw(i3)) * i2; var i1 = Math.cos(hw(i3)) * iV; var iX = Math.cos(hw(i3)) * i2; var iY = Math.ceil(i + iX); var T = Math.ceil(i1 + i0) } } } var iZ = iY - iV; var iW = T - i2; return [0 - iZ / 2, 0 - iW / 2, iV + iZ / 2, i2 + iW / 2] } function bQ(e) { if (e.toDataURL() === bQ._blankData) { return true } return false } function M(iW, iV, T) { var i = [T.lng - iW.lng, T.lat - iW.lat]; var e = [iV.lng - iW.lng, iV.lat - iW.lat]; return i[0] * e[1] - i[1] * e[0] } function hQ(iX, iW, T) { var e; var iY; var iV; var i; if (iX.lng < iW.lng) { e = iX.lng; iV = iW.lng } else { e = iW.lng; iV = iX.lng } if (iX.lat < iW.lat) { iY = iX.lat; i = iW.lat } else { iY = iW.lat; i = iX.lat } if (T.lng < e || T.lng > iV || T.lat < iY || T.lat > i) { return false } return true } function hY(iZ, iY, iX, iV) { var iW = M(iX, iV, iZ); var T = M(iX, iV, iY); var i = M(iZ, iY, iX); var e = M(iZ, iY, iV); if (iW * T < 0 && i * e < 0) { return true } else { if (iW === 0 && hQ(iX, iV, iZ)) { return true } else { if (T === 0 && hQ(iX, iV, iY)) { return true } else { if (i === 0 && hQ(iZ, iY, iX)) { return true } else { if (e === 0 && hQ(iZ, iY, iV)) { return true } else { return false } } } } } } function gE(T, i) { var e = i.parentNode; if (e.lastChild === i) { e.appendChild(T) } else { e.insertBefore(T, i.nextSibling) } } function dh(i1, i2) { if (i2 === 0) { return i1 } var i0 = 0; var iY = 0; if (!i1) { throw "异常" } if (i1.length === 0) { return [] } for (var iW = 1, T = i1.length - 1; iW < T; iW++) { var iZ = e3(i1[iW], i1[0], i1[i1.length - 1]); if (iZ > i0) { iY = iW; i0 = iZ } } var e = []; if (i0 >= i2) { var i4 = i1.slice(0, iY); var i3 = i1.slice(iY, i1.length); var iX = dh(i4, i2); var iV = dh(i3, i2); for (var iW = 0, T = iX.length; iW < T; iW++) { e.push(iX[iW]) } for (var iW = 0, T = iV.length; iW < T; iW++) { e.push(iV[iW]) } } else { e.push(i1[0]); e.push(i1[i1.length - 1]) } return e } function k(e) { if (Math.log2) { return Math.log2(e) } return Math.log(e) / Math.LN2 } function cI(T, i, e) { return Math.min(e, Math.max(i, T)) } function ag(e, i) { if (!i) { return e } var iX = i[0]; var iW = i[1]; var iV = i[2]; var T = i[3]; var iZ = []; var iY = []; iZ[0] = T * e[0] + iV * e[2]; iZ[1] = e[1]; iZ[2] = -iV * e[0] + T * e[2]; iY[0] = iZ[0]; iY[1] = iW * iZ[1] - iX * iZ[2]; iY[2] = iX * iZ[1] + iW * iZ[2]; return iY } var h = Math.PI / 180; var fU = 180 / Math.PI; function eP(T) { var i = (T - Date.UTC(2000, 0, 1, 12)) / 86400000 / 36525; var e = (d3.utcDay.floor(T) - T) / 86400000 * 360 - 180; return [e - eE(i) * fU, dn(i) * fU] } function eE(iV) { var iW = bb(iV); var i = du(iV); var T = hr(iV); var iX = Math.tan(hq(iV) / 2); iX *= iX; return iX * Math.sin(2 * T) - 2 * iW * Math.sin(i) + 4 * iW * iX * Math.sin(i) * Math.cos(2 * T) - 0.5 * iX * iX * Math.sin(4 * T) - 1.25 * iW * iW * Math.sin(2 * i) } function dn(e) { return Math.asin(Math.sin(hq(e)) * Math.sin(bf(e))) } function bf(e) { return iJ(e) - (0.00569 + 0.00478 * Math.sin((125.04 - 1934.136 * e) * h)) * h } function iJ(e) { return hr(e) + h3(e) } function du(e) { return (357.52911 + e * (35999.05029 - 0.0001537 * e)) * h } function hr(i) { var e = (280.46646 + i * (36000.76983 + i * 0.0003032)) % 360; return (e < 0 ? e + 360 : e) / 180 * Math.PI } function h3(i) { var e = du(i); return (Math.sin(e) * (1.914602 - i * (0.004817 + 0.000014 * i)) + Math.sin(e + e) * (0.019993 - 0.000101 * i) + Math.sin(e + e + e) * 0.000289) * h } function hq(e) { return cX(e) + 0.00256 * Math.cos((125.04 - 1934.136 * e) * h) * h } function cX(e) { return (23 + (26 + (21.448 - e * (46.815 + e * (0.00059 - e * 0.001813))) / 60) / 60) * h } function bb(e) { return 0.016708634 - e * (0.000042037 + 1.267e-7 * e) } function fp() { return window.devicePixelRatio || 1 } function hD(T) { var i; var e; var iV; if (T >= 0) { iV = Math.floor(T / 65536) * 65536; i = iV; e = T - iV } else { iV = Math.floor(-T / 65536) * 65536; i = -iV; e = T + iV } return [i, e] } function cc(e) { if (e.lng >= 0 && e.lat >= 0) { return new b8(e.lng - 10000000, e.lat - 6000000) } if (e.lng >= 0 && e.lat < 0) { return new b8(e.lng - 10000000, e.lat + 6000000) } if (e.lng < 0 && e.lat >= 0) { return new b8(e.lng + 10000000, e.lat - 6000000) } if (e.lng < 0 && e.lat < 0) { return new b8(e.lng + 10000000, e.lat + 6000000) } } var hb = null; if (window.performance && window.performance.now) { hb = function () { return performance.now() } } else { if (Date.now) { hb = function () { return Date.now() } } else { hb = function () { return (new Date).getTime() } } } function gP(iV, e, i) { var T = "mouseWheel"; if (ej.Platform.macintosh) { if (!isNaN(iV) && (iV < 10 || iV !== 120) && (e % 1 === 0 && e < 5)) { T = "padScroll" } if (ej.Browser.firefox && (e % 1 === 0 && e < 5 && i === 0)) { T = "padScroll" } } if (ej.Browser.safari && iV === 12) { T = "mouseWheel" } return T } function bx(i4, iZ) { var i3 = i4[0]; var i2 = i4[1]; var iV = false; for (var iY = 0, iX = iZ.length - 2; iY < iZ.length; iY += 2) { var i1 = iZ[iY]; var iW = iZ[iY + 1]; var i0 = iZ[iX]; var T = iZ[iX + 1]; var e = ((iW > i2) !== (T > i2)) && (i3 < (i0 - i1) * (i2 - iW) / (T - iW) + i1); if (e) { iV = !iV } iX = iY } return iV } function df(T, e, i, iV) { iV = iV || 0.4; if (T > i) { T = Math.pow(T - i + 1, iV) + i - 1 } else { if (T < e) { T = e - Math.pow(e - T + 1, iV) + 1 } } return T } function ef(iZ) { var iX = ""; for (var T = 0; T < iZ.length; T++) { var i0 = iZ.charCodeAt(T) << 1; var e = i0.toString(2); var iW = e.length; var i3 = e; if (iW < 8) { i3 = "00000000" + e; i3 = i3.substr(e.length, 8) } iX += i3 } var i1 = 5 - iX.length % 5; var iV = []; for (var T = 0; T < i1; T++) { iV[T] = "0" } iX = iV.join("") + iX; var i2 = []; for (var T = 0; T < iX.length / 5; T++) { var i0 = iX.substr(T * 5, 5); var iY = parseInt(i0, 2) + 50; i2.push(String.fromCharCode(iY)) } return i2.join("") + i1.toString() } function iB(T, i) { var e = bk.TILE_VERSION || window.TILE_VERSION; if (!e || !e[T] || !e[T][i] || !e[T][i].version || !e[T][i].updateDate) { e = u.tvc } return { ver: e[T][i].version, udt: e[T][i].updateDate } } function bl() { var e = bk.MSV || window.MSV; if (!e || !e.mapstyle || !e.mapstyle.updateDate || !e.mapstyle.version) { e = u.msv } return { ver: e.mapstyle.version, udt: e.mapstyle.updateDate } } function c1(e, iW) { var iV = e.slice(0); for (var T = 0; T < iV.length; T++) { iV[T] += iW } return iV } var f6 = null; function gl(e) { if (f6) { return } e.fire(new eX("onloadtile")); f6 = setTimeout(function () { f6 = null }, 1000) } function ay() { if (w("//map.baidu.com") || w("//maps.baidu.com") || w("//ditu.baidu.com")) { return true } return false } aw.inMapHost = ay(); if (typeof window._inMapHost === "boolean") { aw.inMapHost = window._inMapHost } function w(i) { var T = window.location; var e = document.createElement("a"); e.href = i; return e.hostname === T.hostname && e.port === T.port && e.protocol === T.protocol } var dm = [72.685732, 0.193351, 136.10888, 54.392257]; var ei = [72.6892532, 0.1939743381, 136.1168614, 54.392257]; var q = [72.69566833, 0.1999420909, 136.1232863, 54.39791217]; var hs = 158; var cR = [98.789081, 122.948721, 107.857301, 118.082148, 119.126627, 128.021934, 79.939914, 99.021873, 119.912937, 122.084572, 127.906381, 130.933385, 106.496057, 108.066113, 119.818772, 126.367919, 111.789929, 119.311401, 100.742164, 102.220151, 99.853589, 100.781289, 97.522631, 98.834615, 99.092638, 99.892947, 122.905967, 123.761867, 123.716213, 125.494726, 123.723977, 124.755034, 125.475833, 126.398284, 125.471687, 126.065118, 130.817003, 133.605851, 127.900156, 128.656536, 128.646633, 129.625389, 132.88057, 134.104549, 117.365548, 119.230813, 116.073074, 117.416898, 114.406274, 116.123791, 116.479038, 119.591534, 110.566812, 111.851324, 74.465162, 79.993155, 82.858046, 91.345214, 85.71485, 98.969834, 127.651377, 129.532029, 129.462275, 130.209769, 133.716214, 134.731053, 134.366834, 135.103133, 130.854579, 131.32966, 115.499125, 117.530421, 115.765224, 116.734157, 108.524336, 110.601747, 121.351282, 124.612037, 126.151954, 127.332751, 91.273562, 95.604179, 79.87318, 82.935667, 76.413314, 78.336484, 78.275229, 79.993668, 83.956612, 85.725267, 85.500637, 89.346601, 97.990127, 98.94176, 106.641956, 108.599215, 111.386259, 111.810312, 111.578597, 111.803167, 115.99273, 117.010413, 116.24461, 116.675246, 119.422198, 119.909078, 120.646056, 121.38098, 120.335038, 120.662183, 124.579855, 125.773243, 126.207803, 126.774849, 95.565331, 102.037736, 95.576121, 96.158028, 95.556699, 97.799055, 91.296205, 93.348146, 93.321994, 94.690522, 89.339313, 90.540241, 82.263039, 82.882528, 78.335615, 80.023512, 76.623947, 78.352608, 73.495149, 74.48155, 74.846872, 76.479412, 91.560058, 94.871116, 88.759515, 89.235995, 83.237883, 83.965264, 82.292123, 83.246813, 81.876477, 83.253307, 80.75212, 81.463265, 86.463409, 88.267232, 102.199623, 104.225963, 112.153727, 116.823265, 108.965663, 113.021145, 111.166575, 117.972799]; var cQ = [22.548416, 42.276971, 17.227969, 22.7346, 41.292761, 50.741667, 30.365133, 42.324913, 21.701924, 22.69335, 42.4176, 48.936335, 21.429059, 22.648399, 50.650499, 52.914825, 42.20449, 45.199078, 21.13391, 22.568612, 21.441033, 22.583349, 23.73862, 25.298628, 22.00409, 22.563095, 38.97849, 41.338631, 40.287973, 41.330108, 39.732801, 40.343252, 40.966852, 41.323446, 40.719312, 41.05937, 44.869472, 48.009884, 41.336325, 42.443362, 42.008104, 42.434713, 45.873151, 48.205746, 45.132322, 46.784582, 45.133383, 46.392803, 45.148771, 45.740273, 47.478161, 50.064393, 42.216229, 43.461282, 37.014302, 40.662281, 42.219985, 47.31417, 27.726965, 30.466651, 48.911271, 49.642488, 48.831706, 49.434487, 46.941762, 48.37425, 47.651781, 48.463782, 42.851964, 44.905396, 47.598273, 48.438467, 48.409141, 48.901651, 42.22756, 42.906402, 52.821047, 53.578094, 50.701837, 51.654278, 42.292419, 44.392214, 42.295918, 45.385017, 34.680866, 37.027803, 30.743515, 37.066586, 28.245649, 30.406053, 47.270872, 48.497371, 25.238932, 27.778469, 42.215754, 42.540416, 43.427677, 44.689208, 44.685587, 44.994131, 48.878657, 49.318659, 49.281099, 49.624515, 50.710468, 51.306809, 52.90717, 53.331981, 52.903016, 53.107959, 52.900867, 53.250033, 51.638073, 52.400678, 42.229657, 42.691928, 43.061242, 43.891083, 42.663095, 43.074222, 44.37174, 45.180155, 44.375135, 44.974219, 47.3035, 48.053221, 45.352401, 46.807875, 40.563053, 42.040289, 40.581871, 41.405172, 38.516328, 40.178756, 35.790476, 37.02337, 26.825605, 27.761303, 27.197399, 27.74932, 29.147561, 30.37813, 29.570893, 30.062042, 30.045026, 30.380952, 29.998038, 30.385203, 48.487385, 49.16832, 22.395733, 22.598229, 7.441114, 11.501436, 3.767491, 9.000793, 12.642067, 17.406563]; var bN = [98.795985, 122.960792, 107.867379, 118.093451, 119.139658, 128.035888, 79.948212, 99.029524, 119.923388, 122.094977, 127.918527, 130.94789, 106.50606, 108.076783, 119.8329, 126.382207, 111.803567, 119.324928, 100.749858, 102.227985, 99.860885, 100.788921, 97.529435, 98.841564, 99.100017, 99.90035, 122.917416, 123.774367, 123.728314, 125.507211, 123.736065, 124.767299, 125.488463, 126.410675, 125.484326, 126.07764, 130.830784, 133.620042, 127.912178, 128.668957, 128.658937, 129.638599, 132.894179, 134.119086, 117.379378, 119.244569, 116.086736, 117.431212, 114.420233, 116.137458, 116.492775, 119.605527, 110.579401, 111.86488, 74.468228, 80.001908, 82.867432, 91.353788, 85.721075, 98.976964, 127.664757, 129.546833, 129.476893, 130.22449, 133.730358, 134.745235, 134.381034, 135.1178, 130.868117, 131.34409, 115.513245, 117.544751, 115.779271, 116.748045, 108.536254, 110.614326, 121.365534, 124.626434, 126.165992, 127.347013, 91.281869, 95.611754, 79.879648, 82.945041, 76.413314, 78.345207, 78.275229, 80.002329, 83.956612, 85.734098, 85.510186, 89.356499, 97.997001, 98.948845, 106.653208, 108.610811, 111.400183, 111.824179, 111.592224, 111.817136, 116.00682, 117.024631, 116.258574, 116.689291, 119.436876, 119.922961, 120.659806, 121.395479, 120.349116, 120.676014, 124.59389, 125.787788, 126.221756, 126.788962, 95.572955, 102.046581, 95.583772, 96.165551, 95.564318, 97.806095, 91.30446, 93.356438, 93.330319, 94.698145, 89.349129, 90.548677, 82.268802, 82.892025, 78.335615, 80.032266, 76.625755, 78.361413, 73.498248, 74.490992, 74.846872, 76.488771, 91.563521, 94.878444, 88.768214, 89.244787, 83.247076, 83.974127, 82.29595, 83.256003, 81.885315, 83.26249, 80.760619, 81.472404, 86.470983, 88.276988, 102.207537, 104.234614, 112.164795, 116.833667, 108.965663, 113.032246, 111.166575, 117.983363]; var bM = [22.551183, 42.284787, 17.227969, 22.738314, 41.300981, 50.749638, 30.368087, 42.332701, 21.705055, 22.696452, 42.426047, 48.944674, 21.432184, 22.651387, 50.657409, 52.92296, 42.212192, 45.206905, 21.137031, 22.57186, 21.444502, 22.586566, 23.741571, 25.301472, 22.006806, 22.56637, 38.985114, 41.346531, 40.295617, 41.338581, 39.740021, 40.351012, 40.974644, 41.331562, 40.726852, 41.067192, 44.877158, 48.018285, 41.344597, 42.451798, 42.016305, 42.443235, 45.880906, 48.214001, 45.140027, 46.792775, 45.141083, 46.400433, 45.156418, 45.748281, 47.485889, 50.071879, 42.223667, 43.469487, 37.019867, 40.668675, 42.226823, 47.321605, 27.72944, 30.469853, 48.919002, 49.650614, 48.840188, 49.443166, 46.949801, 48.382798, 47.660603, 48.472692, 42.859946, 44.913298, 47.605896, 48.445914, 48.41698, 48.909667, 42.23507, 42.914193, 52.8281, 53.585952, 50.709311, 51.662219, 42.29968, 44.399225, 42.302746, 45.391958, 34.680866, 37.03377, 30.743515, 37.07228, 28.245649, 30.408935, 47.277693, 48.504255, 25.241528, 27.780726, 42.223363, 42.548418, 43.435888, 44.696952, 44.693193, 45.00187, 48.886267, 49.326755, 49.288642, 49.632304, 50.717486, 51.314369, 52.914204, 53.33964, 52.910094, 53.115926, 52.908382, 53.258095, 51.64533, 52.408305, 42.236825, 42.699126, 43.068466, 43.898632, 42.670403, 43.082219, 44.379045, 45.187742, 44.382336, 44.981379, 47.310362, 48.06019, 45.359099, 46.814439, 40.569751, 42.047741, 40.587956, 41.41263, 38.519192, 40.185033, 35.790476, 37.029005, 26.825605, 27.763896, 27.199658, 27.751649, 29.150192, 30.381073, 29.573886, 30.065162, 30.047775, 30.384089, 30.001277, 30.388525, 48.494118, 49.173841, 22.398528, 22.601198, 7.441114, 11.505968, 3.767491, 9.005209, 12.642067, 17.410886]; var V = 95; var cz = [110.3961374, 105.0743788, 96.8991824, 95.61810411, 93.82412598, 91.3892353, 91.38931858, 89.08325955, 87.22469808, 86.26278402, 85.17353, 85.23741211, 82.86627441, 81.90481038, 79.59687147, 80.39829237, 79.93319363, 77.80279948, 75.2557704, 73.49357829, 73.1892532, 73.87758816, 74.4064738, 74.10215224, 75.46409695, 76.77739692, 78.28299615, 78.15499485, 78.37920654, 78.89145345, 79.69282199, 81.19938178, 81.80830295, 83.89093424, 85.94149523, 87.86447266, 89.03414958, 90.05918132, 91.10026937, 92.15733832, 93.74361735, 95.82597331, 97.95655545, 97.12363037, 98.2129739, 99.2068571, 101.6587874, 102.5239084, 102.2356106, 105.0249238, 106.0992342, 107.8617093, 111.6439372, 109.591869, 112.284586, 117.7961157, 118.9495128, 114.2076584, 118.693565, 123.1475225, 122.730705, 120.9361393, 123.4207441, 122.3787782, 122.1385425, 121.5904281, 121.1773763, 120.6805404, 120.2483355, 122.795807, 122.8759077, 121.3060262, 122.1392177, 123.7418799, 126.4177599, 128.5647409, 129.7194884, 131.2259136, 131.9950494, 133.6289931, 135.6168614, 131.3875545, 130.8743365, 128.6303223, 126.0997773, 124.4015375, 122.22161, 119.6586483, 119.7866827, 118.5685878, 116.5177976, 114.819101, 119.0812964, 116.453265, 111.7431171]; var cx = [43.2190351, 42.38053385, 43.17417589, 44.42226915, 45.09863634, 45.56708116, 47.33599718, 48.68832709, 49.62448486, 48.9482175, 48.4800472, 47.33564399, 47.43948676, 46.03452067, 45.20221788, 43.34563043, 42.32965739, 41.39690972, 40.82972331, 39.95567654, 39.25892877, 38.36098768, 38.05441569, 37.16878445, 36.38899414, 35.36126817, 34.30953451, 32.58503879, 31.56975694, 30.77800266, 30.43559814, 29.7744892, 30.0931977, 28.71103299, 27.70739665, 27.5775472, 27.01096137, 27.77857883, 27.50707954, 26.50328315, 26.70387804, 27.95548557, 27.29428901, 23.64685493, 23.62310601, 21.67493381, 20.77751465, 21.32070991, 22.1824113, 22.31232964, 22.51316054, 16.80037679, 13.19749864, 0.6939743381, 1.541660428, 10.50208252, 15.58926975, 17.89090007, 19.94928467, 22.18490153, 25.37285292, 25.61456434, 30.62532552, 31.08099284, 31.89238173, 32.50092692, 32.80325765, 34.25546956, 35.15486138, 36.90170139, 37.8348272, 37.941604, 38.6480797, 38.96797201, 40.98146918, 41.25573296, 42.07218153, 42.49132813, 44.65259766, 44.69330702, 48.62286865, 48.09383952, 49.19628499, 50.03402317, 53.27678901, 53.62976345, 53.89420546, 52.98933322, 52.01872884, 50.23210259, 50.18807048, 47.49769857, 47.34362712, 46.50502143, 45.24770128]; var d1 = [98.7895, 122.954182, 107.860913, 118.087007, 119.133165, 128.029533, 79.941749, 99.023087, 119.916883, 122.08841, 127.912143, 130.941471, 106.499502, 108.070244, 119.826245, 126.375818, 111.797006, 119.318387, 100.743285, 102.221517, 99.854448, 100.782445, 97.522928, 98.835028, 99.093518, 99.893783, 122.910927, 123.767769, 123.721954, 125.50077, 123.729657, 124.760724, 125.481902, 126.404079, 125.477737, 126.071019, 130.824331, 133.613395, 127.905767, 128.662524, 128.652527, 129.6321, 132.887552, 134.11249, 117.37297, 119.237999, 116.080154, 117.424589, 114.413586, 116.130948, 116.486264, 119.598927, 110.5728, 111.858437, 74.465162, 79.995337, 82.860821, 91.347291, 85.716024, 98.970481, 127.658331, 129.540202, 129.470528, 130.21808, 133.723748, 134.738785, 134.374555, 135.111443, 130.861475, 131.337438, 115.506627, 117.538123, 115.772783, 116.741632, 108.529656, 110.60782, 121.358945, 124.619773, 126.159424, 127.340582, 91.275275, 95.605228, 79.874427, 82.938601, 76.413314, 78.338763, 78.275229, 79.995765, 83.956612, 85.727511, 85.503554, 89.349858, 97.990418, 98.942257, 106.646704, 108.604437, 111.393667, 111.817723, 111.585811, 111.810645, 116.000232, 117.018216, 116.252108, 116.682705, 119.430384, 119.916417, 120.653168, 121.38883, 120.342727, 120.669383, 124.587426, 125.781376, 126.215282, 126.782323, 95.566367, 102.040026, 95.577158, 96.159009, 95.557772, 97.799728, 91.298032, 93.350057, 93.323794, 94.691771, 89.342471, 90.542019, 82.264229, 82.885485, 78.335615, 80.025844, 76.623947, 78.355027, 73.495149, 74.484473, 74.846872, 76.482208, 91.560117, 94.871859, 88.761692, 89.23822, 83.240549, 83.967602, 82.292367, 83.2495, 81.878825, 83.256003, 80.75421, 81.465955, 86.465421, 88.270356, 102.201019, 104.228033, 112.158282, 116.827153, 108.965663, 113.025767, 111.166575, 117.97687]; var d0 = [22.545421, 42.279053, 17.226272, 22.731982, 41.294917, 50.743316, 30.361986, 42.326603, 21.699185, 22.690751, 42.419757, 48.938435, 21.426505, 22.64567, 50.651745, 52.916705, 42.20641, 45.201064, 21.131326, 22.565685, 21.438288, 22.580379, 23.735785, 25.295582, 22.001087, 22.560315, 38.979333, 41.340757, 40.28938, 41.332289, 39.734164, 40.344718, 40.968803, 41.325813, 40.721073, 41.061503, 44.871533, 48.012179, 41.338366, 42.445601, 42.010343, 42.436934, 45.875217, 48.208327, 45.134237, 46.786509, 45.135376, 46.394665, 45.150734, 45.742257, 47.480099, 50.065931, 42.217982, 43.46329, 37.014057, 40.662848, 42.221079, 47.315558, 27.723432, 30.46385, 48.913298, 49.644555, 48.83396, 49.436824, 46.944059, 48.376613, 47.654503, 48.466331, 42.854333, 44.907682, 47.600253, 48.440245, 48.410926, 48.903468, 42.229292, 42.908294, 52.822466, 53.58012, 50.703491, 51.656037, 42.29378, 44.393379, 42.296912, 45.385809, 34.679282, 37.027699, 30.740622, 37.066377, 28.241967, 30.403134, 47.271949, 48.49848, 25.235818, 27.774976, 42.217425, 42.542102, 43.429763, 44.691016, 44.687044, 44.995758, 48.880431, 49.320551, 49.282865, 49.626267, 50.711607, 51.308382, 52.908547, 53.333963, 52.904419, 53.109706, 52.902338, 53.251938, 51.639701, 52.402205, 42.231045, 42.693581, 43.062756, 43.892771, 42.664519, 43.075927, 44.372942, 45.1815, 44.376327, 44.975476, 47.304623, 48.054453, 45.353174, 46.808493, 40.563653, 42.041556, 40.582164, 41.4064, 38.51618, 40.179105, 35.789745, 37.023144, 26.825402, 27.757641, 27.193806, 27.745766, 29.144229, 30.375186, 29.567889, 30.059102, 30.041938, 30.378006, 29.995047, 30.382338, 48.48834, 49.169021, 22.392816, 22.595333, 7.439914, 11.500161, 3.766676, 9.000793, 12.640512, 17.406563]; var eW = 3000; var fY = 0.00002; var fX = 0.000003; var hN = 0.0174532925194; var gH = 0.0065; var gG = 0.006; var c9 = 40000; var eN = 0; var h4 = 1; var an = 2; var g4 = 3; var eG = 4; var go = 1e-10; var hz = 6370996.81; var eZ = 100000000; function gw(T, iW, i, iV) { var e = arguments.length; this.ll = {}; this.ru = {}; if (e === 0) { } else { if (e === 4) { this.normalize(T, iW, i, iV) } } } gw.prototype.contains = function (e) { if (e.lng > this.ll.lng && e.lng < this.ru.lng && e.lat > this.ll.lat && e.lat < this.ru.lat) { return g4 } if (Math.abs(e.lng - this.ll.lng) < go || Math.abs(e.lng - this.ru.lng) < go || Math.abs(e.lat - this.ll.lat) < go || Math.abs(e.y - this.ru.lat) > go) { return an } return eN }; gw.prototype.normalize = function (i, iV, e, T) { if (i > e) { this.ll.lng = e; this.ru.lng = i } else { this.ll.lng = i; this.ru.lng = e } if (iV > T) { this.ll.lat = T; this.ru.lat = iV } else { this.ll.lat = iV; this.ru.lat = T } }; function dS(i, iV, e, T) { this.sp = { lng: i, lat: iV }; this.ep = { lng: e, lat: T }; this.mbr = new gw(i, iV, e, T) } function hc(iV, e, iX, iW) { for (var T = 0; T < iW; T = T + 2) { if (iV.lng >= e[T] && iV.lng <= e[T + 1] && iV.lat >= iX[T] && iV.lat <= iX[T + 1]) { return true } } return false } function fu(i0) { var i = i0.lng; var iZ = i0.lat; var iV = Math.sqrt(i * i + iZ * iZ); var iX = Math.atan2(iZ, i); var T = iV + fE(iZ); var iW = iX + fD(i); var e = T * Math.cos(iW); var iY = T * Math.sin(iW); return { lng: e + gH, lat: iY + gG } } function aM(i0) { var i = i0.lng - gH; var iZ = i0.lat - gG; var iV = Math.sqrt(i * i + iZ * iZ); var iX = Math.atan2(iZ, i); var T = iV - fE(iZ); var iW = iX - fD(i); var e = T * Math.cos(iW); var iY = T * Math.sin(iW); return { lng: e, lat: iY } } function fE(e) { return Math.sin(e * eW * hN) * fY } function fD(e) { return Math.cos(e * eW * hN) * fX } function ai(T, i, e) { return ((i.lng - T.lng) * (e.lat - T.lat) - (e.lng - T.lng) * (i.lat - T.lat)) } function gM(i, e) { return Math.abs(i - e) <= go } function fK(iV, T) { var i = iV.lat * hN; var i0 = iV.lng * hN; var e = T.lat * hN; var iZ = T.lng * hN; var iX = Math.cos(i) * Math.cos(e); var iW = Math.cos(i0) * Math.cos(iZ); var i2 = Math.sin(i) * Math.sin(e); var i1 = Math.sin(i0) * Math.sin(iZ); var i3 = iX * iW + iX * i1 + i2; if (i3 < -1) { i3 = -1 } else { if (i3 > 1) { i3 = 1 } } var iY = Math.acos(i3) * hz; return iY } function f(iZ, iY) { var i = iZ.lat * hN; var e = iY.lat * hN; var iV = iZ.lng * hN; var T = iY.lng * hN; var iX = i - e; var iW = iV - T; var i0 = Math.sin(iX / 2) * Math.sin(iX / 2) + Math.cos(i) * Math.cos(e) * Math.sin(iW / 2) * Math.sin(iW / 2); return 2 * Math.asin(Math.sqrt(i0)) * hz } function fI(i0, T) { var i2 = bm(i0, T); var i1 = 180; var iZ = 90; var iY = -180; var iW = -90; var iX = T.sp; var iV = T.ep; i1 = iX.lng < iV.lng ? iX.lng : iV.lng; iZ = iX.lat < iV.lat ? iX.lat : iV.lat; iY = iX.lng < iV.lng ? iX.lng : iV.lng; iW = iX.lat < iV.lat ? iX.lat : iV.lat; if (i2.lng <= iY && i2.lng >= i1 && i2.lng <= iW && i2.lat >= iZ) { return fK(i0, i2) } else { var i = f(i0, T.sp); var e = f(i0, T.ep); return i < e ? i : e } } function aN(i, e) { } function bq(i, iV, e, T) { return Math.sqrt((i - e) * (i - e) + (iV - T) * (iV - T)) } function bm(i6, iY) { var iX = i6.lng; var i5 = i6.lat; var iW = iY.sp.lng; var i4 = iY.sp.lat; var T = iY.ep.lng; var i2 = iY.ep.lat; var i3 = i2 - i4; var i1 = iW - T; if (gM(i3, 0) && gM(i1, 0)) { return iY.sp } var i0 = T * i4 - iW * i2; var iZ = i1 * iX - i3 * i5; var e = i3 * i3 - i1 * i1; var iV = i1 * iZ - i3 * i0; var i = i3 * iZ + i1 * i0; return { lng: iV / e, lat: -i / e } } function bu(iV) { var T = 0; for (var e = 0; e < V; ++e) { if (cx[e] <= iV.lat) { if (cx[(e + 1) % V] > iV.lat) { if (ai({ lng: cz[e], lat: cx[e] }, { lng: cz[(e + 1) % V], lat: cx[(e + 1) % V] }, iV) > 0) { ++T } } } else { if (cx[(e + 1) % V] <= iV.lat) { if (ai({ lng: cz[e], lat: cx[e] }, { lng: cz[(e + 1) % V], lat: cx[(e + 1) % V] }, iV) < 0) { --T } } } } return T === 0 ? eN : g4 } function iE(iV) { var iY = {}; if (iV.lng < ei[0] - 0.4 || iV.lat < ei[1] - 0.4 || iV.lng > ei[2] + 0.4 || iV.lat > ei[3] + 0.4) { iY.lng = iV.lng; iY.lat = iV.lat; return iY } else { if (hc(iV, d1, d0, hs)) { iY = fu(iV); return iY } } var e = 0; var i1 = c9; var T = 0; var iZ = new gw(); var i0 = 1; if (bu(iV) === eN) { for (var iX = 0; iX < V; ++iX) { var iW = new dS(cz[iX], cx[iX], cz[(iX + 1) % V], cx[(iX + 1) % V]); iZ.ll.lng = iW.mbr.ll.lng - 0.5; iZ.ll.lat = iW.mbr.ll.lat - 0.5; iZ.ru.lng = iW.mbr.ru.lng + 0.5; iZ.ru.lat = iW.mbr.ru.lat + 0.5; if (iZ.contains(iV) === eN) { continue } T = fI(iV, iW); if (T < i1) { i1 = T } } if (i1 < c9) { e = (c9 - i1) / c9; i0 = 2 } } else { i0 = 3; e = 1 } var i2 = fu(iV); iY = { lng: iV.lng + (i2.lng - iV.lng) * e, lat: iV.lat + (i2.lat - iV.lat) * e }; return iY } function ek(i) { var T = {}; if (i.lng < q[0] - 0.4 || i.lat < q[1] - 0.4 || i.lng > q[2] + 0.4 || i.lat > q[3] + 0.4) { T.lng = i.lng; T.lat = i.lat; return T } else { if (hc(i, bN, bM, hs)) { T = aM(i); return T } } var e = iE(i); if (i.lng === e.lng && i.lat === e.lng) { T.lng = i.lng; T.lat = i.lat; return T } return decryptPt1(i, iE) } function hp(i, e) { if (e === 3 && i instanceof b8) { var T = iE(i); return new b8(T.lng, T.lat) } else { return i } } function d4(i, e) { if (e === 3 && i instanceof b8) { var T = ek(i); return new b8(T.lng, T.lat) } else { if (e === 5 && i instanceof b8) { return new b8(i.lng, i.lat) } else { return i } } } function f8() { } ej.extend(f8, { Request: { INITIAL: -1, WAITING: 0, LOADED: 1, COMPLETED: 2 }, Dependency: { poly: ["marker"], layer: ["poly"], hotspot: ["poly"], infowindow: ["marker", "hotspot"], simpleInfowindow: ["marker"], tools: ["marker", "poly"], mapgl: ["glcommon", "poly"], earth: ["glcommon"], control: ["scommon"], scommon: [], localSearch: ["scommon"], otherSearch: ["scommon"], route: ["scommon"], buslineSearch: ["route"], autocomplete: ["scommon"] }, MD5Mapping: { control: "tp1o1a", marker: "hobocz", poly: "qxogmi", layer: "$layer$", infowindow: "40ylbp", simpleInfowindow: "dv5swm", hotspot: "jctz3m", menu: "1yegyc", tools: "txpkly", oppc: "skqhnq", oppcgl: "w3xqgx", mapgl: "jlamwu", markeranimation: "3p5di4", earth: "rlrygg", glcommon: "ks2w53", localSearch: "aul0rl", scommon: "pzz4ln", otherSearch: "vkrowr", route: "cyga0e", buslineSearch: "e2whia", autocomplete: "thnw1u" }, Config: { baseUrl: u.apiHost + "/getmodules?v=1.0&type=webgl", jsModPath: (aw.inMapHost ? "" : u.mapHost) + "/res/newui/", timeout: 5000 }, delayFlag: false, Module: { modules: {}, modulesNeedToLoad: [] }, _getMd5ModsStr: function (iX) { var iW = []; for (var iZ = 0, T = iX.length; iZ < T; iZ++) { var iY = iX[iZ]; var e = this.MD5Mapping[iY]; var iV = "$" + iY + "$"; if (e !== iV) { iW.push(iY + "_" + e) } } return iW.join(",") }, load: function (i, iX, iV) { var e = this.getModuleInfo(i); if (e.status === this.Request.COMPLETED) { if (iV === true) { iX() } } else { if (e.status === this.Request.INITIAL) { this.combine(i); this.addToLoadQueue(i); var T = this; if (T.delayFlag === false) { T.delayFlag = true; setTimeout(function () { var iY = T.Config.baseUrl + "&mod=" + T._getMd5ModsStr(T.Module.modulesNeedToLoad); fV.load(iY); T.Module.modulesNeedToLoad.length = 0; T.delayFlag = false }, 1) } e.status = this.Request.WAITING; function iW(i0) { var iZ = T.getModuleInfo(i); if (iZ.status !== T.Request.COMPLETED) { if (window.map) { var iY = new eX("onmod_timeout"); iY.timeout = i0 / 1000; iY.moduleName = i; window.map.fire(iY) } } } setTimeout(iW, this.Config.timeout, this.Config.timeout); setTimeout(iW, this.Config.timeout * 2, this.Config.timeout * 2) } if (iX) { e.callbacks.push(iX) } } }, combine: function (e) { if (e && this.Dependency[e]) { var iV = this.Dependency[e]; for (var T = 0; T < iV.length; T++) { this.combine(iV[T]); if (!this.Module.modules[iV[T]]) { this.addToLoadQueue(iV[T]) } } } }, addToLoadQueue: function (e) { var i = this.getModuleInfo(e); if (i.status === this.Request.INITIAL) { i.status = this.Request.WAITING; this.Module.modulesNeedToLoad.push(e) } }, run: function (T, iV) { var iZ = this.getModuleInfo(T); var i2 = this.Dependency[T]; if (i2) { for (var iX = 0; iX < i2.length; iX++) { var iY = this.getModuleInfo(i2[iX]); if (iY.status !== this.Request.COMPLETED) { iY.modsNeedToRun.push({ name: T, code: iV }); return } } } try { eval(iV) } catch (i0) { return } iZ.status = this.Request.COMPLETED; for (var iX = 0, iW = iZ.callbacks.length; iX < iW; iX++) { iZ.callbacks[iX]() } iZ.callbacks.length = 0; for (iX = 0; iX < iZ.modsNeedToRun.length; iX++) { var i1 = iZ.modsNeedToRun[iX]; this.run(i1.name, i1.code) } iZ.modsNeedToRun.length = 0 }, getModuleInfo: function (i) { var e; if (!this.Module.modules[i]) { this.Module.modules[i] = { status: this.Request.INITIAL, callbacks: [], modsNeedToRun: [] } } e = this.Module.modules[i]; return e } }); window._jsload = function (iW, iX) { var i = f8.getModuleInfo(iW); i.status = f8.Request.LOADED; if (iX !== "") { f8.run(iW, iX) } else { if (window.map) { var e = new eX("ongetmodules_fail"); e.moduleName = iW; window.map.fire(e) } var T = document.createElement("script"); var iV = f8.MD5Mapping[iW]; T.src = f8.Config.jsModPath + iW + "_" + iV + ".js"; document.getElementsByTagName("head")[0].appendChild(T) } }; function cw() { this._timeData = {} } var bi; if (typeof window !== "undefined") { bi = window } else { bi = self } cw.prototype.mark = function (e) { this._timeData[e] = this._getTime() }; cw.prototype.getMark = function (e) { return this._timeData[e] }; cw.prototype.getTime = function (i, e) { return parseFloat((this._timeData[e] - this._timeData[i]).toFixed(2)) }; cw.prototype.print = function () { }; cw.prototype.clear = function () { this._timeData = {} }; if (bi.performance && bi.performance.now) { cw.prototype._getTime = function () { return performance.now() } } else { cw.prototype._getTime = function () { return Date.now() } } !function (i, T) { T(i.d3 = i.d3 || {}) }(window, function (jy) { function jQ(jX, jY, T, jW) { function e(i) { return jX(i = new Date(+i)), i } return e.floor = e, e.ceil = function (i) { return jX(i = new Date(i - 1)), jY(i, 1), jX(i), i }, e.round = function (i) { var jZ = e(i), j0 = e.ceil(i); return j0 - i > i - jZ ? jZ : j0 }, e.offset = function (i, jZ) { return jY(i = new Date(+i), null == jZ ? 1 : Math.floor(jZ)), i }, e.range = function (j0, i, jZ) { var j1 = []; if (j0 = e.ceil(j0), jZ = null == jZ ? 1 : Math.floor(jZ), !(i > j0 && jZ > 0)) { return j1 } do { j1.push(new Date(+j0)) } while (jY(j0, jZ), jX(j0), i > j0); return j1 }, e.filter = function (i) { return jQ(function (jZ) { for (; jX(jZ), !i(jZ);) { jZ.setTime(jZ - 1) } }, function (jZ, j0) { for (; --j0 >= 0;) { for (; jY(jZ, 1), !i(jZ);) { } } }) }, T && (e.count = function (i, jZ) { return jA.setTime(+i), jE.setTime(+jZ), jX(jA), jX(jE), Math.floor(T(jA, jE)) }, e.every = function (i) { return i = Math.floor(i), isFinite(i) && i > 0 ? i > 1 ? e.filter(jW ? function (jZ) { return jW(jZ) % i === 0 } : function (jZ) { return e.count(0, jZ) % i === 0 }) : e : null }), e } function jF(e) { return jQ(function (i) { i.setDate(i.getDate() - (i.getDay() + 7 - e) % 7), i.setHours(0, 0, 0, 0) }, function (i, T) { i.setDate(i.getDate() + 7 * T) }, function (i, T) { return (T - i - (T.getTimezoneOffset() - i.getTimezoneOffset()) * jz) / jN }) } function jx(e) { return jQ(function (i) { i.setUTCDate(i.getUTCDate() - (i.getUTCDay() + 7 - e) % 7), i.setUTCHours(0, 0, 0, 0) }, function (i, T) { i.setUTCDate(i.getUTCDate() + 7 * T) }, function (i, T) { return (T - i) / jN }) } var jA = new Date, jE = new Date, jL = jQ(function () { }, function (i, T) { i.setTime(+i + T) }, function (i, T) { return T - i }); jL.every = function (e) { return e = Math.floor(e), isFinite(e) && e > 0 ? e > 1 ? jQ(function (i) { i.setTime(Math.floor(i / e) * e) }, function (i, T) { i.setTime(+i + T * e) }, function (i, T) { return (T - i) / e }) : jL : null }; var jU = jL.range, jS = 1000, jz = 60000, jP = 3600000, jH = 86400000, jN = 604800000, i1 = jQ(function (e) { e.setTime(Math.floor(e / jS) * jS) }, function (i, T) { i.setTime(+i + T * jS) }, function (i, T) { return (T - i) / jS }, function (e) { return e.getUTCSeconds() }), jR = i1.range, jG = jQ(function (e) { e.setTime(Math.floor(e / jz) * jz) }, function (i, T) { i.setTime(+i + T * jz) }, function (i, T) { return (T - i) / jz }, function (e) { return e.getMinutes() }), i9 = jG.range, jt = jQ(function (i) { var T = i.getTimezoneOffset() * jz % jP; 0 > T && (T += jP), i.setTime(Math.floor((+i - T) / jP) * jP + T) }, function (i, T) { i.setTime(+i + T * jP) }, function (i, T) { return (T - i) / jP }, function (e) { return e.getHours() }), jM = jt.range, jj = jQ(function (e) { e.setHours(0, 0, 0, 0) }, function (i, T) { i.setDate(i.getDate() + T) }, function (i, T) { return (T - i - (T.getTimezoneOffset() - i.getTimezoneOffset()) * jz) / jH }, function (e) { return e.getDate() - 1 }), i0 = jj.range, jg = jF(0), ji = jF(1), iW = jF(2), je = jF(3), i3 = jF(4), jw = jF(5), jD = jF(6), iY = jg.range, jv = ji.range, i7 = iW.range, js = je.range, jI = i3.range, ju = jw.range, jT = jD.range, jK = jQ(function (e) { e.setDate(1), e.setHours(0, 0, 0, 0) }, function (i, T) { i.setMonth(i.getMonth() + T) }, function (i, T) { return T.getMonth() - i.getMonth() + 12 * (T.getFullYear() - i.getFullYear()) }, function (e) { return e.getMonth() }), jV = jK.range, jd = jQ(function (e) { e.setMonth(0, 1), e.setHours(0, 0, 0, 0) }, function (i, T) { i.setFullYear(i.getFullYear() + T) }, function (i, T) { return T.getFullYear() - i.getFullYear() }, function (e) { return e.getFullYear() }); jd.every = function (e) { return isFinite(e = Math.floor(e)) && e > 0 ? jQ(function (i) { i.setFullYear(Math.floor(i.getFullYear() / e) * e), i.setMonth(0, 1), i.setHours(0, 0, 0, 0) }, function (i, T) { i.setFullYear(i.getFullYear() + T * e) }) : null }; var i6 = jd.range, jB = jQ(function (e) { e.setUTCSeconds(0, 0) }, function (i, T) { i.setTime(+i + T * jz) }, function (i, T) { return (T - i) / jz }, function (e) { return e.getUTCMinutes() }), jl = jB.range, jk = jQ(function (e) { e.setUTCMinutes(0, 0, 0) }, function (i, T) { i.setTime(+i + T * jP) }, function (i, T) { return (T - i) / jP }, function (e) { return e.getUTCHours() }), jh = jk.range, jf = jQ(function (e) { e.setUTCHours(0, 0, 0, 0) }, function (i, T) { i.setUTCDate(i.getUTCDate() + T) }, function (i, T) { return (T - i) / jH }, function (e) { return e.getUTCDate() - 1 }), jc = jf.range, jb = jx(0), ja = jx(1), i8 = jx(2), i5 = jx(3), i4 = jx(4), iZ = jx(5), iX = jx(6), iV = jb.range, jr = ja.range, jO = i8.range, jC = i5.range, jJ = i4.range, jq = iZ.range, jp = iX.range, jo = jQ(function (e) { e.setUTCDate(1), e.setUTCHours(0, 0, 0, 0) }, function (i, T) { i.setUTCMonth(i.getUTCMonth() + T) }, function (i, T) { return T.getUTCMonth() - i.getUTCMonth() + 12 * (T.getUTCFullYear() - i.getUTCFullYear()) }, function (e) { return e.getUTCMonth() }), jn = jo.range, i2 = jQ(function (e) { e.setUTCMonth(0, 1), e.setUTCHours(0, 0, 0, 0) }, function (i, T) { i.setUTCFullYear(i.getUTCFullYear() + T) }, function (i, T) { return T.getUTCFullYear() - i.getUTCFullYear() }, function (e) { return e.getUTCFullYear() }); i2.every = function (e) { return isFinite(e = Math.floor(e)) && e > 0 ? jQ(function (i) { i.setUTCFullYear(Math.floor(i.getUTCFullYear() / e) * e), i.setUTCMonth(0, 1), i.setUTCHours(0, 0, 0, 0) }, function (i, T) { i.setUTCFullYear(i.getUTCFullYear() + T * e) }) : null }; var jm = i2.range; jy.timeInterval = jQ, jy.timeMillisecond = jL, jy.timeMilliseconds = jU, jy.utcMillisecond = jL, jy.utcMilliseconds = jU, jy.timeSecond = i1, jy.timeSeconds = jR, jy.utcSecond = i1, jy.utcSeconds = jR, jy.timeMinute = jG, jy.timeMinutes = i9, jy.timeHour = jt, jy.timeHours = jM, jy.timeDay = jj, jy.timeDays = i0, jy.timeWeek = jg, jy.timeWeeks = iY, jy.timeSunday = jg, jy.timeSundays = iY, jy.timeMonday = ji, jy.timeMondays = jv, jy.timeTuesday = iW, jy.timeTuesdays = i7, jy.timeWednesday = je, jy.timeWednesdays = js, jy.timeThursday = i3, jy.timeThursdays = jI, jy.timeFriday = jw, jy.timeFridays = ju, jy.timeSaturday = jD, jy.timeSaturdays = jT, jy.timeMonth = jK, jy.timeMonths = jV, jy.timeYear = jd, jy.timeYears = i6, jy.utcMinute = jB, jy.utcMinutes = jl, jy.utcHour = jk, jy.utcHours = jh, jy.utcDay = jf, jy.utcDays = jc, jy.utcWeek = jb, jy.utcWeeks = iV, jy.utcSunday = jb, jy.utcSundays = iV, jy.utcMonday = ja, jy.utcMondays = jr, jy.utcTuesday = i8, jy.utcTuesdays = jO, jy.utcWednesday = i5, jy.utcWednesdays = jC, jy.utcThursday = i4, jy.utcThursdays = jJ, jy.utcFriday = iZ, jy.utcFridays = jq, jy.utcSaturday = iX, jy.utcSaturdays = jp, jy.utcMonth = jo, jy.utcMonths = jn, jy.utcYear = i2, jy.utcYears = jm, Object.defineProperty(jy, "__esModule", { value: !0 }) }); function et(e) { this._elemType = e; this._objCollection = {} } et.prototype.get = function () { var i = null; for (var e in this._objCollection) { if (this._objCollection[e] && this._objCollection[e]._free === true) { this._objCollection[e]._free = false; return this._objCollection[e] } } i = bG(this._elemType); e = bk.getGUID("obj_pool_"); this._objCollection[e] = i; return i }; et.prototype.free = function (e) { if (!e) { return } e._free = true; if (e.tagName.toLowerCase() === "img") { e.src = ""; e.crossOrigin = null; e.onload = e.onerror = null } }; et.prototype.clear = function () { for (var e in this._objCollection) { if (this._objCollection[e] && this._objCollection[e].tagName.toLowerCase === "img") { this._objCollection[e].onload = this._objCollection[e].onerror = null } } this._objCollection = {} }; var g7 = { get: function (i, iW, e, T) { var iV = new XMLHttpRequest(); iV.open("GET", i, true); iV.timeout = 10000; iV.ontimeout = function () { T && T() }; iV.onreadystatechange = function (iX) { if (this.readyState === 4) { if (this.status === 200) { iW && iW(iV.responseText) } else { e && e() } } }; iV.send() }, post: function (i, iX, iW, e, T) { var iV = new XMLHttpRequest(); iV.open("POST", i, true); iV.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); iV.timeout = 10000; iV.ontimeout = function () { T && T() }; iV.onreadystatechange = function (iY) { if (this.readyState === 4) { if (this.status === 200) { iW && iW(iV.responseText, iX) } else { e && e() } } }; iV.send(iX); return iV } }; var fV = (function (e) { function i(iX, T, iW) { var iV = bG("script", { src: iX, type: "text/javascript", charset: "utf-8" }); if (iV.addEventListener) { iV.addEventListener("load", function (iZ) { var iY = iZ.target; iY.parentNode.removeChild(iY); T && T() }, false); iV.addEventListener("error", function (iZ) { if (iZ) { var iY = iZ.target; iY && iY.parentNode && iY.parentNode.removeChild(iY) } iW && iW(null) }, false) } else { if (iV.attachEvent) { iV.attachEvent("onreadystatechange", function (iZ) { var iY = window.event.srcElement; if (iY && (iY.readyState === "loaded" || iY.readyState === "complete")) { iY.parentNode.removeChild(iY) } T && T() }) } } e.getElementsByTagName("head")[0].appendChild(iV) } return { load: function (iY, T, iV) { if (typeof iY === "string") { i(iY, T, iV) } else { if (iY.length > 0) { var iX = iY.length; for (var iW = 0; iW < iX; iW++) { i(iY[iW], function () { iX--; if (iX === 0 && T) { T() } }) } } } } } })(window.document); function g1() { } g1.instances = {}; g1.getInstance = function (i, T) { if (g1.instances[i]) { return g1.instances[i] } var e = new iQ(i, T); g1.instances[i] = e; return e }; function iQ(e, i) { this._name = e; this._baseZoom = 18; this._opts = { tileSize: 256 }; ej.extend(this._opts, i || {}) } iQ.mapZoomBaseIndex = [8, 8, 8, 8, 7, 7, 6, 6, 5, 5, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]; iQ.baseScaleZoom = [19, 17, 15, 12, 10, 9, 7, 5, 3]; iQ.baseScaleZoomMercatorSize = [512, 2048, 4096, 32768, 65536, 262144, 1048576, 4194304, 8388608]; iQ.mapZoomBaseZoomMapping = [3, 3, 3, 3, 5, 5, 7, 7, 9, 9, 10, 12, 12, 12, 15, 15, 17, 17, 19, 19, 19, 19, 19, 19, 19, 19]; iQ.mapZoomStartZoomMapping = [3, 3, 3, 3, 4, 4, 6, 6, 8, 8, 10, 11, 11, 11, 14, 14, 16, 16, 18, 18, 18, 18, 18, 18, 18, 18]; iQ.baseScaleTileSize = [1024, 1024, 512, 512, 256, 512, 512, 512, 256]; iQ.mapZoomTileSize = [256, 256, 256, 256, 256, 512, 256, 512, 256, 512, 256, 256, 512, 1024, 256, 512, 512, 1024, 512, 1024, 2048, 4096, 4096 * 2, 4096 * 2 * 2, 4096 * 2 * 2 * 2, 4096 * 2 * 2 * 2 * 2]; iQ.baseZoomInfo = { "3": [3], "5": [4, 5], "7": [6, 7], "9": [8, 9], "10": [10], "12": [11, 12, 13], "15": [14, 15], "17": [16, 17], "19": [18, 19, 20, 21, 22, 23, 24, 25] }; iQ.prototype = { getName: function () { return this._name }, getTileSize: function (e) { e = Math.floor(e); if (e < 3) { e = 3 } if (this._name === "na") { return iQ.mapZoomTileSize[e] } return this._opts.tileSize }, getBaseTileSize: function (i) { i = Math.floor(i); if (this._name === "na") { var e = iQ.mapZoomBaseZoomMapping[i]; return iQ.mapZoomTileSize[e] } return this._opts.tileSize }, getDataZoom: function (e) { e = Math.floor(e); if (this._name === "na") { return iQ.mapZoomBaseZoomMapping[e] } return e }, getZoomUnits: function (e) { return Math.pow(2, (this._baseZoom - e)) }, getMercatorSize: function (T, i) { if (this._name === "na") { T = Math.floor(T); var e = iQ.mapZoomBaseIndex[T]; return iQ.baseScaleZoomMercatorSize[e] } return this._opts.tileSize * this.getZoomUnits(i) }, getBaseZoom: function () { return this._baseZoom }, getParentTile: function (iV, i1, i0, T, i) { if (this._name === "na") { var iW = iQ.baseZoomInfo[i0]; T--; if (iW.indexOf(T) > -1) { return { col: iV, row: i1, zoom: i0, useZoom: T } } else { var iY = iQ.mapZoomBaseIndex[i0]; var iX = iQ.baseScaleZoom[iY + 1]; if (!iX) { return null } var iZ = this.getFactorByZooms(iX, i0); var e = iQ.baseZoomInfo[iX]; return { col: Math.floor(iV / iZ), row: Math.floor(i1 / iZ), zoom: iX, useZoom: e[e.length - 1] } } return null } if (i0 - 1 < i) { return null } return { col: Math.floor(iV / 2), row: Math.floor(i1 / 2), zoom: i0 - 1, useZoom: i0 - 1 } }, getChildTiles: function (iW, iY, e, T, i5, jb) { if (this._name === "na") { var iV = iQ.baseZoomInfo[e]; T += jb; if (iV.indexOf(T) > -1) { return [{ col: iW, row: iY, zoom: e, useZoom: T }] } else { var i9 = 0; var i6 = e; while (i9 < jb) { var ja = iQ.mapZoomBaseIndex[i6]; var i0 = iQ.baseScaleZoom[ja - 1]; if (!i0) { return null } var i1 = iQ.baseZoomInfo[i0]; if (i1[jb - 1]) { var i2 = []; var i4 = this.getFactorByZooms(e, i0); var i = iW * i4; var i3 = iY * i4; for (var i8 = 0; i8 < i4; i8++) { var iX = i + i8; for (var i7 = 0; i7 < i4; i7++) { var iZ = i3 + i7; i2.push({ col: iX, row: iZ, zoom: i0, useZoom: i1[jb - 1] }) } } return i2 } i9 += i1.length; if (jb === i1.length) { i6 = i0 } } } return null } var i2 = []; if (e + jb > i5) { return null } var i4 = Math.pow(2, jb); var i = iW * i4; var i3 = iY * i4; var i0 = e + jb; var i2 = []; for (var i8 = 0; i8 < 2; i8++) { var iX = i + i8; for (var i7 = 0; i7 < 2; i7++) { var iZ = i3 + i7; i2.push({ col: iX, row: iZ, zoom: i0, useZoom: i0 }) } } return i2 }, getFactorByZooms: function (i, iV) { var T = iQ.mapZoomBaseIndex[i]; var iW = iQ.mapZoomBaseIndex[iV]; var e = iQ.baseScaleZoomMercatorSize[T]; var iX = iQ.baseScaleZoomMercatorSize[iW]; return e / iX } }; var cB = {}; var R = ["swiftshader", "microsoft basic render driver"]; var gr = ["intel", "nvidia", "amd", "apple", "geforce"]; function fM(e) { e = e.toLowerCase(); if (R.indexOf(e) >= 0) { return true } if (e.indexOf("mobile") >= 0) { return true } return false } function b9(T) { T = T.toLowerCase(); for (var e = 0; e < gr.length; e++) { if (T.indexOf(gr[e]) >= 0) { return true } } return false } function iP(e) { if (!e) { return false } if (fM(e)) { return false } if (b9(e)) { return true } return false } cB.ifEnableEarth = function (i) { var e = cB.ifEnableEarth; if (!i && typeof e._enable === "boolean") { return e._enable } if (cB.ifSupportWebGL()) { e._enable = true; return true } e._enable = false; return false }; cB.ifEnableWebGLMap = function (i) { var e = cB.ifEnableWebGLMap; if (!i && typeof e._enable === "boolean") { return e._enable } if (cB.ifSupportWebGL()) { if (aw.inMapHost) { e._enable = true; return true } else { if (window.Blob || window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder) { e._enable = true; return true } else { e._enable = false; return false } } } e._enable = false; return false }; cB.params = {}; cB.ifSupportWebGL = function () { var i = cB.ifSupportWebGL; if (typeof i._supportWebGL === "boolean") { return i._supportWebGL } if (!window.WebGLRenderingContext) { i._supportWebGL = false; return false } var T = document.createElement("canvas"); T.width = 300; T.height = 150; var iW = null; var i2 = { alpha: true, antialias: false, failIfMajorPerformanceCaveat: true, preserveDrawingBuffer: false, stencil: false }; try { iW = T.getContext("webgl", i2) || T.getContext("experimental-webgl", i2) } catch (iY) { i._supportWebGL = false } if (iW === null) { i._supportWebGL = false } else { i._supportWebGL = true; var i0 = iW.getExtension("WEBGL_debug_renderer_info"); var iZ = ""; if (i0) { iZ = iW.getParameter(i0.UNMASKED_RENDERER_WEBGL); if (iP(iZ) === true) { i._supportWebGL = true } var i1 = iW.getParameter(i0.UNMASKED_VENDOR_WEBGL); i._renderer = iZ; i._vendor = i1 } if (!i0 && ej.Browser.firefox) { i._supportWebGL = true } if (!i0 && ej.Platform.macintosh) { i._supportWebGL = true } if (iW.drawingBufferWidth !== T.width || iW.drawingBufferHeight !== T.height) { i._supportWebGL = false } if (iW.getParameter(iW.MAX_VERTEX_TEXTURE_IMAGE_UNITS) < 4) { i._supportWebGL = false } var iV = iW.getParameter(iW.MAX_TEXTURE_SIZE); cB.params.maxTextureSize = iV; if (iV < 4096) { i._supportWebGL = false } var iX = iW.getParameter(iW.MAX_TEXTURE_IMAGE_UNITS); if (iX < 8) { i._supportWebGL = false } if (!iW.getShaderPrecisionFormat || iW.getShaderPrecisionFormat(iW.FRAGMENT_SHADER, iW.HIGH_FLOAT).precision < 23) { i._supportWebGL = false } } return i._supportWebGL }; cB.ifSupportCanvas2d = function () { var iW = cB.ifSupportCanvas2d; if (typeof iW.supportCanvas2d === "boolean") { return iW.supportCanvas2d } var T = document.createElement("canvas"); var i = null; try { i = T.getContext("2d") } catch (iV) { iW.supportCanvas2d = false } if (i === null) { iW.supportCanvas2d = false } else { iW.supportCanvas2d = true } return iW.supportCanvas2d }; cB.ifCanvas2dInBlackList = function () { return true }; cB.ifEnableCanvas2dMap = function () { return false; var i = navigator.userAgent; var e = 0; var iV = 0; var iW = 0; if (/macintosh/ig.test(i)) { var T = 0; if (/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(i) && !/chrome/i.test(i)) { T = parseInt((RegExp["\x241"] || RegExp["\x242"]), 10) } if (T > 0) { return false } return true } if (/windows nt (\d+\.\d)/ig.test(i)) { iV = parseFloat(RegExp.$1); if (iV >= 6.1) { if (/chrome\/(\d+\.\d)/i.test(i)) { e = parseFloat(RegExp.$1); if (e >= 31) { return true } } if (/MSIE (\d+(\.\d+)?)/.test(i)) { iW = parseFloat(RegExp.$1); if (iW >= 10) { return true } } if (/Firefox/.test(i)) { return true } if (/rv:11.0/ig.test(i)) { return true } if (/edge/ig.test(i)) { return true } } } return false }; cB.ifSupportCSS3 = function (iZ, i) { var iY = document.createElement("div"); var iX = "Webkit Moz O ms".split(" "); var e = iX.length; var T = ""; var iV = iY.style; if (iZ in iV) { T = iZ } iZ = iZ.replace(/^[a-z]/, function (i0) { return i0.toUpperCase() }); while (e--) { var iW = iX[e] + iZ; if (iW in iV) { T = iW; break } } if (i) { return T } else { return T.length > 0 ? true : false } }; cB.isModernBrowser = cB.ifSupportCanvas2d() && cB.ifSupportCSS3("transform"); function ao(i, e) { this._size = i; this._curSize = 0; this._cache = {}; this._least = null; this._most = null; this._options = { clearCallback: null, removeOldCallback: null }; e = e || {}; for (var T in e) { this._options[T] = e[T] } this._getDataTimes = 0; this._hitTimes = 0 } ao.prototype.setData = function (iV, iX) { var i = this._cache; var T = this._size; if (T === 0) { return } var e = this._curSize; if (e === T) { this._removeOld() } var iW; if (!i[iV]) { iW = { key: iV, data: iX, older: null, newwer: null }; i[iV] = iW; if (this._least === null) { this._least = iW } if (this._most === null) { this._most = iW } this._curSize++ } else { iW = i[iV]; iW.data = iX; if (this._most === iW) { return } iW.older && (iW.older.newer = iW.newer); iW.newer && (iW.newer.older = iW.older); if (this._least === iW) { this._least = iW.newer } } if (this._most && this._most !== iW) { this._most.newer = iW; iW.older = this._most; this._most = iW; iW.newer = null } }; ao.prototype.getData = function (e) { var i = this._cache[e]; this._getDataTimes++; if (i) { this._hitTimes++; var T = i.data; if (this._most === i) { return T } i.older && (i.older.newer = i.newer); i.newer && (i.newer.older = i.older); if (this._least === i) { this._least = i.newer } this._most.newer = i; i.older = this._most; i.newer = null; this._most = i; return T } return null }; ao.prototype.getAllData = function () { return this._cache }; ao.prototype.getHitRate = function () { return this._hitTimes / this._getDataTimes }; ao.prototype.removeData = function (i) { var e = this._cache; var T = e[i]; if (!T) { return } if (this._options.clearCallback) { this._options.clearCallback(T.data, T.key) } T.older && (T.older.newer = T.newer); T.newer && (T.newer.older = T.older); if (this._least === T) { this._least = T.newer } if (this._most === T) { this._most = T.older } delete e[i]; this._curSize-- }; ao.prototype._removeOld = function () { var e = this._cache; var iV = Math.round(this._size * 0.6); var T = 0; while (this._least && T < iV) { var i = this._least; this._least = i.newer; i.newer && (i.newer.older = null); if (this._options.clearCallback) { this._options.clearCallback(i.data, i.key) } delete e[i.key]; T++ } this._curSize -= T; if (this._options.removeOldCallback) { this._options.removeOldCallback() } }; ao.prototype.clear = function () { var e = this._cache; var i = this._least; if (this._options.clearCallback) { while (i) { this._options.clearCallback(i.data, i.key); i = i.newer } } this._least = this._most = null; this._cache = {}; this._curSize = 0 }; ao.prototype.forEach = function (e) { var i = this._least; while (i) { e(i.data); i = i.newer } }; ao.prototype.clearExcept = function (i) { var e = this._cache; var T = this._least; while (T) { if (!i[T.key]) { if (this._options.clearCallback) { this._options.clearCallback(T.data, T.key) } T.older && (T.older.newer = T.newer); T.newer && (T.newer.older = T.older); if (this._least === T) { this._least = T.newer } if (this._most === T) { this._most = T.older } delete e[T.key]; this._curSize-- } T = T.newer } }; !function (T, i) { "object" == typeof bk && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (T = "undefined" != typeof globalThis ? globalThis : T || self).gcoord = i() }(this, (function () {
        /* *****************************************************************************
                Copyright (c) Microsoft Corporation.
        
                Permission to use, copy, modify, and/or distribute this software for any
                purpose with or without fee is hereby granted.
        
                THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
                REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
                AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
                INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
                LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
                OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
                PERFORMANCE OF THIS SOFTWARE.
                ***************************************************************************** */
        var jz = function () { return (jz = Object.assign || function (jE) { for (var i, T = 1, jG = arguments.length; T < jG; T++) { for (var jF in i = arguments[T]) { Object.prototype.hasOwnProperty.call(i, jF) && (jE[jF] = i[jF]) } } return jE }).apply(this, arguments) }, jk = Math.sin, jm = Math.cos, jq = Math.sqrt, jp = Math.abs, jD = Math.PI, jv = 6378245, jj = 0.006693421622965823; function jy(T, i) { return T >= 72.004 && T <= 137.8347 && i >= 0.8293 && i <= 55.8271 } function jB(jG, jF) { var jJ, i, jL, T = (jL = 300 + (jJ = jG - 105) + 2 * (i = jF - 35) + 0.1 * jJ * jJ + 0.1 * jJ * i + 0.1 * jq(jp(jJ)), jL += 2 * (20 * jk(6 * jJ * jD) + 20 * jk(2 * jJ * jD)) / 3, (jL += 2 * (20 * jk(jJ * jD) + 40 * jk(jJ / 3 * jD)) / 3) + 2 * (150 * jk(jJ / 12 * jD) + 300 * jk(jJ / 30 * jD)) / 3), jE = function (jO, jN) { var jM = 2 * jO - 100 + 3 * jN + 0.2 * jN * jN + 0.1 * jO * jN + 0.2 * jq(jp(jO)); return jM += 2 * (20 * jk(6 * jO * jD) + 20 * jk(2 * jO * jD)) / 3, jM += 2 * (20 * jk(jN * jD) + 40 * jk(jN / 3 * jD)) / 3, jM + 2 * (160 * jk(jN / 12 * jD) + 320 * jk(jN * jD / 30)) / 3 }(jG - 105, jF - 35), jI = jF / 180 * jD, jH = jk(jI), jK = jq(jH = 1 - jj * jH * jH); return [T = 180 * T / (jv / jK * jm(jI) * jD), jE = 180 * jE / (jv * (1 - jj) / (jH * jK) * jD)] } function js(jE) { var i = jE[0], T = jE[1]; if (!jy(i, T)) { return [i, T] } var jF = jB(i, T); return [i + jF[0], T + jF[1]] } function jl(jG) { var jK = jG[0], T = jG[1]; if (!jy(jK, T)) { return [jK, T] } for (var jE = [jK, T], jI = jE[0], jF = jE[1], jJ = js([jI, jF]), jH = jJ[0] - jK, jL = jJ[1] - T; jp(jH) > 0.000001 || jp(jL) > 0.000001;) { jH = (jJ = js([jI -= jH, jF -= jL]))[0] - jK, jL = jJ[1] - T } return [jI, jF] } var jw = Math.sin, jx = Math.cos, i3 = Math.atan2, jA = Math.sqrt, ji = 3000 * Math.PI / 180; function jo(jE) { var i = jE[0] - 0.0065, T = jE[1] - 0.006, jG = jA(i * i + T * T) - 0.00002 * jw(T * ji), jF = i3(T, i) - 0.000003 * jx(i * ji); return [jG * jx(jF), jG * jw(jF)] } function i7(jE) { var i = jE[0], T = jE[1], jG = jA(i * i + T * T) + 0.00002 * jw(T * ji), jF = i3(T, i) + 0.000003 * jx(i * ji); return [jG * jx(jF) + 0.0065, jG * jw(jF) + 0.006] } var jf = 180 / Math.PI, iY = Math.PI / 180, i0 = 6378137, jC = 20037508.342789244; function jc(i) { return [i[0] * jf / i0, (0.5 * Math.PI - 2 * Math.atan(Math.exp(-i[1] / i0))) * jf] } function jr(jE) { var i = Math.abs(jE[0]) <= 180 ? jE[0] : jE[0] - 360 * (jE[0] < 0 ? -1 : 1), T = [i0 * i * iY, i0 * Math.log(Math.tan(0.25 * Math.PI + 0.5 * jE[1] * iY))]; return T[0] > jC && (T[0] = jC), T[0] < -jC && (T[0] = -jC), T[1] > jC && (T[1] = jC), T[1] < -jC && (T[1] = -jC), T } var jb, ja, i9, jh, i6, iV, jg = Math.abs, jt = [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0], i5 = [75, 60, 45, 30, 15, 0], iX = [[1.410526172116255e-8, 0.00000898305509648872, -1.9939833816331, 200.9824383106796, -187.2403703815547, 91.6087516669843, -23.38765649603339, 2.57121317296198, -0.03801003308653, 17337981.2], [-7.435856389565537e-9, 0.000008983055097726239, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 10260144.86], [-3.030883460898826e-8, 0.00000898305509983578, 0.30071316287616, 59.74293618442277, 7.357984074871, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6856817.37], [-1.981981304930552e-8, 0.000008983055099779535, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4482777.06], [3.09191371068437e-9, 0.000008983055096812155, 0.00006995724062, 23.10934304144901, -0.00023663490511, -0.6321817810242, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2555164.4], [2.890871144776878e-9, 0.000008983055095805407, -3.068298e-8, 7.47137025468032, -0.00000353937994, -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 826088.5]], ju = [[-0.0015702102444, 111320.7020616939, 1704480524535203, -10338987376042340, 26112667856603880, -35149669176653700, 26595700718403920, -10725012454188240, 1800819912950474, 82.5], [0.0008277824516172526, 111320.7020463578, 647795574.6671607, -4082003173.641316, 10774905663.51142, -15171875531.51559, 12053065338.62167, -5124939663.577472, 913311935.9512032, 67.5], [0.00337398766765, 111320.7020202162, 4481351.045890365, -23393751.19931662, 79682215.47186455, -115964993.2797253, 97236711.15602145, -43661946.33752821, 8477230.501135234, 52.5], [0.00220636496208, 111320.7020209128, 51751.86112841131, 3796837.749470245, 992013.7397791013, -1221952.21711287, 1340652.697009075, -620943.6990984312, 144416.9293806241, 37.5], [-0.0003441963504368392, 111320.7020576856, 278.2353980772752, 2485758.690035394, 6070.750963243378, 54821.18345352118, 9540.606633304236, -2710.55326746645, 1405.483844121726, 22.5], [-0.0003218135878613132, 111320.7020701615, 0.00369383431289, 823725.6402795718, 0.46104986909093, 2351.343141331292, 1.58060784298199, 8.77738589078284, 0.37238884252424, 7.45]]; function i4(jF, T, jE) { var jH = jg(T) / jE[9], jG = jE[0] + jE[1] * jg(jF), i = jE[2] + jE[3] * jH + jE[4] * Math.pow(jH, 2) + jE[5] * Math.pow(jH, 3) + jE[6] * Math.pow(jH, 4) + jE[7] * Math.pow(jH, 5) + jE[8] * Math.pow(jH, 6); return [jG *= jF < 0 ? -1 : 1, i *= T < 0 ? -1 : 1] } function jn(jE) { for (var i = jE[0], T = jE[1], jG = [], jF = 0; jF < i5.length; jF++) { if (jg(T) > i5[jF]) { jG = ju[jF]; break } } return i4(i, T, jG) } function i2(jE) { for (var i = jE[0], T = jE[1], jG = [], jF = 0; jF < jt.length; jF++) { if (T >= jt[jF]) { jG = iX[jF]; break } } return i4(i, T, jG) } function i1(T, i) { if (!T) { throw new Error(i) } } function jd(i) { return !!i && "[object Array]" === Object.prototype.toString.call(i) } function i8(i) { return !isNaN(Number(i)) && null !== i && !jd(i) } function iZ() { for (var jE = [], i = 0; i < arguments.length; i++) { jE[i] = arguments[i] } var T = jE.length - 1; return function () { for (var jF = [], jH = 0; jH < arguments.length; jH++) { jF[jH] = arguments[jH] } for (var jG = T, e = jE[T].apply(null, jF); jG--;) { e = jE[jG].call(null, e) } return e } } function iW(jV, jK, jM) { if (void 0 === jM && (jM = !1), null !== jV) { for (var jP, jO, jY, jR, jJ, jU, jX, jQ, jL = 0, jS = 0, jT = jV.type, jF = "FeatureCollection" === jT, jW = "Feature" === jT, jI = jF ? jV.features.length : 1, jN = 0; jN < jI; jN++) { jJ = (jQ = !!(jX = jF ? jV.features[jN].geometry : jW ? jV.geometry : jV) && "GeometryCollection" === jX.type) ? jX.geometries.length : 1; for (var jH = 0; jH < jJ; jH++) { var jG = 0, T = 0; if (null !== (jR = jQ ? jX.geometries[jH] : jX)) { var jE = jR.type; switch (jL = !jM || "Polygon" !== jE && "MultiPolygon" !== jE ? 0 : 1, jE) { case null: break; case "Point": if (!1 === jK(jU = jR.coordinates, jS, jN, jG, T)) { return !1 } jS++, jG++; break; case "LineString": case "MultiPoint": for (jU = jR.coordinates, jP = 0; jP < jU.length; jP++) { if (!1 === jK(jU[jP], jS, jN, jG, T)) { return !1 } jS++, "MultiPoint" === jE && jG++ } "LineString" === jE && jG++; break; case "Polygon": case "MultiLineString": for (jU = jR.coordinates, jP = 0; jP < jU.length; jP++) { for (jO = 0; jO < jU[jP].length - jL; jO++) { if (!1 === jK(jU[jP][jO], jS, jN, jG, T)) { return !1 } jS++ } "MultiLineString" === jE && jG++, "Polygon" === jE && T++ } "Polygon" === jE && jG++; break; case "MultiPolygon": for (jU = jR.coordinates, jP = 0; jP < jU.length; jP++) { for (T = 0, jO = 0; jO < jU[jP].length; jO++) { for (jY = 0; jY < jU[jP][jO].length - jL; jY++) { if (!1 === jK(jU[jP][jO][jY], jS, jN, jG, T)) { return !1 } jS++ } T++ } jG++ } break; case "GeometryCollection": for (jP = 0; jP < jR.geometries.length; jP++) { if (!1 === iW(jR.geometries[jP], jK, jM)) { return !1 } } break; default: throw new Error("Unknown Geometry Type") } } } } } } !function (i) { i.WGS84 = "WGS84", i.WGS1984 = "WGS84", i.EPSG4326 = "WGS84", i.GCJ02 = "GCJ02", i.AMap = "GCJ02", i.BD09 = "BD09", i.BD09LL = "BD09", i.Baidu = "BD09", i.BMap = "BD09", i.BD09MC = "BD09MC", i.BD09Meter = "BD09MC", i.EPSG3857 = "EPSG3857", i.EPSG900913 = "EPSG3857", i.EPSG102100 = "EPSG3857", i.WebMercator = "EPSG3857", i.WM = "EPSG3857" }(iV || (iV = {})); var je = { WGS84: { to: (jb = {}, jb[iV.GCJ02] = js, jb[iV.BD09] = iZ(i7, js), jb[iV.BD09MC] = iZ(jn, i7, js), jb[iV.EPSG3857] = jr, jb) }, GCJ02: { to: (ja = {}, ja[iV.WGS84] = jl, ja[iV.BD09] = i7, ja[iV.BD09MC] = iZ(jn, i7), ja[iV.EPSG3857] = iZ(jr, jl), ja) }, BD09: { to: (i9 = {}, i9[iV.WGS84] = iZ(jl, jo), i9[iV.GCJ02] = jo, i9[iV.EPSG3857] = iZ(jr, jl, jo), i9[iV.BD09MC] = jn, i9) }, EPSG3857: { to: (jh = {}, jh[iV.WGS84] = jc, jh[iV.GCJ02] = iZ(js, jc), jh[iV.BD09] = iZ(i7, js, jc), jh[iV.BD09MC] = iZ(jn, i7, js, jc), jh) }, BD09MC: { to: (i6 = {}, i6[iV.WGS84] = iZ(jl, jo, i2), i6[iV.GCJ02] = iZ(jo, i2), i6[iV.EPSG3857] = iZ(jr, jl, jo, i2), i6[iV.BD09] = i2, i6) } }; return jz(jz({}, iV), { CRSTypes: iV, transform: function (jI, jG, jH) { if (i1(!!jI, "The args[0] input coordinate is required"), i1(!!jG, "The args[1] original coordinate system is required"), i1(!!jH, "The args[2] target coordinate system is required"), jG === jH) { return jI } var jK = je[jG]; i1(!!jK, "Invalid original coordinate system: " + jG); var jJ = jK.to[jH]; i1(!!jJ, "Invalid target coordinate system: " + jH); var T = typeof jI; if (i1("string" === T || "object" === T, "Invalid input coordinate type: " + T), "string" === T) { try { jI = JSON.parse(jI) } catch (jG) { throw new Error("Invalid input coordinate: " + jI) } } var jF = !1; jd(jI) && (i1(jI.length >= 2, "Invalid input coordinate: " + jI), i1(i8(jI[0]) && i8(jI[1]), "Invalid input coordinate: " + jI), jI = jI.map(Number), jF = !0); var jE = jJ; return jF ? jE(jI) : (iW(jI, (function (jL) { var i; i = jE(jL), jL[0] = i[0], jL[1] = i[1] })), jI) } })
    })); var gC = { ColorRefTable: { aliceblue: ["#f0f8ff", "rgb(240,248,255)"], antiquewhite: ["#faebd7", "rgb(250,235,215)"], aqua: ["#00ffff", "rgb(0,255,255)"], aquamarine: ["#7fffd4", "rgb(127,255,212)"], azure: ["#f0ffff", "rgb(240,255,255)"], beige: ["#f5f5dc", "rgb(245,245,220)"], bisque: ["#ffe4c4", "rgb(255,228,196)"], black: ["#000000", "rgb(0,0,0)"], blanchedalmond: ["#ffebcd", "rgb(255,235,205)"], blue: ["#0000ff", "rgb(0,0,255)"], blueviolet: ["#8a2be2", "rgb(138,43,226)"], brown: ["#a52a2a", "rgb(165,42,42)"], burlywood: ["#deb887", "rgb(222,184,135)"], cadetblue: ["#5f9ea0", "rgb(95,158,160)"], chartreuse: ["#7fff00", "rgb(127,255,0)"], chocolate: ["#d2691e", "rgb(210,105,30)"], coral: ["#ff7f50", "rgb(255,127,80)"], cornflowerblue: ["#6495ed", "rgb(100,149,237)"], cornsilk: ["#fff8dc", "rgb(255,248,220)"], crimson: ["#dc143c", "rgb(220,20,60)"], cyan: ["#00ffff", "rgb(0,255,255)"], darkblue: ["#00008b", "rgb(0,0,139)"], darkcyan: ["#008b8b", "rgb(0,139,139)"], darkgoldenrod: ["#b8860b", "rgb(184,134,11)"], darkgray: ["#a9a9a9", "rgb(169,169,169)"], darkgreen: ["#006400", "rgb(0,100,0)"], darkgrey: ["#a9a9a9", "rgb(169,169,169)"], darkkhaki: ["#bdb76b", "rgb(189,183,107)"], darkmagenta: ["#8b008b", "rgb(139,0,139)"], darkolivegreen: ["#556b2f", "rgb(85,107,47)"], darkorange: ["#ff8c00", "rgb(255,140,0)"], darkorchid: ["#9932cc", "rgb(153,50,204)"], darkred: ["#8b0000", "rgb(139,0,0)"], darksalmon: ["#e9967a", "rgb(233,150,122)"], darkseagreen: ["#8fbc8f", "rgb(143,188,143)"], darkslateblue: ["#483d8b", "rgb(72,61,139)"], darkslategray: ["#2f4f4f", "rgb(47,79,79)"], darkslategrey: ["#2f4f4f", "rgb(47,79,79)"], darkturquoise: ["#00ced1", "rgb(0,206,209)"], darkviolet: ["#9400d3", "rgb(148,0,211)"], deeppink: ["#ff1493", "rgb(255,20,147)"], deepskyblue: ["#00bfff", "rgb(0,191,255)"], dimgray: ["#696969", "rgb(105,105,105)"], dimgrey: ["#696969", "rgb(105,105,105)"], dodgerblue: ["#1e90ff", "rgb(30,144,255)"], firebrick: ["#b22222", "rgb(178,34,34)"], floralwhite: ["#fffaf0", "rgb(255,250,240)"], forestgreen: ["#228b22", "rgb(34,139,34)"], fuchsia: ["#ff00ff", "rgb(255,0,255)"], gainsboro: ["#dcdcdc", "rgb(220,220,220)"], ghostwhite: ["#f8f8ff", "rgb(248,248,255)"], gold: ["#ffd700", "rgb(255,215,0)"], goldenrod: ["#daa520", "rgb(218,165,32)"], gray: ["#808080", "rgb(128,128,128)"], green: ["#008000", "rgb(0,128,0)"], greenyellow: ["#adff2f", "rgb(173,255,47)"], grey: ["#808080", "rgb(128,128,128)"], honeydew: ["#f0fff0", "rgb(240,255,240)"], hotpink: ["#ff69b4", "rgb(255,105,180)"], indianred: ["#cd5c5c", "rgb(205,92,92)"], indigo: ["#4b0082", "rgb(75,0,130)"], ivory: ["#fffff0", "rgb(255,255,240)"], khaki: ["#f0e68c", "rgb(240,230,140)"], lavender: ["#e6e6fa", "rgb(230,230,250)"], lavenderblush: ["#fff0f5", "rgb(255,240,245)"], lawngreen: ["#7cfc00", "rgb(124,252,0)"], lemonchiffon: ["#fffacd", "rgb(255,250,205)"], lightblue: ["#add8e6", "rgb(173,216,230)"], lightcoral: ["#f08080", "rgb(240,128,128)"], lightcyan: ["#e0ffff", "rgb(224,255,255)"], lightgoldenrodyellow: ["#fafad2", "rgb(250,250,210)"], lightgray: ["#d3d3d3", "rgb(211,211,211)"], lightgreen: ["#90ee90", "rgb(144,238,144)"], lightgrey: ["#d3d3d3", "rgb(211,211,211)"], lightpink: ["#ffb6c1", "rgb(255,182,193)"], lightsalmon: ["#ffa07a", "rgb(255,160,122)"], lightseagreen: ["#20b2aa", "rgb(32,178,170)"], lightskyblue: ["#87cefa", "rgb(135,206,250)"], lightslategray: ["#778899", "rgb(119,136,153)"], lightslategrey: ["#778899", "rgb(119,136,153)"], lightsteelblue: ["#b0c4de", "rgb(176,196,222)"], lightyellow: ["#ffffe0", "rgb(255,255,224)"], lime: ["#00ff00", "rgb(0,255,0)"], limegreen: ["#32cd32", "rgb(50,205,50)"], linen: ["#faf0e6", "rgb(250,240,230)"], magenta: ["#ff00ff", "rgb(255,0,255)"], maroon: ["#800000", "rgb(128,0,0)"], mediumaquamarine: ["#66cdaa", "rgb(102,205,170)"], mediumblue: ["#0000cd", "rgb(0,0,205)"], mediumorchid: ["#ba55d3", "rgb(186,85,211)"], mediumpurple: ["#9370db", "rgb(147,112,219)"], mediumseagreen: ["#3cb371", "rgb(60,179,113)"], mediumslateblue: ["#7b68ee", "rgb(123,104,238)"], mediumspringgreen: ["#00fa9a", "rgb(0,250,154)"], mediumturquoise: ["#48d1cc", "rgb(72,209,204)"], mediumvioletred: ["#c71585", "rgb(199,21,133)"], midnightblue: ["#191970", "rgb(25,25,112)"], mintcream: ["#f5fffa", "rgb(245,255,250)"], mistyrose: ["#ffe4e1", "rgb(255,228,225)"], moccasin: ["#ffe4b5", "rgb(255,228,181)"], navajowhite: ["#ffdead", "rgb(255,222,173)"], navy: ["#000080", "rgb(0,0,128)"], oldlace: ["#fdf5e6", "rgb(253,245,230)"], olive: ["#808000", "rgb(128,128,0)"], olivedrab: ["#6b8e23", "rgb(107,142,35)"], orange: ["#ffa500", "rgb(255,165,0)"], orangered: ["#ff4500", "rgb(255,69,0)"], orchid: ["#da70d6", "rgb(218,112,214)"], palegoldenrod: ["#eee8aa", "rgb(238,232,170)"], palegreen: ["#98fb98", "rgb(152,251,152)"], paleturquoise: ["#afeeee", "rgb(175,238,238)"], palevioletred: ["#db7093", "rgb(219,112,147)"], papayawhip: ["#ffefd5", "rgb(255,239,213)"], peachpuff: ["#ffdab9", "rgb(255,218,185)"], peru: ["#cd853f", "rgb(205,133,63)"], pink: ["#ffc0cb", "rgb(255,192,203)"], plum: ["#dda0dd", "rgb(221,160,221)"], powderblue: ["#b0e0e6", "rgb(176,224,230)"], purple: ["#800080", "rgb(128,0,128)"], red: ["#ff0000", "rgb(255,0,0)"], rosybrown: ["#bc8f8f", "rgb(188,143,143)"], royalblue: ["#4169e1", "rgb(65,105,225)"], saddlebrown: ["#8b4513", "rgb(139,69,19)"], salmon: ["#fa8072", "rgb(250,128,114)"], sandybrown: ["#f4a460", "rgb(244,164,96)"], seagreen: ["#2e8b57", "rgb(46,139,87)"], seashell: ["#fff5ee", "rgb(255,245,238)"], sienna: ["#a0522d", "rgb(160,82,45)"], silver: ["#c0c0c0", "rgb(192,192,192)"], skyblue: ["#87ceeb", "rgb(135,206,235)"], slateblue: ["#6a5acd", "rgb(106,90,205)"], slategray: ["#708090", "rgb(112,128,144)"], slategrey: ["#708090", "rgb(112,128,144)"], snow: ["#fffafa", "rgb(255,250,250)"], springgreen: ["#00ff7f", "rgb(0,255,127)"], steelblue: ["#4682b4", "rgb(70,130,180)"], tan: ["#d2b48c", "rgb(210,180,140)"], teal: ["#008080", "rgb(0,128,128)"], thistle: ["#d8bfd8", "rgb(216,191,216)"], tomato: ["#ff6347", "rgb(255,99,71)"], turquoise: ["#40e0d0", "rgb(64,224,208)"], violet: ["#ee82ee", "rgb(238,130,238)"], wheat: ["#f5deb3", "rgb(245,222,179)"], white: ["#ffffff", "rgb(255,255,255)"], whitesmoke: ["#f5f5f5", "rgb(245,245,245)"], yellow: ["#ffff00", "rgb(255,255,0)"], yellowgreen: ["#9acd32", "rgb(154,205,50)"] }, parseHexToRgbaArray: function (iX) { var iY = iX.replace("#", ""); if (iY.length === 3) { iY += "f" } else { if (iY.length === 6) { iY += "ff" } } var e = []; var iW = iY.length; var iV = iW === 8 ? 2 : 1; for (var T = 0; T < iW; T = T + iV) { if (iV === 2) { e.push(parseInt(iY.slice(T, T + 2), 16)) } else { e.push(parseInt(iY.slice(T, T + 1) + iY.slice(T, T + 1), 16)) } } return e }, parseRgbaStrToArray: function (i) { var e = [0, 0, 0, 255]; if (i.indexOf("rgba(") === 0) { var iV = i.replace("rgba(", "").replace(")", ""); var T = iV.split(","); e[0] = parseInt(T[0], 10); e[1] = parseInt(T[1], 10); e[2] = parseInt(T[2], 10); e[3] = Math.round(parseFloat(T[3]) * 255) } else { if (i.indexOf("rgb(") === 0) { var iV = i.replace("rgb(", "").replace(")", ""); var iW = iV.split(","); e[0] = parseInt(iW[0], 10); e[1] = parseInt(iW[1], 10); e[2] = parseInt(iW[2], 10); e[3] = 255 } } return e }, parseHexAndOpacityToRgbaArray: function (iW, iX) { var T = []; var i0 = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/; var iZ = iW.toLowerCase(); if (i0.test(iZ)) { if (iZ.length === 4) { var e = "#"; for (var iY = 1; iY < 4; iY++) { e += iZ.slice(iY, iY + 1).concat(iZ.slice(iY, iY + 1)) } iZ = e } for (var iV = 1; iV < 7; iV += 2) { T.push(parseInt(iZ.slice(iV, iV + 2), 16)) } T.push(iX) } return T }, parseCSSColor: function (e) { if (e.indexOf("#") === 0) { return gC.parseHexToRgbaArray(e) } return gC.parseRgbaStrToArray(e) }, rgbToHSV: function (iW) { var e = iW[0] / 255; var T = iW[1] / 255; var iX = iW[2] / 255; var i0 = Math.max(e, T, iX); var iV = Math.min(e, T, iX); var iZ = i0 - iV; var i; if (iZ === 0) { i = 0 } else { if (i0 === e) { i = 60 * (((T - iX) / iZ) % 6) } else { if (i0 === T) { i = 60 * ((iX - e) / iZ + 2) } else { if (i0 === iX) { i = 60 * ((e - T) / iZ + 4) } } } } var i1 = i0 === 0 ? 0 : (iZ / i0); var iY = i0; while (i < 0) { i += 360 } return [i, i1, iY] }, hsvToRGB: function (iV) { var iZ = iV[2] * iV[1]; var T = iZ * (1 - Math.abs((iV[0] / 60) % 2 - 1)); var i = iV[2] - iZ; var iW = iV[0]; var iY; var iX; var e; if (iW >= 0 && iW < 60) { iY = iZ; iX = T; e = 0 } else { if (iW >= 60 && iW < 120) { iY = T; iX = iZ; e = 0 } else { if (iW >= 120 && iW < 180) { iY = 0; iX = iZ; e = T } else { if (iW >= 180 && iW < 240) { iY = 0; iX = T; e = iZ } else { if (iW >= 240 && iW < 300) { iY = T; iX = 0; e = iZ } else { if (iW >= 300 && iW < 360) { iY = iZ; iX = 0; e = T } } } } } } iY = (iY + i) * 255 > 255 ? 255 : (iY + i) * 255; iX = (iX + i) * 255 > 255 ? 255 : (iX + i) * 255; e = (e + i) * 255 > 255 ? 255 : (e + i) * 255; return [Math.round(iY), Math.round(iX), Math.round(e)] }, formatColorCssToRgbaArray: function (iX, T, iV) { iV = (typeof iV !== "boolean") ? true : iV; if (typeof iX !== "string") { return iV ? [0, 0, 0, 1] : [0, 0, 0, 255] } var i = (iX || "Black").trim().toLowerCase(); var e = []; var iW = gC.ColorRefTable[i]; if (iW !== undefined) { i = iW[0] } e = gC.parseCSSColor(i); if (T !== undefined && !isNaN(Number(T))) { T = Number(T); e[3] = gC.fitTo(T, 0, 1) } else { e[3] = Number((e[3] / 255).toFixed(2)) } if (!iV) { e[3] = Math.floor(e[3] * 255) } return e }, fitTo: function (T, i, e) { if (T < i) { T = i } else { if (T > e) { T = e } } return T } }; (function (iX) { function i7(jc, jf) { var je = (jc & 65535) + (jf & 65535); var jd = (jc >> 16) + (jf >> 16) + (je >> 16); return (jd << 16) | (je & 65535) } function i6(jc, jd) { return (jc << jd) | (jc >>> (32 - jd)) } function i1(jh, je, jd, jc, jg, jf) { return i7(i6(i7(i7(je, jh), i7(jc, jf)), jg), jd) } function e(je, jd, ji, jh, jc, jg, jf) { return i1((jd & ji) | (~jd & jh), je, jd, jc, jg, jf) } function iY(je, jd, ji, jh, jc, jg, jf) { return i1((jd & jh) | (ji & ~jh), je, jd, jc, jg, jf) } function i4(je, jd, ji, jh, jc, jg, jf) { return i1(jd ^ ji ^ jh, je, jd, jc, jg, jf) } function ja(je, jd, ji, jh, jc, jg, jf) { return i1(ji ^ (jd | ~jh), je, jd, jc, jg, jf) } function T(jm, jh) { jm[jh >> 5] |= 128 << (jh % 32); jm[((jh + 64) >>> 9 << 4) + 14] = jh; var je; var jg; var jf; var jd; var jc; var jl = 1732584193; var jk = -271733879; var jj = -1732584194; var ji = 271733878; for (je = 0; je < jm.length; je += 16) { jg = jl; jf = jk; jd = jj; jc = ji; jl = e(jl, jk, jj, ji, jm[je], 7, -680876936); ji = e(ji, jl, jk, jj, jm[je + 1], 12, -389564586); jj = e(jj, ji, jl, jk, jm[je + 2], 17, 606105819); jk = e(jk, jj, ji, jl, jm[je + 3], 22, -1044525330); jl = e(jl, jk, jj, ji, jm[je + 4], 7, -176418897); ji = e(ji, jl, jk, jj, jm[je + 5], 12, 1200080426); jj = e(jj, ji, jl, jk, jm[je + 6], 17, -1473231341); jk = e(jk, jj, ji, jl, jm[je + 7], 22, -45705983); jl = e(jl, jk, jj, ji, jm[je + 8], 7, 1770035416); ji = e(ji, jl, jk, jj, jm[je + 9], 12, -1958414417); jj = e(jj, ji, jl, jk, jm[je + 10], 17, -42063); jk = e(jk, jj, ji, jl, jm[je + 11], 22, -1990404162); jl = e(jl, jk, jj, ji, jm[je + 12], 7, 1804603682); ji = e(ji, jl, jk, jj, jm[je + 13], 12, -40341101); jj = e(jj, ji, jl, jk, jm[je + 14], 17, -1502002290); jk = e(jk, jj, ji, jl, jm[je + 15], 22, 1236535329); jl = iY(jl, jk, jj, ji, jm[je + 1], 5, -165796510); ji = iY(ji, jl, jk, jj, jm[je + 6], 9, -1069501632); jj = iY(jj, ji, jl, jk, jm[je + 11], 14, 643717713); jk = iY(jk, jj, ji, jl, jm[je], 20, -373897302); jl = iY(jl, jk, jj, ji, jm[je + 5], 5, -701558691); ji = iY(ji, jl, jk, jj, jm[je + 10], 9, 38016083); jj = iY(jj, ji, jl, jk, jm[je + 15], 14, -660478335); jk = iY(jk, jj, ji, jl, jm[je + 4], 20, -405537848); jl = iY(jl, jk, jj, ji, jm[je + 9], 5, 568446438); ji = iY(ji, jl, jk, jj, jm[je + 14], 9, -1019803690); jj = iY(jj, ji, jl, jk, jm[je + 3], 14, -187363961); jk = iY(jk, jj, ji, jl, jm[je + 8], 20, 1163531501); jl = iY(jl, jk, jj, ji, jm[je + 13], 5, -1444681467); ji = iY(ji, jl, jk, jj, jm[je + 2], 9, -51403784); jj = iY(jj, ji, jl, jk, jm[je + 7], 14, 1735328473); jk = iY(jk, jj, ji, jl, jm[je + 12], 20, -1926607734); jl = i4(jl, jk, jj, ji, jm[je + 5], 4, -378558); ji = i4(ji, jl, jk, jj, jm[je + 8], 11, -2022574463); jj = i4(jj, ji, jl, jk, jm[je + 11], 16, 1839030562); jk = i4(jk, jj, ji, jl, jm[je + 14], 23, -35309556); jl = i4(jl, jk, jj, ji, jm[je + 1], 4, -1530992060); ji = i4(ji, jl, jk, jj, jm[je + 4], 11, 1272893353); jj = i4(jj, ji, jl, jk, jm[je + 7], 16, -155497632); jk = i4(jk, jj, ji, jl, jm[je + 10], 23, -1094730640); jl = i4(jl, jk, jj, ji, jm[je + 13], 4, 681279174); ji = i4(ji, jl, jk, jj, jm[je], 11, -358537222); jj = i4(jj, ji, jl, jk, jm[je + 3], 16, -722521979); jk = i4(jk, jj, ji, jl, jm[je + 6], 23, 76029189); jl = i4(jl, jk, jj, ji, jm[je + 9], 4, -640364487); ji = i4(ji, jl, jk, jj, jm[je + 12], 11, -421815835); jj = i4(jj, ji, jl, jk, jm[je + 15], 16, 530742520); jk = i4(jk, jj, ji, jl, jm[je + 2], 23, -995338651); jl = ja(jl, jk, jj, ji, jm[je], 6, -198630844); ji = ja(ji, jl, jk, jj, jm[je + 7], 10, 1126891415); jj = ja(jj, ji, jl, jk, jm[je + 14], 15, -1416354905); jk = ja(jk, jj, ji, jl, jm[je + 5], 21, -57434055); jl = ja(jl, jk, jj, ji, jm[je + 12], 6, 1700485571); ji = ja(ji, jl, jk, jj, jm[je + 3], 10, -1894986606); jj = ja(jj, ji, jl, jk, jm[je + 10], 15, -1051523); jk = ja(jk, jj, ji, jl, jm[je + 1], 21, -2054922799); jl = ja(jl, jk, jj, ji, jm[je + 8], 6, 1873313359); ji = ja(ji, jl, jk, jj, jm[je + 15], 10, -30611744); jj = ja(jj, ji, jl, jk, jm[je + 6], 15, -1560198380); jk = ja(jk, jj, ji, jl, jm[je + 13], 21, 1309151649); jl = ja(jl, jk, jj, ji, jm[je + 4], 6, -145523070); ji = ja(ji, jl, jk, jj, jm[je + 11], 10, -1120210379); jj = ja(jj, ji, jl, jk, jm[je + 2], 15, 718787259); jk = ja(jk, jj, ji, jl, jm[je + 9], 21, -343485551); jl = i7(jl, jg); jk = i7(jk, jf); jj = i7(jj, jd); ji = i7(ji, jc) } return [jl, jk, jj, ji] } function i5(jd) { var je; var jc = ""; var jf = jd.length * 32; for (je = 0; je < jf; je += 8) { jc += String.fromCharCode((jd[je >> 5] >>> (je % 32)) & 255) } return jc } function i0(jd) { var jf; var jc = []; jc[(jd.length >> 2) - 1] = undefined; for (jf = 0; jf < jc.length; jf += 1) { jc[jf] = 0 } var je = jd.length * 8; for (jf = 0; jf < je; jf += 8) { jc[jf >> 5] |= (jd.charCodeAt(jf / 8) & 255) << (jf % 32) } return jc } function iZ(jc) { return i5(T(i0(jc), jc.length * 8)) } function jb(je, jh) { var jd; var jg = i0(je); var jc = []; var jf = []; var ji; jc[15] = jf[15] = undefined; if (jg.length > 16) { jg = T(jg, je.length * 8) } for (jd = 0; jd < 16; jd += 1) { jc[jd] = jg[jd] ^ 909522486; jf[jd] = jg[jd] ^ 1549556828 } ji = T(jc.concat(i0(jh)), 512 + jh.length * 8); return i5(T(jf.concat(ji), 512 + 128)) } function i9(jf) { var je = "0123456789abcdef"; var jd = ""; var jc; var jg; for (jg = 0; jg < jf.length; jg += 1) { jc = jf.charCodeAt(jg); jd += je.charAt((jc >>> 4) & 15) + je.charAt(jc & 15) } return jd } function i2(jc) { return unescape(encodeURIComponent(jc)) } function iV(jc) { return iZ(i2(jc)) } function i3(jc) { return i9(iV(jc)) } function i(jc, jd) { return jb(i2(jc), i2(jd)) } function i8(jc, jd) { return i9(i(jc, jd)) } function iW(jd, je, jc) { if (!je) { if (!jc) { return i3(jd) } return iV(jd) } if (!jc) { return i8(je, jd) } return i(je, jd) } if (typeof define === "function" && define.amd) { define(function () { return iW }) } else { if (typeof module === "object" && module.exports) { module.exports = iW } else { iX.md5 = iW } } })(this); var cj = { levels: { INFO: "info", WARNING: "warning", ERROR: "error" }, category: { JS: "js", RESOURCE: "resource", AJAX: "ajax" }, config: { jsError: true, resourceError: true, ajaxError: true }, hosts: "api.map.baidu.com|webmap0.bdimg.com|maponline0.bdimg.com|", ignoreUrl: "api.map.baidu.com/images/blank.gif", sender: true, collections: [], sendError: function () { }, init: function (i, e, T) { this.hosts += i ? i : ""; ah && ah(this.config, e); this.sender = true; if (T) { this.sender = false } this.hosts = this.urlScope(this.hosts); this.sendError = this.notifyError(); var iV = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {}; this.config.jsError && this.handleJavaScriptError(iV); this.config.resourceError && this.handleResourceError(iV); this.config.ajaxError && this.handleAjaxError(iV) }, handleJavaScriptError: function (T) { var e = this; var i = T.onerror; T.onerror = function (iZ, iY, iV, iX, iW) { if (e.isFetch(e.category.JS) && e.hostExit(iY)) { if (iW && iW.stack) { e.sendError({ title: iZ, msg: iW.stack, category: e.category.JS, level: e.levels.ERROR }) } else { if (typeof iZ === "string") { e.sendError({ title: iZ, msg: JSON.stringify({ resourceUrl: iY, rowNum: iV, colNum: iX }), category: "js", level: e.levels.ERROR }) } } } if (i && bC(i)) { i && i.apply(T, arguments) } } }, handleResourceError: function (i) { var e = this; i.addEventListener("error", function (iX) { if (iX) { var iY = iX.target || iX.srcElement; var iW = iY instanceof HTMLScriptElement || iY instanceof HTMLLinkElement || iY instanceof HTMLImageElement; if (!iW) { if (!i.onerror) { var T = iX.filename || null; if (!e.isFetch(e.category.JS) || !e.hostExit(T)) { return } if (iX.error && iX.error.stack) { e.sendError({ title: iX.message, msg: iX.error.stack, category: e.category.JS, level: e.levels.ERROR }) } else { if (typeof iX.message === "string") { e.sendError({ title: iX.message, msg: JSON.stringify({ resourceUrl: T, rowNum: iX.lineno, colNum: iX.cowno }), category: e.category.JS, level: e.levels.ERROR }) } } } return } var iV = iY.src || iY.href; if (e.isFetch(e.category.RESOURCE) && e.hostExit(iV)) { e.sendError({ title: iY.nodeName, msg: iV, category: e.category.RESOURCE, level: e.levels.ERROR }) } } }, true) }, handleAjaxError: function (iX) { var e = this; var iW = iX.location.protocol; if (iW === "file:") { return } if (!iX.XMLHttpRequest) { return } var i = iX.XMLHttpRequest; var T = i.prototype.send; var iV = function (iZ) { if (iZ && iZ.currentTarget && iZ.currentTarget.status !== 200) { var iY = iZ.target.responseURL; if (e.isFetch(e.category.AJAX) && e.hostExit(iY)) { e.sendError({ title: iY, msg: JSON.stringify({ response: iZ.target.response, responseURL: iY, status: iZ.target.status, statusText: iZ.target.statusText }), category: e.category.AJAX, level: e.levels.ERROR }) } } }; i.prototype.send = function () { if (this["addEventListener"]) { this["addEventListener"]("error", iV); this["addEventListener"]("load", iV); this["addEventListener"]("abort", iV) } else { var iY = this["onreadystatechange"]; this["onreadystatechange"] = function (iZ) { if (this.readyState === 4) { iV(iZ) } iY && iY.apply(this, arguments) } } return T.apply(this, arguments) } }, notifyError: function (T) { var i = T || 1000; this._idleWorkerTicker = (function (iV) { return function () { iV.runJob() } })(this); var e = this; return function (iW) { if (iW.url) { if (!e.isFetch(iW.category)) { return } var iV = iW.url || ""; if (!e.hostExit(iV)) { return } delete iW.url } if (!navigator.onLine) { return } e.collections.push(iW); e.checkJob(i) } }, runJob: function () { if (this.collections.length === 0) { clearInterval(this.idleWork); this.idleWork = null; return } var iW = this.collections.slice(0, 2); var T = h7(JSON.stringify({ dataset: iW })); var iV = new Date().getTime(); var i = dR.apiIMG + "/blank.gif?product=jsapi&v=gl&l=" + T + "&ak=" + ea + "&t=" + iV; if (this.sender) { try { var iY = document.createElement("div"); iY.style = "width:0;height:0;visibility: hidden;opacity: 0;z-index:-999;background-image: url(" + i + ");"; document.querySelector("BODY").appendChild(iY); setTimeout(function () { document.querySelector("BODY").removeChild(iY) }) } catch (iX) { } } this.collections.splice(0, 2); if (this.collections.length === 0) { clearInterval(this.idleWork); this.idleWork = null } }, checkJob: function (e) { if (!this.idleWork && this._idleWorkerTicker) { this.idleWork = setInterval(this._idleWorkerTicker, e) } }, urlScope: function (iV) { var T = {}; var iX = Object.keys(u); if (u && iX.length > 0) { for (var iW in u) { if (u[iW] && (typeof u[iW] !== "function")) { T[iW] = u[iW] } } } try { var iZ = JSON.stringify(T); if (iZ.length > 2) { return iV + "|" + iZ } else { return iV } } catch (iY) { return iV } }, hostExit: function (i) { try { if (i && i.indexOf("//") === 0) { i = window.location.protocol + i } var T = new URL(i); if (!T || !T.host) { return false } var iW = T.host + T.pathname; if (this.ignoreUrl.indexOf(iW) === -1 && this.hosts.indexOf(T.host) > -1) { return true } return false } catch (iV) { return false } }, isFetch: function (e) { return this.config[e + "Error"] || false } }; bk.fetchDebug = cj; var iH = { request: function (i4, i7, i0, i1, i5) { var iZ = new Date()["getTime"](); var iW = (Math.random() * 100000)["toFixed"](0); bk._rd["_cbk" + iW] = function (jc) { if (jc.result && jc.result["error"] && jc.result["error"] === 202) { alert("该AK因为恶意行为已经被管理员封禁！"); return } i0 = i0 || {}; i4 && i4(jc, i0); delete bk._rd["_cbk" + iW] }; i1 = i1 || ""; var i6; var i2; if (i0 && i0.useEncodeURI) { i6 = h8(i7, encodeURI); i2 = h8(i7) } else { i6 = h8(i7, encodeURIComponent); i2 = h8(i7) } var jb = this; var T = u.apiHost + "/" + i1 + "?" + i6 + "&ie=utf-8&oue=1&fromproduct=jsapi"; var e = u.apiHost + "/" + i1 + "?" + i2 + "&ie=utf-8&oue=1&fromproduct=jsapi"; if (!i5) { T += "&res=api"; e += "&res=api" } T += "&callback=" + eL + "._rd._cbk" + iW; e += "&callback=" + eL + "._rd._cbk" + iW; var i = window.___abvk ? window.___abvk : this.getSeckeyCidItem("SECKEY_ABVK"); var iY = this.getSeckeyCidItem("BMAP_SECKEY"); var i8 = encodeURIComponent(i + "," + iY); var iX = i + "," + iY; T += "&ak=" + ea + "&v=gl&seckey=" + i8 + "&timeStamp=" + iZ; e += "&ak=" + ea + "&v=gl&seckey=" + iX + "&timeStamp=" + iZ; var ja = "F5L2O6R6AD8990O"; var i9 = "H0A9P8P7Y6ABQO0"; var iV = e.substr(e.indexOf("?") + 1); var i3 = md5(md5(iV + ja) + i9); T += "&sign=" + i3.substring(i3.length - 12); fV.load(T) }, getSeckeyCidItem: function (i) { if (navigator.cookieEnabled) { var T = new RegExp("(^| )" + i + "=([^;]*)(;|$)"); var e = document.cookie.match(T); if (e) { return unescape(e[2]) } return -1 } if (localStorage) { return localStorage.getItem(i) ? localStorage.getItem(i) : -1 } if (sessionStorage) { return sessionStorage.getItem(i) ? localStorage.getItem(i) : -1 } } }; window.srqtimer = null; window.firstTime = true; window.srqcount = 0; bk._rd = {}; var cM = { request: function (iY, e) { if (e) { var iX = (Math.random() * 100000).toFixed(0); BMapGL._rd["_cbk" + iX] = function (i0) { e && e(i0); delete BMapGL._rd["_cbk" + iX] }; iY += "&callback=BMapGL._rd._cbk" + iX } function iW(i1) { var i0; var i2 = new RegExp("(^| )" + i1 + "=([^;]*)(;|$)"); if (i0 = document.cookie.match(i2)) { return unescape(i0[2]) } else { return -1 } } var T = window.___abvk ? window.___abvk : this.getSeckeyCidItem("SECKEY_ABVK"); var iZ = this.getSeckeyCidItem("BMAP_SECKEY"); var i = encodeURIComponent(T + "," + iZ); iY += "&seckey=" + i; var iV = bG("script", { src: iY, type: "text/javascript", charset: "utf-8" }); if (iV.addEventListener) { iV.addEventListener("load", function (i1) { var i0 = i1.target; i0.parentNode.removeChild(i0) }, false); iV.addEventListener("error", function (i0) { e && e([, , , , ,]) }, false) } else { if (iV.attachEvent) { iV.attachEvent("onreadystatechange", function (i1) { var i0 = window.event.srcElement; if (i0 && (i0.readyState == "loaded" || i0.readyState == "complete")) { i0.parentNode.removeChild(i0) } }) } } document.getElementsByTagName("head")[0].appendChild(iV); iV = null }, getSeckeyCidItem: function (i) { if (navigator.cookieEnabled) { var T = new RegExp("(^| )" + i + "=([^;]*)(;|$)"); var e = document.cookie.match(T); if (e) { return unescape(e[2]) } return -1 } if (localStorage) { return localStorage.getItem(i) ? localStorage.getItem(i) : -1 } if (sessionStorage) { return sessionStorage.getItem(i) ? localStorage.getItem(i) : -1 } } }; function fQ() { this._map = null; this._container; this._type = "control"; this.blockInfoWindow = true; this._visible = true } fQ.inherits(cD, "Control"); ej.extend(fQ.prototype, { initialize: function (e) { this._map = e; if (this._container) { if (this._opts && this._opts.container) { this._opts.container.appendChild(this._container) } else { e.container.appendChild(this._container) } return this._container } return }, _i: function (e) { if (!this._container && this.initialize && bC(this.initialize)) { this._container = this.initialize(e) } this._opts = this._opts || { printable: false }; this._setStyle(); this._setPosition(); if (this._container) { this._container._jsobj = this } }, _setStyle: function () { var i = this._container; if (i) { var e = i.style; e.position = "absolute"; e.zIndex = this._cZIndex || "10"; e.MozUserSelect = "none"; if (!this._opts.printable) { ej.ac(i, "BMap_noprint") } ej.on(i, "contextmenu", gs) } }, remove: function () { this._map = null; if (!this._container) { return } this._container.parentNode && this._container.parentNode.removeChild(this._container); this._container._jsobj = null; this._container = null }, _render: function (e) { if (this._opts && this._opts.container) { this._container = bw(this._opts.container, '<div unselectable="on"></div>') } else { var i = '<div unselectable="on"></div>'; if (e && e.config.autoSafeArea && b4()) { this._safeAreaContainer = bw(this._map.container, i); this._safeAreaContainer.style.position = "absolute"; this._safeAreaContainer.style.bottom = "env(safe-area-inset-bottom)"; this._container = bw(this._safeAreaContainer, i) } else { this._container = bw(this._map.container, i) } } if (this._visible === false) { this._container.style.display = "none" } return this._container }, _setPosition: function () { this.setAnchor(this._opts.anchor) }, setAnchor: function (iV) { if (this.anchorFixed || typeof iV !== "number" || isNaN(iV) || iV < BMAP_ANCHOR_TOP_LEFT || iV > BMAP_ANCHOR_BOTTOM_RIGHT) { iV = this.defaultAnchor } this._opts.offset = this._opts.offset || this.defaultOffset; var T = this._opts.anchor; this._opts.anchor = iV; if (!this._container) { return } var iX = this._container; var e = this._opts.offset.width; var iW = this._opts.offset.height; iX.style.left = iX.style.top = iX.style.right = iX.style.bottom = "auto"; switch (iV) { case BMAP_ANCHOR_TOP_LEFT: iX.style.top = iW + "px"; iX.style.left = e + "px"; break; case BMAP_ANCHOR_TOP_RIGHT: iX.style.top = iW + "px"; iX.style.right = e + "px"; break; case BMAP_ANCHOR_BOTTOM_LEFT: iX.style.bottom = iW + "px"; iX.style.left = e + "px"; break; case BMAP_ANCHOR_BOTTOM_RIGHT: iX.style.bottom = iW + "px"; iX.style.right = e + "px"; break; default: break }var i = ["TL", "TR", "BL", "BR"]; ej.rc(this._container, "anchor" + i[T]); ej.ac(this._container, "anchor" + i[iV]) }, getAnchor: function () { return this._opts.anchor }, setOffset: function (e) { if (!e) { return } this._opts = this._opts || {}; this._opts.offset = new hS(e.width, e.height); if (!this._container) { return } this.setAnchor(this._opts.anchor) }, getOffset: function () { return this._opts.offset }, getDom: function () { return this._container }, show: function () { if (this._visible === true) { return } this._visible = true; if (this._container) { this._container.style.display = "" } this.dispatchEvent(new eX("onshow")) }, hide: function () { if (this._visible === false) { return } this._visible = false; if (this._container) { this._container.style.display = "none" } this.dispatchEvent(new eX("onhide")) }, isPrintable: function () { return !!this._opts.printable }, isVisible: function () { if (!this._container && !this._map) { return false } return !!this._visible }, _asyncLoadCode: function () { var e = this; f8.load("control", function () { if (e._asyncDraw) { e._asyncDraw() } }) } }); var dD = { TOP_LEFT: 0, TOP_RIGHT: 1, BOTTOM_LEFT: 2, BOTTOM_RIGHT: 3 }; bk.ControlAnchor = dD; window.BMAP_ANCHOR_TOP_LEFT = 0; window.BMAP_ANCHOR_TOP_RIGHT = 1; window.BMAP_ANCHOR_BOTTOM_LEFT = 2; window.BMAP_ANCHOR_BOTTOM_RIGHT = 3; function fj(e) { fQ.call(this); e = e || {}; this._opts = { printable: false }; ej.extend(this._opts, e); this._copyrightCollection = []; this.defaultAnchor = BMAP_ANCHOR_BOTTOM_LEFT; this.defaultOffset = new hS(5, 2); this.setAnchor(e.anchor); this._canShow = true; this.sateMapStyle = false; this.blockInfoWindow = false; this._asyncLoadCode() } fj.inherits(fQ, "CopyrightControl"); ej.extend(fj.prototype, { initialize: function (e) { this._map = e; return this._container }, addCopyright: function (iV) { var e = { minZoom: 0, bounds: null, content: "", mapType: "" }; for (var T in iV) { e[T] = iV[T] } if (this._map) { var iY = e.minZoom; if (iY === -1 || iY < this._map.getMinZoom() || iY > this._map.getMaxZoom()) { e.minZoom = this._map.getMinZoom() } if (e.mapType !== "" && !dG[e.mapType]) { e.mapType = BMAPGL_NORMAL_MAP } } var iW = this.getCopyright(iV.id); if (iW) { for (var iX in e) { iW[iX] = e[iX] } } else { this._copyrightCollection.push(e) } }, getCopyright: function (iV) { for (var T = 0, e = this._copyrightCollection.length; T < e; T++) { if (this._copyrightCollection[T].id === iV) { return this._copyrightCollection[T] } } }, addSateMapStyle: function () { this.sateMapStyle = true; if (this._container) { ej.ac(this._container, "BMap_cpyCtrl_w") } }, removeSateMapStyle: function () { this.sateMapStyle = false; if (this._container) { ej.rc(this._container, "BMap_cpyCtrl_w") } } }); function be(e) { fQ.call(this); e = e || {}; this.canCheckSize = e.canCheckSize === false ? false : true; this.curCityName = ""; this.curCityCode = ""; this.defaultOffset = new hS(10, 10); this.defaultAnchor = dD.TOP_LEFT; this.onChangeBefore = []; this.onChangeAfter = []; this.onChangeSuccess = []; this._opts = { printable: false, offset: e.offset || this.defaultOffset, anchor: e.anchor || this.defaultAnchor, expand: !!(e.expand) }; if (e.onChangeBefore && bC(e.onChangeBefore)) { this.onChangeBefore.push(e.onChangeBefore) } if (e.onChangeAfter && bC(e.onChangeAfter)) { this.onChangeAfter.push(e.onChangeAfter) } if (e.onChangeSuccess && bC(e.onChangeSuccess)) { this.onChangeSuccess.push(e.onChangeSuccess) } this.setAnchor(e.anchor); this._asyncLoadCode() } be.inherits(fQ, "CityListControl"); ej.extend(be.prototype, { initialize: function (e) { this._map = e; return this._container } }); function iU(e) { fQ.call(this); e = e || {}; this._opts = { printable: false }; this._opts = ej.extend(ej.extend(this._opts, { unit: "metric" }), e); this.defaultAnchor = BMAP_ANCHOR_BOTTOM_LEFT; this.defaultOffset = new hS(81, 18); if (bF()) { this.defaultOffset = new hS(75, 10) } this.setAnchor(e.anchor); this._units = { metric: { name: "metric", conv: 1, incon: 1000, u1: "米", u2: "公里" }, us: { name: "us", conv: 3.2808, incon: 5280, u1: "英尺", u2: "英里" } }; this.sateMapStyle = false; if (!this._units[this._opts.unit]) { this._opts.unit = "metric" } this._scaleText = null; this._numberArray = {}; this._asyncLoadCode() } window.BMAP_UNIT_METRIC = "metric"; window.BMAP_UNIT_IMPERIAL = "us"; iU.inherits(fQ, "ScaleControl"); ej.extend(iU.prototype, { initialize: function (e) { this._map = e; return this._container }, setUnit: function (e) { this._opts.unit = this._units[e] && this._units[e].name || this._opts.unit }, getUnit: function () { return this._opts.unit }, addSateMapStyle: function () { this.sateMapStyle = true; var e = this._container; if (e) { ej.ac(e.children[0], "dark") } }, removeSateMapStyle: function () { this.sateMapStyle = false; var e = this._container; if (e) { ej.rc(e.children[0], "dark") } } }); window.BMAP_NAVIGATION_CONTROL_LARGE = 0; window.BMAP_NAVIGATION_CONTROL_SMALL = 1; window.BMAP_NAVIGATION_CONTROL_PAN = 2; window.BMAP_NAVIGATION_CONTROL_ZOOM = 3; window.BMAP_NAVIGATION_CONTROL_ANIM = 4; function ir(e) { fQ.call(this); e = e || {}; this._opts = { printable: false }; ej.extend(this._opts, e); this.controlHeight = [{ width: 65, height: 227, zoomHeight: 227, zoomWidth: 37, sliderHeight: 180 }, { width: 65, height: 47, zoomHeight: (this._opts.forceNew === true) ? 56 : 47, zoomWidth: 37, sliderHeight: 0 }, { width: 37, height: 57, zoomHeight: 0, zoomWidth: 0, sliderHeight: 0 }, { width: 26, height: 56, zoomHeight: 56, zoomWidth: 6, sliderHeight: 0 }, { width: 56, height: 47, zoomHeight: 47, zoomWidth: 37, sliderHeight: 180 }]; this.defaultAnchor = BMAP_ANCHOR_TOP_LEFT; this.defaultOffset = new hS(10, 10); this.setAnchor(e.anchor); this.setType(e.type); this._maxTotalZoomLv = 19; this._minZoomLevel = -1; this._maxZoomLevel = -1; this._totalZoomLv = -1; this._sliderInterval = 10; this._sliderHeight = 180; this._minBarY = 1; this._maxBarY = -1; this._curBarY = -1; this._zoomDom = null; this._zoomBtnDom = null; this._sliderDom = null; this._sliderBaseDom = null; this._cZIndex = "1100"; this._asyncLoadCode() } ir.inherits(fQ, "NavigationControl"); ej.extend(ir.prototype, { initialize: function (e) { this._map = e; return this._container }, setType: function (e) { if (typeof e == "number" && e >= BMAP_NAVIGATION_CONTROL_LARGE && e <= BMAP_NAVIGATION_CONTROL_ANIM) { this._opts.type = e } else { this._opts.type = BMAP_NAVIGATION_CONTROL_LARGE } }, getType: function () { return this._opts.type } }); function s(i) { fQ.call(this); i = i || {}; this._opts = { printable: false }; this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT; this.defaultOffset = new hS(10, 10); this.setAnchor(i.anchor); this._opts = ej.extend(ej.extend(this._opts, { offset: this.defaultOffset, enableSwitch: true }), i); var e = this; f8.load("control", function () { e._asyncDraw() }) } s.inherits(fQ, "MapTypeControl"); ej.extend(s.prototype, { initialize: function (e) { this._map = e; return this._container }, showStreetLayer: function (e) { this._map.showStreetLayer(e) } }); function h2(e) { fQ.call(this); e = e || {}; this._opts = {}; this._opts = ej.extend(this._opts, e); this._zoomInDisabled = false; this._zoomOutDisabled = false; this._zoomInTapped = false; this._zoomOutTapped = false; this.defaultAnchor = dD.BOTTOM_RIGHT; this.defaultOffset = new hS(15, 20); this.setAnchor(e.anchor); this._asyncLoadCode() } h2.inherits(fQ, "ZoomControl"); ej.extend(h2.prototype, { initialize: function (e) { this._map = e; return this._container } }); function fz(e) { fQ.call(this); e = e || {}; this._opts = { autoZoom: true, autoViewport: true }; this._opts = ej.extend(this._opts, e); this.defaultAnchor = dD.BOTTOM_LEFT; this.defaultOffset = new hS(10, 50); this.watchPosition = this._opts.watchPosition || false; this.useCompass = this._opts.useCompass || false; this.locMarker = null; this.locLevel = 16; this.setAnchor(this._opts.anchor); this.onLocationStart = e.onLocationStart || null; this._asyncLoadCode() } fz.inherits(fQ, "LocationControl"); ej.extend(fz.prototype, { initialize: function (e) { this._map = e; return this._container }, startLocation: function () { this._startLocationCalled = true }, stopLocationTrace: function () { }, setOptions: function (e) { e = e || {}; ej.extend(this._opts, e) } }); function bn(e) { fQ.call(this); e = e || {}; this._opts = {}; this._opts = ej.extend(this._opts, e); this.defaultAnchor = dD.BOTTOM_LEFT; this.defaultOffset = new hS(5, 15); if (bF()) { this.defaultOffset = new hS(10, 10) } this.setAnchor(e.anchor) } bn.inherits(fQ, "LogoControl"); ej.extend(bn.prototype, { initialize: function (i) { this._map = i; var e = this._container = document.createElement("div"); e.innerHTML = '<img src="' + u.apiHost + '/images/logo_hd.png"  style="height:21px;width:62px;"/>'; i.getContainer().appendChild(e); return e } }); function aj(e, i) { this._map = e; this._indoorInfo = i; this._visible = true; this._adjustVisible = true; this._isMobile = bF(); this._sizeConfig = { FLOOR_BTN_HEIGHT: this._isMobile ? 35 : 26, SWITCH_ARROW_HEIGHT: this._isMobile ? 20 : 15 }; this._init() } aj.prototype._init = function () { this._render(); this._bindDom(); this._bind(); this._adjustDisplayHeight(); var e = new eX("onindoor_bar_show"); e.uid = this._indoorInfo.uid; this._map.dispatchEvent(e) }; aj.prototype._render = function () { if (!this._indoorInfo) { return } var iZ = this._isMobile; var e = this._div = bG("div"); ej.ac(e, "floor-select-container"); iZ && ej.ac(e, "mobile"); iZ && ej.ac(e, "all-border-radius"); var i = this._btnTop = bG("button"); ej.ac(i, "floor-switch-top"); ej.ac(i, "top-border-radius"); var iX = bG("div"); ej.ac(iX, "floor-switch-top-icon"); i.appendChild(iX); var iW = this._btnBottom = bG("button"); var T = bG("div"); ej.ac(T, "floor-switch-bottom-icon"); iW.appendChild(T); ej.ac(iW, "floor-switch-bottom"); ej.ac(iW, "bottom-border-radius"); var iV = this._floorsContainer = bG("div"); ej.ac(iV, "floors-container"); iV.appendChild(this._createFloorsDom()); this._div.appendChild(i); this._div.appendChild(iV); this._div.appendChild(iW); var i0 = 0; if (this._btnTop.style.display === "") { i0 = 2 * this._sizeConfig.SWITCH_ARROW_HEIGHT } this._div.style.height = parseInt(this._floorsContainer.style.height, 10) + i0 + "px"; this._map.getContainer().appendChild(this._div); if (!iZ) { var iY = this; setTimeout(function () { iY._div.style.right = "20px" }, 20) } }; aj.prototype._createFloorsDom = function () { if (!this._indoorInfo) { return } var T = this._ol = bG("ol"); var iX = this._indoorInfo.currentFloor; for (var iW = this._indoorInfo.floors.length - 1; iW >= 0; iW--) { var iY = this._indoorInfo.floors[iW].floorName; var e = bG("li"); var iV = bG("button"); ej.ac(iV, "btn-select-floor"); if (iW === iX) { ej.ac(iV, "selected") } iV.setAttribute("data-floor", iW); iV.innerHTML = iY; e.appendChild(iV); T.appendChild(e) } return T }; aj.prototype._updateUI = function () { if (!this._ol) { this._render(); this._bind(); this._adjustDisplayHeight(); return } this._ol = null; this._ol = this._createFloorsDom(); this._floorsContainer.innerHTML = ""; this._floorsContainer.appendChild(this._ol); this._adjustDisplayHeight() }; aj.prototype._bindDom = function () { var e = this; ej.on(this._floorsContainer, "click", function (iV) { var T = iV.target || iV.srcElement; if (T.tagName.toLowerCase() === "button") { e._map.showIndoor(e._indoorInfo.uid, parseInt(T.getAttribute("data-floor"), 10)); var i = new eX("onindoor_bar_click"); i.uid = e._indoorInfo.uid; e._map.dispatchEvent(i) } }); ej.on(this._floorsContainer, "mouseover", function (T) { var i = T.target; if (i.tagName.toLowerCase() === "button") { ej.ac(i, "hover") } }); ej.on(this._floorsContainer, "mouseout", function (T) { var i = T.target; if (i.tagName.toLowerCase() === "button") { ej.rc(i, "hover") } }); ej.on(this._floorsContainer, "touchstart", function (T) { var i = T.target; if (i.tagName.toLowerCase() === "button") { ej.ac(i, "onmousedown") } }); ej.on(this._floorsContainer, "touchend", function (T) { var i = T.target; if (i.tagName.toLowerCase() === "button") { ej.rc(i, "onmousedown") } }); ej.on(this._btnTop, "mouseover", function (i) { if (this._disable) { return } ej.ac(this, "hover") }); ej.on(this._btnTop, "mouseout", function (i) { ej.rc(this, "hover") }); ej.on(this._btnBottom, "mouseover", function (i) { if (this._disable) { return } ej.ac(this, "hover") }); ej.on(this._btnBottom, "mouseout", function (i) { ej.rc(this, "hover") }); ej.on(this._btnTop, "touchstart", function (i) { if (this.className.indexOf("disable") > -1) { return } ej.ac(this, "onmousedown") }); ej.on(this._btnTop, "touchend", function (i) { ej.rc(this, "onmousedown") }); ej.on(this._btnBottom, "touchstart", function (i) { if (this.className.indexOf("disable") > -1) { return } ej.ac(this, "onmousedown") }); ej.on(this._btnBottom, "touchend", function (i) { ej.rc(this, "onmousedown") }); ej.on(this._btnTop, "click", function (i) { e._setBarSliderTop(parseInt(e._ol.style.top, 10) + 26) }); ej.on(this._btnBottom, "click", function (i) { e._setBarSliderTop(parseInt(e._ol.style.top, 10) - 26) }); ej.on(this._div, "mousemove", aa); ej.on(this._div, "wheel", gs); ej.on(this._div, "mousewheel", gs); this._map.addEventListener("resize", function () { e._adjustDisplayHeight() }) }; aj.prototype._adjustDisplayHeight = function () { if (!this._indoorInfo) { return } var iX = this._map.getSize().height; var iY = this._sizeConfig.FLOOR_BTN_HEIGHT; var iZ = iX - 291 - 100; if (this._isMobile) { iZ = iX - 12 - 108 - this._map.config.bottomOffset } var e = this._indoorInfo.floors.length; var T = e * iY; var iV = e; var i1 = 0; var i2 = this._floorsContainer.children[0]; if (T > iZ) { this._showArrow = true; ej.rc(i2.children[0].children[0], "top-border-radius"); ej.rc(i2.children[e - 1].children[0], "bottom-border-radius") } else { this._showArrow = false; ej.ac(i2.children[0].children[0], "top-border-radius"); ej.ac(i2.children[e - 1].children[0], "bottom-border-radius") } while (T > iZ) { if (iV === 0) { break } iV--; i1 = 2 * this._sizeConfig.SWITCH_ARROW_HEIGHT; T = iV * iY + i1 } this._currentDisplayHeight = T; if (iV < 3) { this._setAdjustVisbile(false) } else { this._setAdjustVisbile(true) } this._floorsContainer.style.height = iV * iY + "px"; var iW = this._indoorInfo.currentFloor; var i = e - iW; var i0 = iW - 1; this._div.style.height = parseInt(this._floorsContainer.style.height, 10) + i1 + "px"; var i3 = -(e - (iW + Math.round(iV / 2))) * iY; this._setBarSliderTop(i3); if (iV < e) { ej.show(this._btnTop); ej.show(this._btnBottom) } else { ej.hide(this._btnTop); ej.hide(this._btnBottom); this._setBarSliderTop(0) } if (this._isMobile) { this._div.style.bottom = 108 + this._map.config.bottomOffset + "px" } }; aj.prototype._setBarSliderTop = function (iV) { var T = 26; var i = this._indoorInfo.floors.length; var e = i * T; if (this._currentDisplayHeight) { if (this._showArrow) { e = this._currentDisplayHeight - 30 } else { e = this._currentDisplayHeight } } if (e - iV >= i * T) { iV = e - i * T; ej.ac(this._btnBottom, "disable"); ej.rc(this._btnBottom, "hover"); this._btnBottom._disable = true } else { ej.rc(this._btnBottom, "disable"); this._btnBottom._disable = false } if (iV >= 0) { iV = 0; ej.ac(this._btnTop, "disable"); ej.rc(this._btnTop, "hover"); this._btnTop._disable = true } else { ej.rc(this._btnTop, "disable"); this._btnTop._disable = false } this._ol.style.top = iV + "px" }; aj.prototype._setAdjustVisbile = function (e) { if (this._adjustVisible === e) { return } this._adjustVisible = e; if (e && this._visible) { this._div.style.right = "20px" } else { this._div.style.right = "-30px" } }; aj.prototype._bind = function () { var i = this._map; var e = this; i.on("indoor_status_changed", function (iZ) { if (e._visible === false) { return } var T = e._ol; var iX = iZ.uid; if (!iX) { return } var iY = iZ.floor; for (var iW = 0; iW < T.children.length; iW++) { var iV = T.children[iW].children[0]; if (parseInt(iV.getAttribute("data-floor"), 10) === iY) { ej.ac(iV, "selected") } else { ej.rc(iV, "selected") } } }); i.on("zoomend", function (T) { if (this.getZoom() < 17) { e._setAdjustVisbile(false) } else { e._setAdjustVisbile(true) } }) }; aj.prototype.setInfo = function (e) { if (this._indoorInfo && this._indoorInfo.uid === e.uid) { return } this._indoorInfo = e; this._updateUI() }; aj.prototype.show = function () { if (this._visible === true) { return } this._visible = true; if (!this._isMobile) { this._div.style.right = "20px" } else { this._div.style.display = "" } var e = new eX("onindoor_bar_show"); e.uid = this._indoorInfo.uid; this._map.dispatchEvent(e) }; aj.prototype.hide = function () { if (this._visible === false) { return } this._visible = false; if (!this._isMobile) { this._div.style.right = "-30px" } else { this._div.style.display = "none" } }; function el(e) { this._opts = e || {}; this.defaultOffset = new hS(2, 80); this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT; if (this._opts.anchor === undefined) { this.setAnchor(this.defaultAnchor) } else { this.setAnchor(this._opts.anchor) } this._firstAnimation = true } el.inherits(fQ, "NavigationControl3D"); ej.extend(el.prototype, { initialize: function (T) { this._map = T; this._createDom(); this._bindDom(); this._bind(); if (!bF()) { this._headingControl = new hA(this._map, this._div) } this._tiltControl = new cq(this._map, this._div); this._render(); var i = this._map.getMapType(); var e = this; if (i === "B_EARTH_MAP" || this._map._renderType === "webgl") { e._div.style.opacity = "1"; e._div.style.visibility = "visible" } else { e._div.style.opacity = "0"; e._div.style.visibility = "hidden" } return this._container }, _createDom: function () { var i = this._div = document.createElement("div"); this._container = i; var e = i.style; e.position = "absolute"; e.zIndex = 5; e.width = "52px"; e.height = "82px"; e.right = "-3px"; e.bottom = "79px"; e.opacity = "0"; e.visibility = "hidden"; e.WebkitTransition = e.transition = "opacity .3s ease-out,visibility .3s ease-out" }, _render: function () { var e = document.getElementById("map-operate"); if (e) { e.appendChild(this._div) } else { this._map.getContainer().appendChild(this._div) } }, _bindDom: function () { this._div.addEventListener("mousemove", aa) }, _bind: function () { if (this._map._renderType === "webgl") { return } var e = this; this._map.on("maptypechange", function () { if (this.mapType === "B_EARTH_MAP") { if (e._firstAnimation) { e._firstAnimation = false; setTimeout(function () { e._div.style.opacity = "1"; e._div.style.visibility = "visible" }, 300) } else { e._div.style.opacity = "1"; e._div.style.visibility = "visible" } } else { e._div.style.opacity = "0"; e._div.style.visibility = "hidden" } }) } }); function hA(T, i) { this._map = T; this._target = T; var iV = T.temp.originMapType || T.mapType; if (iV === "B_EARTH_MAP" && T._earth) { this._target = T._earth } this._outContainer = i || T.getContainer(); this._imgRatio = fp() >= gL.HIGH_RES_MIN_RATIO ? 2 : 1; this._imgPath = u.imgPath + "earth-navi-control-pc4" + (this._imgRatio === 2 ? "-2x.png" : ".png"); this._enabled = true; var e = this; this._setHeadingOptions = { callback: function () { e._target.setLock(false) } }; this._init() } ej.extend(hA.prototype, { _init: function () { this._createDom(); this._render(); this._bindDom(); this._bind(); this._updateUI(); this._checkEnable() }, _checkEnable: function () { if (this._target.getZoom() >= this._target._enableHeadingZoom) { this.enable() } else { this.disable() } }, _createDom: function () { var i = this._div = bG("div"); var e = i.style; e.position = "absolute"; e.zIndex = 5; e.top = "0"; e.left = "0"; e.width = "52px"; e.height = "54px"; e.background = "url(" + this._imgPath + ") no-repeat"; e.backgroundSize = "266px auto"; this._rotateCCW = this._createButton(); this._rotateCCW.title = "逆时针转动"; e = this._rotateCCW.style; e.left = "2px"; e.top = "5px"; e.zIndex = "1"; e.width = "15px"; e.height = "42px"; e.backgroundPosition = "-75px -5px"; this._rotateCW = this._createButton(); this._rotateCW.title = "顺时针转动"; e = this._rotateCW.style; e.right = "2px"; e.top = "5px"; e.zIndex = "1"; e.width = "15px"; e.height = "42px"; e.backgroundPosition = "-75px -5px"; e.WebkitTransform = e.transform = "scaleX(-1)"; this._compass = this._createButton(); this._compass.title = "恢复正北方向"; e = this._compass.style; e.left = "19px"; e.top = "4px"; e.width = "14px"; e.height = "44px"; e.backgroundPosition = "-56px -4px"; e.WebkitTransform = e.transform = "rotate(0deg)"; this._div.appendChild(this._rotateCCW); this._div.appendChild(this._compass); this._div.appendChild(this._rotateCW); this._domRendered = true }, _createButton: function () { var e = bG("button"); var i = e.style; i.position = "absolute"; i.outline = "none"; i.border = "none"; i.background = "url(" + this._imgPath + ") no-repeat"; i.backgroundSize = "266px auto"; i.cursor = "pointer"; return e }, _render: function () { this._outContainer.appendChild(this._div) }, enable: function () { this._enabled = true; if (this._domRendered) { this._rotateCCW.style.cursor = "pointer"; this._rotateCCW.style.opacity = 1; this._rotateCW.style.cursor = "pointer"; this._rotateCW.style.opacity = 1; this._compass.style.cursor = "pointer"; this._compass.style.opacity = 1 } }, disable: function () { this._enabled = false; if (this._domRendered) { this._rotateCCW.style.cursor = ""; this._rotateCCW.style.opacity = 0.4; this._rotateCW.style.cursor = ""; this._rotateCW.style.opacity = 0.4; this._compass.style.cursor = ""; this._compass.style.opacity = 0.4 } }, _bindDom: function () { hu(this._div, ["mousedown", "click", "dblclick"]); var i = this._map; var e = this; this._rotateCW.addEventListener("click", function () { if (e._isOperating || e._enabled === false) { return } if (e._target.getLock()) { return } if (e._target.getHeading() === 360) { e._target.setHeading(0) } e._target.setLock(true); e._target.setHeading(e._target.getHeading() + 90, e._setHeadingOptions); i.fire(new eX("onrotatecwclick")) }, false); this._rotateCCW.addEventListener("click", function () { if (e._isOperating || e._enabled === false) { return } if (e._target.getLock()) { return } if (e._target.getHeading() === -360) { e._target.setHeading(0) } e._target.setLock(true); e._target.setHeading(e._target.getHeading() - 90, e._setHeadingOptions); i.fire(new eX("onrotateccwclick")) }, false); this._rotateCW.addEventListener("mouseover", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-89px -5px" }, false); this._rotateCW.addEventListener("mouseout", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-75px -5px" }, false); this._rotateCCW.addEventListener("mouseover", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-89px -5px" }, false); this._rotateCCW.addEventListener("mouseout", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-75px -5px" }, false); this._compass.addEventListener("click", function () { if (e._isOperating || e._enabled === false) { return } if (e._target.getLock()) { return } e._target.setLock(true); var T = false; if (e._target.getTilt() !== 0) { T = true; e._target.setTilt(0, e._setHeadingOptions) } if (e._target.getHeading() % 360 !== 0) { T = true; e._target.resetHeading(e._setHeadingOptions) } if (!T) { e._target.setLock(false) } i.fire(new eX("oncompassclick")) }, false) }, _bind: function () { var e = this; this._bindTarget(this._target); if (this._map._renderType === "webgl") { this._map.addEventListener("maptypechange", function (i) { if (this.mapType === "B_EARTH_MAP") { e._target = e._map._earth } else { e._target = e._map } e._bindTarget(e._target); e._checkEnable() }) } }, _bindTarget: function (i) { if (i === this._map && this._mapBinded) { return } if (i === this._map._earth && this._earthBinded) { return } var e = this; i.addEventListener("heading_changed", function (T) { e._updateUI() }); i.addEventListener("animation_start", function (T) { e._isOperating = true }); i.addEventListener("animation_end", function (T) { e._isOperating = false }); i.on("load", function () { e._checkEnable() }); i.on("zoom_changed", function () { e._checkEnable() }); if (i === this._map) { this._mapBinded = true } else { this._earthBinded = true } }, _updateUI: function () { var e = this._target.getHeading(); var i = this._compass.style; i.WebkitTransform = i.transform = "rotate(" + e + "deg)" }, hide: function () { this._div.style.display = "none" }, show: function () { this._div.style.display = "block" } }); function cq(T, i) { this._map = T; this._target = T; var iV = T.temp.originMapType || T.mapType; if (iV === "B_EARTH_MAP" && T._earth) { this._target = T._earth } this._outContainer = i || T.getContainer(); this._imgRatio = fp() >= gL.HIGH_RES_MIN_RATIO ? 2 : 1; this._imgPath = u.imgPath + "gl-navi-control-pc4" + (this._imgRatio === 2 ? "-2x.png" : ".png"); this._enabled = true; var e = this; this._setTiltOptions = { callback: function () { e._target.setLock(false) } }; this._init() } ej.extend(cq.prototype, { _init: function () { this._createDom(); this._render(); this._bindDom(); this._bind(); this._checkEnable() }, _checkEnable: function () { if (this._target.getZoom() >= this._target._enableTiltZoom) { this.enable() } else { this.disable() } }, _createDom: function () { var e = this._div = bG("button"); e.title = "倾斜"; var i = e.style; i.position = "absolute"; i.zIndex = 5; i.outline = "none"; i.border = "none"; i.cursor = "pointer"; i.width = "26px"; i.height = "26px"; i.top = "56px"; i.right = "13px"; i.background = "url(" + this._imgPath + ") no-repeat #fff"; i.backgroundSize = "266px auto"; i.backgroundPosition = "-110px 1px"; i.boxShadow = "1px 2px 1px rgba(0, 0, 0, 0.15)" }, enable: function () { this._enabled = true; if (this._div) { this._div.style.cursor = "pointer" } this._updateUI() }, disable: function () { this._enabled = false; if (this._div) { this._div.style.cursor = "" } this._updateUI() }, _render: function () { this._outContainer.appendChild(this._div) }, _bindDom: function () { var e = this; this._div.addEventListener("mousedown", function (iV) { if (!e._enabled) { return } if (e._target.getLock()) { return } var i = e._target.getTilt(); var T; if (i === e._map.getCurrentMaxTilt()) { T = "out" } else { if (i === 0) { T = "in" } else { T = e._preTrend ? e._preTrend : "in" } } e._curTrend = T; e._clickTimer = setTimeout(function () { e._map.fire(new eX("ontiltmsdown")); e._tiltAni = new eQ({ duration: 9999999, render: function (iW) { i = e._target.getTilt(); if (T === "in" && i < e._map.getCurrentMaxTilt()) { e._target.setTilt(i + 1, { noAnimation: true }) } else { if (T === "out" && i > 0) { e._target.setTilt(i - 1, { noAnimation: true }) } } }, finish: function () { e._tiltAni = null } }); e._clickTimer = null }, 200); iV.stopPropagation() }, false); this._div.addEventListener("mouseup", function (i) { if (!e._enabled) { return } if (e._tiltAni) { e._tiltAni.stop() } e._preTrend = e._curTrend }, false); this._div.addEventListener("click", function (iV) { if (!e._enabled) { return } if (!e._clickTimer) { return } if (e._target.getLock()) { return } clearTimeout(e._clickTimer); e._map.fire(new eX("ontiltclick")); var i = e._target.getTilt(); e._target.setLock(true); iV.stopPropagation(); var T = e._map.getCurrentMaxTilt(); if (e._curTrend === "in") { e._target.setTilt(T, e._setTiltOptions) } else { if (e._curTrend === "out") { e._target.setTilt(0, e._setTiltOptions) } else { if (i < T) { e._target.setTilt(T, e._setTiltOptions) } else { e._target.setTilt(0, e._setTiltOptions) } } } }, false); this._div.addEventListener("mouseover", function (i) { if (!e._enabled) { return } e._mouseOver = true; e._updateUI() }, false); this._div.addEventListener("mouseout", function (i) { if (!e._enabled) { return } e._mouseOver = false; e._updateUI() }, false); hu(this._div, ["mousedown", "click", "dblclick"]) }, _bind: function () { var e = this; var i = this._map; this._bindTarget(this._target); if (this._map._renderType === "webgl") { this._map.addEventListener("maptypechange", function (T) { if (this.mapType === "B_EARTH_MAP") { e._target = e._map._earth } else { e._target = e._map } e._bindTarget(e._target); e._checkEnable() }) } }, _bindTarget: function (i) { if (i === this._map && this._mapBinded) { return } if (i === this._map._earth && this._earthBinded) { return } var e = this; i.on("load", function () { e._checkEnable() }); i.on("zoom_changed", function () { e._checkEnable() }); i.on("tilt_changed", function () { e._updateUI() }); if (i === this._map) { this._mapBinded = true } else { this._earthBinded = true } }, _updateUI: function () { var T = this._target.getTilt(); var i = 0; var iV = 0; var e = 0; if (T > 0) { i = 78 } if (this._mouseOver) { e = 52 } if (this._enabled === false) { iV = 26; e = 0; i = 0 } var iW = "-" + (110 + i + iV + e) + "px 1px"; this._div && (this._div.style.backgroundPosition = iW); if (this._enabled) { if (T > 0) { this._div && (this._div.title = "恢复") } else { this._div && (this._div.title = "倾斜") } } else { this._div && (this._div.title = "请放大地图后操作") } }, hide: function () { this._div.style.display = "none" }, show: function () { this._div.style.display = "block" } }); function gp(i) { cD.call(this); this._opts = { container: null, cursor: "default" }; this._opts = ej.extend(this._opts, i); this._type = "contextmenu"; this._map = null; this._container; this._left = 0; this._top = 0; this._items = []; this._rItems = []; this._dividers = []; this._enable = true; this.curPixel = null; this.curPoint = null; this._isOpen = false; var e = this; f8.load("menu", function () { e._draw() }) } gp.inherits(cD, "ContextMenu"); ej.extend(gp.prototype, { initialize: function (e) { this._map = e }, remove: function () { this._map = null }, addItem: function (iW, e) { if (!iW || iW._type != "menuitem" || iW._text == "" || iW._width <= 0) { return } for (var iV = 0, T = this._items.length; iV < T; iV++) { if (this._items[iV] === iW) { return } } if (e === undefined || e > this._items.length - 1) { e = -1 } iW._insertIndex = e; if (e === -1) { this._items.push(iW); this._rItems.push(iW) } else { this._items.splice(e, 0, iW); this._rItems.splice(e, 0, iW) } }, removeItem: function (iV) { if (!iV || iV._type != "menuitem") { return } for (var T = 0, e = this._items.length; T < e; T++) { if (this._items[T] === iV) { this._items[T].remove(); this._items.splice(T, 1); delete iV._insertIndex; e-- } } for (var T = 0, e = this._rItems.length; T < e; T++) { if (this._rItems[T] === iV) { this._rItems[T].remove(); this._rItems.splice(T, 1); delete iV._insertIndex; e-- } } }, addSeparator: function (e) { if (e === undefined || e > this._items.length - 1) { e = -1 } var i = { _type: "divider", _dIndex: this._dividers.length, _insertIndex: e }; this._dividers.push({ dom: null }); if (e === -1) { this._items.push(i) } else { this._items.splice(e, 0, i) } }, removeSeparator: function (T) { if (!this._dividers[T]) { return } for (var iV = 0, e = this._items.length; iV < e; iV++) { if (this._items[iV] && this._items[iV]._type == "divider" && this._items[iV]._dIndex == T) { this._items.splice(iV, 1); e-- } if (this._items[iV] && this._items[iV]._type == "divider" && this._items[iV]._dIndex > T) { this._items[iV]._dIndex-- } } this._dividers.splice(T, 1) }, getDom: function () { return this._container }, show: function () { if (this._isOpen == true) { return } this._isOpen = true }, hide: function () { if (this._isOpen == false) { return } this._isOpen = false }, setCursor: function (e) { if (!e) { return } this._opts.cursor = e }, getItem: function (e) { return this._rItems[e] }, enable: function () { this._enable = true }, disable: function () { this._enable = false } }); function gX(T, iV, i) { if (!T || !iV || typeof iV != "function") { return } cD.call(this); this._opts = { width: 100, id: "" }; i = i || {}; this._opts.width = (i.width * 1) ? i.width : 100; this._opts.id = i.id ? i.id : ""; this._text = T + ""; this._callback = iV; this._map = null; this._type = "menuitem"; this._contextmenu = null; this._container = null; this._enabled = true; var e = this; f8.load("menu", function () { e._draw() }) } gX.inherits(cD, "MenuItem"); ej.extend(gX.prototype, { initialize: function (e, i) { this._map = e; this._contextmenu = i }, remove: function () { this._contextmenu = null; this._map = null }, setText: function (e) { if (!e) { return } this._text = e + "" }, getDom: function () { return this._container }, enable: function () { this._enabled = true }, disable: function () { this._enabled = false } }); function g0(e, i) { this.setSouthWest(e); this.setNorthEast(i) } ej.extend(g0.prototype, { isEmpty: function () { return this.sw === null && this.ne === null }, equals: function (e) { if (!e || e.isEmpty() || this.isEmpty()) { return false } return this.sw.equals(e.sw) && this.ne.equals(e.ne) }, containsBounds: function (e) { if (!e || e.isEmpty() || this.isEmpty()) { return false } return (e.sw.lng > this.sw.lng && e.ne.lng < this.ne.lng && e.sw.lat > this.sw.lat && e.ne.lat < this.ne.lat) }, getCenter: function () { if (this.isEmpty()) { return null } return new b8((this.sw.lng + this.ne.lng) / 2, (this.sw.lat + this.ne.lat) / 2) }, intersects: function (T) { if (!T || T.isEmpty() || this.isEmpty()) { return null } if (Math.max(T.sw.lng, T.ne.lng) < Math.min(this.sw.lng, this.ne.lng) || Math.min(T.sw.lng, T.ne.lng) > Math.max(this.sw.lng, this.ne.lng) || Math.max(T.sw.lat, T.ne.lat) < Math.min(this.sw.lat, this.ne.lat) || Math.min(T.sw.lat, T.ne.lat) > Math.max(this.sw.lat, this.ne.lat)) { return null } var iW = Math.max(this.sw.lng, T.sw.lng); var i = Math.min(this.ne.lng, T.ne.lng); var iV = Math.max(this.sw.lat, T.sw.lat); var e = Math.min(this.ne.lat, T.ne.lat); return new g0(new b8(iW, iV), new b8(i, e)) }, setMinMax: function () { this.minX = this.sw ? this.sw.lng : null; this.minY = this.sw ? this.sw.lat : null; this.maxX = this.ne ? this.ne.lng : null; this.maxY = this.ne ? this.ne.lat : null }, containsPoint: function (e) { if (!e) { return } return (e.lng >= this.sw.lng && e.lng <= this.ne.lng && e.lat >= this.sw.lat && e.lat <= this.ne.lat) }, extend: function (e) { if (!e) { return } var i = e.lng; var T = e.lat; if (!this.sw) { this.sw = e.clone() } if (!this.ne) { this.ne = e.clone() } if (this.sw.lng > i) { this.sw.lng = i } if (this.ne.lng < i) { this.ne.lng = i } if (this.sw.lat > T) { this.sw.lat = T } if (this.ne.lat < T) { this.ne.lat = T } }, getMin: function () { return this.sw }, getMax: function () { return this.ne }, getSouthWest: function () { return this.sw }, getNorthEast: function () { return this.ne }, setSouthWest: function (e) { this.sw = e ? e.clone() : null }, setNorthEast: function (e) { this.ne = e ? e.clone() : null }, clone: function () { return new g0(this.sw, this.ne) }, toSpan: function () { if (this.isEmpty()) { return new hS(0, 0) } return new hS(Math.abs(this.ne.lng - this.sw.lng), Math.abs(this.ne.lat - this.sw.lat)) }, div: function (e) { if (!e || e.isEmpty() || this.isEmpty()) { return 0 } return ((this.ne.lng - this.sw.lng) * (this.ne.lat - this.sw.lat)) / ((e.ne.lng - e.sw.lng) * (e.ne.lat - e.sw.lat)) }, makeNormalizedPoint: function (e) { this.normalizedTopLeft = this.pointTopLeft.clone(); this.normalizedTopRight = this.pointTopRight.clone(); this.normalizedBottomRight = this.pointBottomRight.clone(); this.normalizedBottomLeft = this.pointBottomLeft.clone(); while (e < 0) { e += 360 } e = e % 360; if (e >= 0 && e < 90 || e >= 270 && e < 360) { if (this.normalizedTopRight.lng < this.normalizedTopLeft.lng) { this.normalizedTopRight.lng += gL.WORLD_SIZE_MC } if (this.normalizedBottomRight.lng < this.normalizedBottomLeft.lng) { this.normalizedBottomRight.lng += gL.WORLD_SIZE_MC } } else { if (this.normalizedTopLeft.lng < this.normalizedTopRight.lng) { this.normalizedTopLeft.lng += gL.WORLD_SIZE_MC } if (this.normalizedBottomLeft.lng < this.normalizedBottomRight.lng) { this.normalizedBottomLeft.lng += gL.WORLD_SIZE_MC } } }, toString: function () { return "Bounds" } }); function b8(e, i) { if (isNaN(e)) { e = cP(e); e = isNaN(e) ? 0 : e } if (typeof e === "string") { e = parseFloat(e) } if (isNaN(i)) { i = cP(i); i = isNaN(i) ? 0 : i } if (typeof i === "string") { i = parseFloat(i) } this.lng = e; this.lat = i } b8.prototype.equals = function (i) { if (!i) { return false } var iV = Math.abs(this.lat - i.lat); var T = Math.abs(this.lng - i.lng); var e = 1e-8; if (iV < e && T < e) { return true } return false }; b8.prototype.clone = function () { return new b8(this.lng, this.lat) }; b8.prototype.add = function (e) { return new b8(this.lng + e.lng, this.lat + e.lat) }; b8.prototype.sub = function (e) { return new b8(this.lng - e.lng, this.lat - e.lat) }; b8.prototype.mult = function (e) { return new b8(this.lng * e, this.lat * e) }; b8.prototype.div = function (e) { return new b8(this.lng / e, this.lat / e) }; b8.prototype.mag = function () { return Math.sqrt(this.lng * this.lng + this.lat * this.lat) }; b8.prototype.toString = function () { return "Point" }; function hZ() { } ej.extend(hZ, { EARTHRADIUS: 6370996.81, MCBAND: [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0], LLBAND: [86, 60, 45, 30, 15, 0], MC2LL: [[1.410526172116255e-8, 0.00000898305509648872, -1.9939833816331, 200.9824383106796, -187.2403703815547, 91.6087516669843, -23.38765649603339, 2.57121317296198, -0.03801003308653, 17337981.2], [-7.435856389565537e-9, 0.000008983055097726239, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 10260144.86], [-3.030883460898826e-8, 0.00000898305509983578, 0.30071316287616, 59.74293618442277, 7.357984074871, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6856817.37], [-1.981981304930552e-8, 0.000008983055099779535, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4482777.06], [3.09191371068437e-9, 0.000008983055096812155, 0.00006995724062, 23.10934304144901, -0.00023663490511, -0.6321817810242, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2555164.4], [2.890871144776878e-9, 0.000008983055095805407, -3.068298e-8, 7.47137025468032, -0.00000353937994, -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 826088.5]], LL2MC: [[-0.0015702102444, 111320.7020616939, 1704480524535203, -10338987376042340, 26112667856603880, -35149669176653700, 26595700718403920, -10725012454188240, 1800819912950474, 82.5], [0.0008277824516172526, 111320.7020463578, 647795574.6671607, -4082003173.641316, 10774905663.51142, -15171875531.51559, 12053065338.62167, -5124939663.577472, 913311935.9512032, 67.5], [0.00337398766765, 111320.7020202162, 4481351.045890365, -23393751.19931662, 79682215.47186455, -115964993.2797253, 97236711.15602145, -43661946.33752821, 8477230.501135234, 52.5], [0.00220636496208, 111320.7020209128, 51751.86112841131, 3796837.749470245, 992013.7397791013, -1221952.21711287, 1340652.697009075, -620943.6990984312, 144416.9293806241, 37.5], [-0.0003441963504368392, 111320.7020576856, 278.2353980772752, 2485758.690035394, 6070.750963243378, 54821.18345352118, 9540.606633304236, -2710.55326746645, 1405.483844121726, 22.5], [-0.0003218135878613132, 111320.7020701615, 0.00369383431289, 823725.6402795718, 0.46104986909093, 2351.343141331292, 1.58060784298199, 8.77738589078284, 0.37238884252424, 7.45]], getDistanceByMC: function (iX, iV) { if (!iX || !iV) { return 0 } var i; var iW; var e; var T; iX = this.convertMC2LL(iX); if (!iX) { return 0 } i = hw(iX.lng); iW = hw(iX.lat); iV = this.convertMC2LL(iV); if (!iV) { return 0 } e = hw(iV.lng); T = hw(iV.lat); return this.getDistance(i, e, iW, T) }, getDistanceByLL: function (iX, iV) { if (!iX || !iV) { return 0 } iX.lng = this.getLoop(iX.lng, -180, 180); iX.lat = this.getRange(iX.lat, -80, 84); iV.lng = this.getLoop(iV.lng, -180, 180); iV.lat = this.getRange(iV.lat, -80, 84); var i; var e; var iW; var T; i = hw(iX.lng); iW = hw(iX.lat); e = hw(iV.lng); T = hw(iV.lat); return this.getDistance(i, e, iW, T) }, proximityCovertMC2LL: function (e) { if (e === null) { return e } if (e.lng < 180 && e.lng > -180 && e.lat < 90 && e.lat > -90) { return e } return this.convertMC2LL(e) }, convertMC2LL: function (e) { if (e === null) { return e } if (!e) { return new b8(0, 0) } var T; var iW; T = new b8(Math.abs(e.lng), Math.abs(e.lat)); for (var iV = 0; iV < this.MCBAND.length; iV++) { if (T.lat >= this.MCBAND[iV]) { iW = this.MC2LL[iV]; break } } var iX = this.convertor(e, iW); return new b3(iX.lat, iX.lng) }, convertLL2MC: function (iY) { if (!iY) { return new b8(0, 0) } var i0 = iY.lat; var iV = iY.lng; iV = this.getLoop(iY.lng, -180, 180); i0 = bR(i0, -85, 85); var iX; for (var iW = 0; iW < this.LLBAND.length; iW++) { if (i0 >= this.LLBAND[iW]) { iX = this.LL2MC[iW]; break } } if (!iX) { for (iW = 0; iW < this.LLBAND.length; iW++) { if (i0 <= -this.LLBAND[iW]) { iX = this.LL2MC[iW]; break } } } var T = new b8(iV, i0); var iZ = this.convertor(T, iX); var e = new b8(iZ.lng, iZ.lat); e.latLng = new b3(iY.lat, iY.lng); return e }, convertor: function (T, iV) { if (!T || !iV) { return } var e = iV[0] + iV[1] * Math.abs(T.lng); var i = Math.abs(T.lat) / iV[9]; var iW = iV[2] + iV[3] * i + iV[4] * i * i + iV[5] * i * i * i + iV[6] * i * i * i * i + iV[7] * i * i * i * i * i + iV[8] * i * i * i * i * i * i; e *= (T.lng < 0 ? -1 : 1); iW *= (T.lat < 0 ? -1 : 1); return new b8(e, iW) }, getDistance: function (i, e, iV, T) { return this.EARTHRADIUS * Math.acos((Math.sin(iV) * Math.sin(T) + Math.cos(iV) * Math.cos(T) * Math.cos(e - i))) }, getRange: function (T, i, e) { if (i != null) { T = Math.max(T, i) } if (e != null) { T = Math.min(T, e) } return T }, getLoop: function (T, i, e) { while (T > e) { T -= e - i } while (T < i) { T += e - i } return T } }); ej.extend(hZ.prototype, { lnglatToMercator: function (e) { return hZ.convertLL2MC(e) }, lngLatToPoint: function (e) { var i = hZ.convertLL2MC(e); return new eB(i.lng, i.lat) }, mercatorToLnglat: function (e) { return hZ.convertMC2LL(e) }, pointToLngLat: function (i) { var e = new b8(i.x, i.y); var T = hZ.convertMC2LL(e); return new b3(T.lat, T.lng) }, pointToPixel: function (i, iX, iW, iV) { if (!i) { return } i = this.lnglatToMercator(i); var T = this.getZoomUnits(iX); var e = Math.round((i.lng - iW.lng) / T + iV.width / 2); var iY = Math.round((iW.lat - i.lat) / T + iV.height / 2); return new eB(e, iY) }, mercatorToPixel: function (iX, iW, iV, T) { if (!iX) { return } var i = this.getZoomUnits(iW); var e = Math.round((iX.lng - iV.lng) / i + T.width / 2); var iY = Math.round((iV.lat - iX.lat) / i + T.height / 2); return new eB(e, iY) }, pixelToPoint: function (iV, iY, iX, iW) { if (!iV) { return } var i = this.getZoomUnits(iY); var T = iX.lng + i * (iV.x - iW.width / 2); var iZ = iX.lat - i * (iV.y - iW.height / 2); var e = new b8(T, iZ); return this.mercatorToLnglat(e) }, tileToBound: function (iV, iZ) { var i = iV.col; var i2 = iV.row; var i1 = iV.baseTileSize; var i0 = this.getZoomUnits(iV.zoom); var T = { x: Math.round(iZ.lng / i0), y: Math.round(iZ.lat / i0) }; var iX = { lbx: i * i1, lby: i2 * i1, rtx: (i + 1) * i1, rty: (i2 + 1) * i1 }; var e = { lbx: iZ.lng + (iX.lbx - T.x) * i0, lby: iZ.lat + (iX.lby - T.y) * i0, rtx: iZ.lng + (iX.rtx - T.x) * i0, rty: iZ.lat + (iX.rty - T.y) * i0 }; var iW = hZ.convertMC2LL(new b8(e.lbx, e.lby)); var iY = hZ.convertMC2LL(new b8(e.rtx, e.rty)); return { MC: new g0(new b8(e.lbx, e.lby), new b8(e.rtx, e.rty)), LL: new g0(iW, iY) } }, getZoomUnits: function (e) { return Math.pow(2, (18 - e)) }, setCoordType: function (e) { this.coordsType = e } }); function c3() { } ej.extend(c3, { RADIUS: 6378137, EXTENT4326: [-180, -90, 180, 90], WORLD_EXTENT: [-180, -85, 180, 85], HALF_SIZE: 20037508.342789244, METERS_PER_UNIT: 111319.49079327358, EXTENT3857: [-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244], MAX_SAFE_Y: 238107693.26496765, origin: [-20037508.342789244, 20037508.342789244], size: 156543.03392804097, gridSize: [256, 256], resolutions: [156543.03392804097, 78271.51696402048, 39135.75848201024, 19567.87924100512, 9783.93962050256, 4891.96981025128, 2445.98490512564, 1222.99245256282, 611.49622628141, 305.748113140705, 152.8740565703525, 76.43702828517625, 38.21851414258813, 19.109257071294063, 9.554628535647032, 4.777314267823516, 2.388657133911758, 1.194328566955879, 0.5971642834779395, 0.29858214173896974, 0.14929107086948487, 0.07464553543474244, 0.03732276771737122], calcResolutions: function (i) { this.resolutions = []; for (var e = 0; e < i; ++e) { this.resolutions.push(this.size / Math.pow(2, e)) } return this.resolutions }, forEachTileCoord: function (i1, i0, T, iY) { var e = this.getTileRangeForExtentFactory(i1, i0, T); for (var iW = e.minX, iZ = e.maxX; iW <= iZ; ++iW) { for (var iV = e.minY, iX = e.maxY; iV <= iX; ++iV) { iY([i0, iW, iV]) } } }, getTileRangeForExtentFactory: function (T, iW, i, iV) { var e; switch (i.source) { case "BD09MC": e = this.getBDTileRangeForExtentAndZ(T, iW, iV); break; case "EPSG3857": e = this.getTileRangeForExtentAndZ(T, iW, iV); break; default: e = this.getTileRangeForExtentAndZ(T, iW, iV); break }return e }, getBDTileRangeForExtentAndZ: function (T, iW, iV) { var i = [0, 0, 0]; this.getBDTileCoordForXYAndZ_(T[0], T[1], iW, false, i); var e = i[1]; var iX = i[2]; this.getBDTileCoordForXYAndZ_(T[2], T[3], iW, true, i); return this.createOrUpdateTileRange(e, i[1], iX, i[2], iV) }, getTileRangeForExtentAndZ: function (T, iW, iV) { var i = [0, 0, 0]; this.getTileCoordForXYAndZ_(T[0], T[3], iW, false, i); var e = i[1]; var iX = i[2]; this.getTileCoordForXYAndZ_(T[2], T[1], iW, true, i); return this.createOrUpdateTileRange(e, i[1], iX, i[2], iV) }, getBDTileCoordForXYAndZ_: function (e, iZ, iX, iW, iV) { var iY = 256 * Math.pow(2, (18 - iX)); var T = e / iY; var i = iZ / iY; if (iW) { T = Math.ceil(T) - 1; i = Math.ceil(i) - 1 } else { T = Math.floor(T); i = Math.floor(i) } return this.createOrUpdateTileCoord(iX, T, i, iV) }, getTileCoordForXYAndZ_: function (i2, i1, iZ, i0, e) { var i3 = this.origin; var i = (this.resolutions.length === 0 ? this.calcResolutions(21)[iZ] : this.resolutions[iZ]); var i5 = this.gridSize; var iV = i0 ? 0.5 : 0; var T = i0 ? 0.5 : 0; var i4 = Math.floor((i2 - i3[0]) / i + iV); var iX = Math.floor((i3[1] - i1) / i + T); var iY = i4 / i5[0]; var iW = iX / i5[1]; if (i0) { iY = Math.ceil(iY) - 1; iW = Math.ceil(iW) - 1 } else { iY = Math.floor(iY); iW = Math.floor(iW) } return this.createOrUpdateTileCoord(iZ, iY, iW, e) }, getTileCoordForCoordAndZ: function (T, i, e) { return this.getTileCoordForXYAndZ_(T[0], T[1], i, false, e) }, getTileRangeExtent: function (T, iY) { var iZ = this.origin; if (this.resolutions.length === 0) { this.calcResolutions(23) } var iW = this.resolutions[T[0]]; var i0 = this.gridSize; var iX = iZ[0] + T[1] * i0[0] * iW; var iV = iZ[1] - (T[2] + 1) * i0[1] * iW; var i = iX + i0[0] * iW; var e = iV + i0[1] * iW; return this.createOrUpdateTileRange(iX, i, iV, e, iY) }, getRangeExtent: function (i, i3, iZ, i5, iV) { var i0 = this.calPiexlResolution(i5, iV); var iY = i3 / 2 * i0; var i1 = iZ / 2 * i0; var iX = i[0] - iY; var T = i[0] + iY; var iW = i[1] - i1; var e = i[1] + i1; var i2 = gcoord.transform([iX, iW], gcoord[iV.target], gcoord[iV.source]); var i4 = gcoord.transform([T, e], gcoord[iV.target], gcoord[iV.source]); return this.createOrUpdateTileRange(i2[0], i4[0], i2[1], i4[1]) }, getMousePoint: function (iY, iX, i, iW, T) { var iV = iR(iY, iX); return this.calLngLatByMapViewPixelInverse(iV.clientPos, i, iX.width, iX.height, iW, T) }, calLngLatByMapViewPixelInverse: function (iV, e, i, i2, i3, T) { var iY = this.calPiexlResolution(i3, T); var iX = iV.x - i / 2; var iW = iV.y - i2 / 2; var i0 = e[0] + iX * iY; var iZ = e[1] - iW * iY; var i1 = gcoord.transform([i0, iZ], gcoord[T.target], gcoord[T.source]); return i1 }, calPiexlResolution: function (T, i) { var e; switch (i.target) { case "BD09MC": e = Math.pow(2, (18 - T)); break; case "EPSG3857": e = this.resolutions[Math.floor(T)]; break; default: e = Math.pow(2, (18 - T)); break }return e }, getXYZCellPixelCoor: function (iY, iW, iV, i) { var i0 = this.gridSize; var iZ; var iX; switch (i.source) { case "EPSG3857": var T = Math.pow(2, iV - 1) - (iW + 1); var e = iY - Math.pow(2, iV - 1); iZ = e * i0[0]; iX = T * i0[1]; break; case "BD09MC": iZ = iY * i0[0]; iX = iW * i0[1]; default: break }return { x: iZ, y: iX } }, getBaiduCellPixelCoor: function (e, iV, T) { var i = 256; return { x: e * i, y: iV * i } }, getPointPixelCoor: function (e, i0, i) { var iY; var iX; var T = Math.pow(2, (18 - i0)); var iV = this.resolutions[Math.floor(i0)]; var iW = hZ.convertMC2LL(e); switch (i.source) { case "EPSG3857": var iZ = gcoord.transform([iW.lng, iW.lat], gcoord.BD09LL, gcoord.EPSG3857); iY = iZ[0] / iV; iX = iZ[1] / iV; break; case "BD09MC": iY = e.lng / T; iX = e.lat / T; default: break }return [iY, iX] }, getResolutionScale: function (iV, T) { var iW; var i = this.resolutions[Math.floor(iV)]; var e = Math.pow(2, (18 - iV)); switch (T.target) { case "BD09MC": iW = i / e; break; case "EPSG3857": iW = e / i; break; default: iW = i / e; break }return iW }, getBaiduResolutionScale: function (T) { var i = this.resolutions[Math.floor(T)]; var e = Math.pow(2, (18 - T)); var iV = e / i; return iV }, getTileCoordCenter: function (T) { var e = this.origin; if (this.resolutions.length === 0) { this.calcResolutions(23) } var i = this.resolutions[T[0]]; var iV = this.gridSize; return [e[0] + (T[1] + 0.5) * iV[0] * i, e[1] - (T[2] + 0.5) * iV[1] * i,] }, transformBDmcPoint: function (iV, e) { e = e || "EPSG3857"; var i = hZ.convertMC2LL(new b8(iV.lng, iV.lat)); var T = gcoord.transform([i.lng, i.lat], gcoord.BD09LL, gcoord[e]); return T }, getTilesLoop: function (T, e) { var i = Math.pow(2, T); while (e > i - 1) { e = e - i } while (e < 0) { e = e + i } return e }, getLoopBox: function (e, iV) { var i = this.HALF_SIZE * 2; if (e[0] > 0 && iV[2] < 0) { iV[2] = iV[2] + i } else { if (e[0] < 0 && iV[0] > 0) { iV[0] = iV[0] - i } } return iV }, createOrUpdateTileCoord: function (T, e, iV, i) { if (i !== undefined) { i[0] = T; i[1] = e; i[2] = iV; return i } else { return [T, e, iV] } }, createOrUpdateTileRange: function (e, iV, iW, T, i) { if (i !== undefined) { i.minX = e; i.maxX = iV; i.minY = iW; i.maxY = T; return i } else { return { minX: e, maxX: iV, minY: iW, maxY: T } } }, fromEPSG4326: function (T, i0, iY) { var iW = T.length; var iX = iY > 1 ? iY : 2; var e = i0; if (e === undefined) { if (iX > 2) { e = T.slice() } else { e = new Array(iW) } } for (var iV = 0; iV < iW; iV += iX) { e[iV] = (this.HALF_SIZE * T[iV]) / 180; var iZ = this.RADIUS * Math.log(Math.tan((Math.PI * (+T[iV + 1] + 90)) / 360)); if (iZ > this.MAX_SAFE_Y) { iZ = this.MAX_SAFE_Y } else { if (iZ < -this.MAX_SAFE_Y) { iZ = -this.MAX_SAFE_Y } } e[iV + 1] = iZ } return e }, toEPSG4326: function (T, iZ, iY) { var iW = T.length; var iX = iY > 1 ? iY : 2; var e = iZ; if (e === undefined) { if (iX > 2) { e = T.slice() } else { e = new Array(iW) } } for (var iV = 0; iV < iW; iV += iX) { e[iV] = (180 * T[iV]) / this.HALF_SIZE; e[iV + 1] = (360 * Math.atan(Math.exp(T[iV + 1] / this.RADIUS))) / Math.PI - 90 } return e }, findParentGridAndPosition: function (iV, i5, i4, iZ, i0, i2, iY) { if (i4 - 1 < 0) { return false } var i6 = iV; var i1 = i5; var T = i4; for (var iX = 1; iX <= iY; iX++) { var e = this.findParent(i6, i1, T, iX); if (!e) { return false } var i3 = this.getTileKey(e); var iW = iZ.getData(i3); if (iW && iW.status === "ready") { if (i0[i3]) { continue } i2.setData(iW, this.drawIndex, 0); i0[i3] = true; return true } i6 = e.col; i1 = e.row; T = e.zoom } }, findParent: function (i, iW, T, iV) { if (T - 1 < 0) { return null } var e = i % 2; var iX = iW % 2; return { col: Math.floor(i / 2), row: Math.floor(iW / 2), sonX: e, sonY: iX, thumbLB: [e * 0.5, 1 - iX * 0.5 - 0.5], thumbRT: [e * 0.5 + 0.5, 1 - iX * 0.5], radio: Math.pow(2, iV), zoom: T - 1, useZoom: T - 1 } }, getTileKey: function (e, iV) { iV = iV || {}; var i = typeof iV.useZoom === "number" ? iV.useZoom : e.useZoom; var T = e.style || this.mapStyleId || "default"; return this.mapType + "_" + T + "_" + e.col + "_" + e.row + "_" + e.zoom + "_" + i }, lon2tile: function (i, e) { return (Math.floor((i + 180) / 360 * Math.pow(2, e))) }, lat2tile: function (T, i) { var e = Math.tan(T * Math.PI / 180) + 1 / Math.cos(T * Math.PI / 180); return (Math.floor((1 - Math.log(e) / Math.PI) / 2 * Math.pow(2, i))) }, tile2long: function (e, i) { return (e / Math.pow(2, i) * 360 - 180) }, tile2lat: function (T, e) { var i = Math.PI - 2 * Math.PI * T / Math.pow(2, e); return (180 / Math.PI * Math.atan(0.5 * (Math.exp(i) - Math.exp(-i)))) } }); function b3(i, e) { if (i < -90) { i = -90 } else { if (i > 90) { i = 90 } } while (e < -180) { e += 360 } while (e > 180) { e -= 360 } e = e || 0; i = i || 0; b8.call(this, e, i) } b3.inherits(b8, "LatLng"); ej.extend(b3.prototype, { equals: function (e) { return (this.lat === e.lat && this.lng === e.lng) }, clone: function () { return new b3(this.lat, this.lng) }, add: function (e) { return new b3(this.lng + e.lng, this.lat + e.lat) }, sub: function (e) { return new b3(this.lat - e.lat, this.lng - e.lng) }, mult: function (e) { return new b3(this.lng * e, this.lat * e) }, div: function (e) { return new b3(this.lng / e, this.lat / e) }, mag: function () { return Math.sqrt(this.lng * this.lng + this.lat * this.lat) }, getLngSpan: function (e) { var i = this.lng; var T = Math.abs(e - i); if (T > 180) { T = 360 - T } return T }, toString: function () { return "LatLng" } }); function cf(e, i) { if (e && !i) { i = e } this._sw = this._ne = null; this._swLng = this._swLat = null; this._neLng = this._neLat = null; if (e) { this._sw = new b3(e.lat, e.lng); this._ne = new b3(i.lat, i.lng); this._swLng = e.lng; this._swLat = e.lat; this._neLng = i.lng; this._neLat = i.lat } } ej.extend(cf.prototype, { isEmpty: function () { return !this._sw || !this._ne }, equals: function (e) { if (this.isEmpty()) { return false } return this.getSouthWest().equals(e.getSouthWest()) && this.getNorthEast().equals(e.getNorthEast()) }, getSouthWest: function () { return this._sw }, getNorthEast: function () { return this._ne }, containsBounds: function (e) { if (this.isEmpty() || e.isEmpty()) { return false } return (e._swLng > this._swLng && e._neLng < this._neLng && e._swLat > this._swLat && e._neLat < this._neLat) }, getCenter: function () { if (this.isEmpty()) { return null } return new b3((this._swLat + this._neLat) / 2, (this._swLng + this._neLng) / 2) }, intersects: function (T) { if (Math.max(T._swLng, T._neLng) < Math.min(this._swLng, this._neLng) || Math.min(T._swLng, T._neLng) > Math.max(this._swLng, this._neLng) || Math.max(T._swLat, T._neLat) < Math.min(this._swLat, this._neLat) || Math.min(T._swLat, T._neLat) > Math.max(this._swLat, this._neLat)) { return false } var iW = Math.max(this._swLng, T._swLng); var i = Math.min(this._neLng, T._neLng); var iV = Math.max(this._swLat, T._swLat); var e = Math.min(this._neLat, T._neLat); this._sw = new b3(iV, iW); this._ne = new b3(e, i); this._swLng = iW; this._swLat = iV; this._neLng = i; this._neLat = e; return true }, containsPoint: function (e) { if (this.isEmpty()) { return false } return (e.lng >= this._swLng && e.lng <= this._neLng && e.lat >= this._swLat && e.lat <= this._neLat) }, extend: function (e) { var i = e.lng; var T = e.lat; if (!this._sw) { this._sw = new b3(0, 0) } if (!this._ne) { this._ne = new b3(0, 0) } if (!this._swLng || this._swLng > i) { this._sw.lng = this._swLng = i } if (!this._neLng || this._neLng < i) { this._ne.lng = this._neLng = i } if (!this._swLat || this._swLat > T) { this._sw.lat = this._swLat = T } if (!this._neLat || this._neLat < T) { this._ne.lat = this._neLat = T } }, toSpan: function () { if (this.isEmpty()) { return new b3(0, 0) } return new b3(Math.abs(this._neLat - this._swLat), Math.abs(this._neLng - this._swLng)) }, union: function (i) { if (i.isEmpty()) { return false } var e = i.getSouthWest(); var T = i.getNorthEast(); if (this._swLat > e.lat) { this._swLat = e.lat } if (this._swLng > e.lng) { this._swLng = e.lng } if (this._neLat < T.lat) { this._neLat = T.lat } if (this._neLng < T.lng) { this._neLng = T.lng } this._sw = new b3(this._swLat, this._swLng); this._ne = new b3(this._neLat, this._neLng); return true }, toString: function () { return this._swLat + ", " + this._swLng + ", " + this._neLat + ", " + this._neLng } }); window.COORDINATES_WGS84 = 1; window.COORDINATES_WGS84_MC = 2; window.COORDINATES_GCJ02 = 3; window.COORDINATES_GCJ02_MC = 4; window.COORDINATES_BD09 = 5; window.COORDINATES_BD09_MC = 6; window.COORDINATES_MAPBAR = 7; window.COORDINATES_51 = 8; function e6() { } e6.inherits(cD, "Convertor"); ej.extend(e6.prototype, { translate: function (i, iW, iV, T) { iW = iW || 1; iV = iV || 5; if (i.length > 10) { T && T({ status: 25 }); return } var e = u.apiHost + "/geoconv/v1/?coords="; ej.each(i, function (iX) { e += iX.lng + "," + iX.lat + ";" }); e = e.replace(/;$/gi, ""); e = e + "&from=" + iW + "&to=" + iV + "&v=gl&type=webgl&ak=" + ea; cM.request(e, function (iY) { if (iY.status === 0) { var iX = []; ej.each(iY.result, function (iZ) { iX.push(new b8(iZ.x, iZ.y)) }); delete iY.result; iY.points = iX } T && T(iY) }) } }); var dA = { idle: 0, freeze: 1, zooming: 2, dragging: 3, moving: 4, readyToDrag: 5, readyToPinch: 6, pinching: 7, stdMapCtrlDrag: 8, KEY_LEFT: 37, KEY_UP: 38, KEY_RIGHT: 39, KEY_DOWN: 40, arrowOpCodes: { 37: 1, 38: 2, 39: 4, 40: 8 } }; var ab = { _map: null, _html: "<div class='BMap_opMask' unselectable='on'></div>", _maskElement: null, _cursor: "default", inUse: false, show: function (e) { if (!this._map) { this._map = e } this.inUse = true; if (!this._maskElement) { this._createMask(e) } this._maskElement.style.display = "block" }, _createMask: function (i) { if (!this._map) { this._map = i } if (!this._map) { return } var e = this._maskElement = bw(this._map.container, this._html); ej.on(e, "mouseup", function (T) { if (T.button == 2) { gs(T) } }); ej.on(e, "contextmenu", gs); e.style.display = "none" }, getDrawPoint: function (iV, iY, iW) { iV = window.event || iV; var i = iV.offsetX || iV.layerX || 0; var iX = parseInt(iV.offsetY) || parseInt(iV.layerY) || 0; var T = iV.target || iV.srcElement; if (T != ab.getDom(this._map) && iY == true) { while (T && T != this._map.container) { if (!(T.clientWidth == 0 && T.clientHeight == 0 && T.offsetParent && T.offsetParent.nodeName.toLowerCase() == "td")) { i += T.offsetLeft; iX += T.offsetTop } T = T.offsetParent } } if (T != ab.getDom(this._map) && T != this._map.container) { return } if (typeof i === "undefined" || typeof iX === "undefined") { return } if (isNaN(i) || isNaN(iX)) { return } if (iW) { i = i + iW.x; iX = iX + iW.y } return this._map.pixelToPointIn(new eB(i, iX)) }, hide: function () { if (!this._map) { return } this.inUse = false; if (this._maskElement) { this._maskElement.style.display = "none" } }, getDom: function (e) { if (!this._maskElement) { this._createMask(e) } return this._maskElement }, setCursor: function (e) { this._cursor = e || "default"; if (this._maskElement) { this._maskElement.style.cursor = this._cursor } } }; function aD() { this._type = "overlay" } aD.inherits(ej.BaseClass, "Overlay"); aD.getZIndex = function (i, e) { i = i * 1; if (!i) { return 0 } if (e) { i = hZ.convertMC2LL(new b8(0, i)).lat } return (i * -100000) << 1 }; ej.extend(aD.prototype, { _i: function (e) { this._map = e; if (!this.domElement && bC(this.initialize)) { this.domElement = this.initialize(e); if (this.domElement) { this.domElement.style.WebkitUserSelect = "none" } } this.draw() }, initialize: function (e) { throw "initialize方法未实现" }, draw: function () { throw "draw方法未实现" }, remove: function () { if (this.domElement && this.domElement.parentNode) { this.domElement.parentNode.removeChild(this.domElement) } this.domElement = null; this.dispatchEvent(new eX("onremove")) }, hide: function () { this._visible = false; ej.hide(this.domElement) }, show: function () { this._visible = true; ej.show(this.domElement) }, getMap: function () { return this._map }, dispose: function () { ej.BaseClass.prototype.decontrol.call(this) } }); function dX() { ej.BaseClass.call(this); aD.call(this); this._visible = true; this._visibleInternal = true; this.infoWindow = null; this._dblclickTime = 0 } dX.inherits(aD, "OverlayInternal"); ej.extend(dX.prototype, { initialize: function (e) { this.map = e; ej.BaseClass.call(this, this.hashCode); return null }, draw: function () { }, remove: function () { this.decontrol(); aD.prototype.remove.call(this) }, hide: function () { this._visible = false }, show: function () { this._visible = true }, getDom: function () { return this.domElement }, getContainer: function () { return this.domElement }, setClassName: function () { }, setConfig: function (i) { if (!i) { return } for (var e in i) { if (i.hasOwnProperty(e)) { this._config[e] = i[e] } } }, getPoint: function (T, iV) { if (!T) { return this.point } else { var e = iV ? iV.width : 0; var iW = iV ? iV.height : 0; if (this.map) { var i = this.map.pointToPixelIn(this.point); if (this._config && this._config.offset) { i.x = i.x + this._config.offset.width + e; i.y = i.y + this._config.offset.height + iW } else { i.x = i.x + e; i.y = i.y + iW } return this.map.pixelToPointIn(i) } } }, setZIndex: function (e) { this.zIndex = e }, isVisible: function () { if (!this.domElement) { return false } return !!this._visible }, enableMassClear: function () { this._config.enableMassClear = true }, disableMassClear: function () { this._config.enableMassClear = false }, showInternal: function () { this._visibleInternal = true }, hideInternal: function (e) { this._visibleInternal = false; this._hideInternalReason = e } }); function aB(e) { this.map = e; this._overlays = {}; this._overlayArray = []; this._customOverlays = []; e._overlays = this._overlays; e._overlayArray = this._overlayArray; e._customOverlays = this._customOverlays; this._zoomingOrMoving = false; this._init() } aB.prototype._init = function () { if (this.map._renderType !== "webgl") { this._createOverlayContainers() } else { this._createWebGLOverlayContainers() } this._bind() }; aB.prototype._createOverlayContainers = function () { var e = this.map; e.temp.overlayDiv = e.overlayDiv = this._createOverlayDiv(e.platform, 200); e.temp.overlayDivEx = e.overlayDivEx = this._createOverlayDiv(e.platform, 50); e._panes.floatPane = this._createOverlayDiv(e.temp.overlayDiv, 800); e._panes.markerMouseTarget = this._createOverlayDiv(e.temp.overlayDiv, 700); e._panes.floatShadow = this._createOverlayDiv(e.temp.overlayDiv, 600); e._panes.labelPane = this._createOverlayDiv(e.temp.overlayDiv, 500); e._panes.markerPane = this._createOverlayDiv(e.temp.overlayDiv, 400); if (e.isCanvasMap()) { e._panes.mapPane = this._createOverlayDiv(e.temp.overlayDivEx, 50) } else { e._panes.mapPane = this._createOverlayDiv(e.temp.overlayDiv, 200) } }; aB.prototype._createWebGLOverlayContainers = function () { var e = this.map; e.temp.overlayDiv = e.overlayDiv = this._createOverlayDiv(e.platform, 200); e._panes.floatPane = this._createOverlayDiv(e.temp.overlayDiv, 800); e._panes.markerMouseTarget = this._createOverlayDiv(e.temp.overlayDiv, 700); e._panes.floatShadow = this._createOverlayDiv(e.temp.overlayDiv, 600); e._panes.labelPane = this._createOverlayDiv(e.temp.overlayDiv, 500); e._panes.markerPane = this._createOverlayDiv(e.temp.overlayDiv, 400) }; aB.prototype._createOverlayDiv = function (e, iV) { var T = bG("div"); var i = T.style; i.position = "absolute"; i.top = i.left = i.width = i.height = "0"; i.zIndex = iV; e.appendChild(T); return T }; aB.prototype._bind = function () { var iW = this.map; var iV = this; function i(iY) { iV.draw(iY) } if (iW._renderType !== "webgl") { iW.addEventListener("load", i); iW.addEventListener("moveend", i); iW.addEventListener("resize", i); iW.addEventListener("zoomend", i); iW.addEventListener("zooming_inner", i) } else { iW.on("update", i) } iW.addEventListener("zoomend", function (iY) { if (this.mapType === "B_EARTH_MAP") { if (this._earth.getZoom() < this._earth.zoomForNight + 1) { this.temp.overlayDiv.style.display = "none"; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "none" } } else { if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } } }); iW.addEventListener("oncenterandzoom", function (iY) { iV.draw(iY); if (this.mapType === "B_EARTH_MAP") { if (this._earth.getZoom() < this._earth.zoomForNight + 1) { this.temp.overlayDiv.style.display = "none"; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "none" } } else { if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } } }); iW.addEventListener("maptypechange", function (iY) { if (this.mapType === "B_EARTH_MAP") { if (this._panes.mapPane) { this._panes.mapPane.style.display = "none" } if (this._earth.getZoom() < this._earth.zoomForNight + 1) { this.temp.overlayDiv.style.display = "none"; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "none" } } else { if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } if (this._panes.markerPane) { this._panes.markerPane.style.display = "none" } } else { if (this._panes.mapPane) { this._panes.mapPane.style.display = "" } if (this._panes.markerPane) { this._panes.markerPane.style.display = "" } if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } iV.draw(iY) }); iW.on("earthstatuschange", function iX(iY) { iV.draw(iY) }); iW.addEventListener("addoverlay", function (i2) { var iZ = i2.target; if (iZ instanceof dX) { if (!iV._overlays[iZ.hashCode]) { iV._overlays[iZ.hashCode] = iZ; iV._overlayArray.push(iZ) } } else { var i1 = false; for (var i0 = 0, iY = iV._customOverlays.length; i0 < iY; i0++) { if (iV._customOverlays[i0] === iZ) { i1 = true; break } } if (!i1) { iV._customOverlays.push(iZ) } } }); iW.addEventListener("removeoverlay", function (i1) { var iZ = i1.target; if (iZ instanceof dX) { delete iV._overlays[iZ.hashCode]; for (var i0 = 0; i0 < iV._overlayArray.length; i0++) { if (iV._overlayArray[i0] === iZ) { iV._overlayArray.splice(i0, 1); break } } } else { for (var i0 = 0, iY = iV._customOverlays.length; i0 < iY; i0++) { if (iV._customOverlays[i0] === iZ) { iV._customOverlays.splice(i0, 1); break } } } }); iW.addEventListener("clearoverlays", function (i0) { this.closeInfoWindow(); this.closeSimpleInfoWindow(); for (var iZ in iV._overlays) { if (iV._overlays[iZ]._config.enableMassClear) { this.removeOverlay(iV._overlays[iZ]) } } for (var iY = iV._customOverlays.length - 1; iY > 0; iY--) { if (iV._customOverlays[iY].enableMassClear !== false) { this.removeOverlay(iV._customOverlays[iY]); iV._customOverlays.splice(iY, 1) } } }); iW.addEventListener("infowindowopen", function (iZ) { var iY = this.infoWindow; if (iY) { ej.hide(iY.popDom); ej.hide(iY.shadowDom) } }); function T() { if (this.getMapType() === "B_EARTH_MAP" || this._renderType === "webgl") { if (iV._zoomingOrMoving === false) { this._panes.markerMouseTarget.style.display = "none"; iV._zoomingOrMoving = true } } } function e(i0) { if (this.getMapType() === "B_EARTH_MAP" || this._renderType === "webgl") { if (iV._zoomingOrMoving === true) { this._panes.markerMouseTarget.style.display = ""; iV._zoomingOrMoving = false; for (var iZ = 0; iZ < iV._overlayArray.length; iZ++) { var iY = iV._overlayArray[iZ]; if (iY instanceof iC === true) { iY.draw(i0) } } } } } iW.addEventListener("movestart", T); iW.addEventListener("moveend", e); iW.addEventListener("zoomstart", T); iW.addEventListener("zoomend", e); iW.addEventListener("animation_start", T); iW.addEventListener("animation_end", e); iW.addEventListener("displayoptions_changed", function (iY) { if (this._displayOptions.overlay === false) { this.temp.overlayDiv.style.display = "none" } else { this.temp.overlayDiv.style.display = "" } }) }; aB.prototype.draw = function (iY) { iY = iY || {}; if (this.map.getMapType() === "B_EARTH_MAP") { for (var iW = 0; iW < this._overlayArray.length; iW++) { var T = this._overlayArray[iW]; if (T instanceof hv === true) { continue } if (this._zoomingOrMoving) { if (T instanceof iC === true) { continue } } T.draw(iY) } } else { for (var iW = 0, iV = this._overlayArray.length; iW < iV; iW++) { var T = this._overlayArray[iW]; if (this._zoomingOrMoving && T instanceof iC === true) { continue } T.draw(iY) } } ej.each(this._customOverlays, function (e) { e.draw(iY) }); if (this.map.temp.infoWin) { this.map.temp.infoWin.setPosition(iY.center, iY.zoom) } if (this.map.getMapType() !== "B_EARTH_MAP" && this.map._renderType !== "webgl") { if (bk.DrawerSelector) { var iX = bk.DrawerSelector.getDrawer(this.map); iX.setPalette() } } }; bk.register(function (e) { e._overlayMgr = new aB(e) }); function hv(e) { dX.call(this); this._config = { strokeColor: "#000", strokeWeight: 2, strokeOpacity: 1, strokeStyle: "solid", dashArray: null, strokeLineCap: "round", strokeLineJoin: "round", enableMassClear: true, getParseTolerance: null, getParseCacheIndex: null, enableParse: true, enableEditing: false, mouseOverTolerance: 5, geodesic: false, clip: true, texture: null, textureSize: null, textureZoomWithMap: false, textureRepeat: true }; this.setConfig(e); if (this._config.strokeOpacity < 0 || this._config.strokeOpacity > 1) { this._config.strokeOpacity = 1 } if (this._config.fillOpacity < 0 || this._config.fillOpacity > 1) { this._config.fillOpacity = 1 } if (this._config.strokeStyle !== "solid" && this._config.strokeStyle !== "dashed" && this._config.strokeStyle !== "dotted") { this._config.strokeStyle = "solid" } this.domElement = null; this._bounds = new g0(); this.points = []; this.greatCirclePoints = []; this._parseCache = []; this._holesCache = []; this._parseCacheGL = []; this._parseCacheGLRaw = []; this._areaCacheGL = []; this._strokeStyleInfoForGL = [[]]; this._fillStyleInfoForGL = ""; this.vertexMarkers = []; this._temp = {} } hv.JOININDEX = { miter: 0, round: 1, bevel: 2 }; hv.CAPINDEX = { round: 0, butt: 1, square: 2 }; hv.inherits(dX, "Graph"); hv.getGraphPoints = function (i) { var e = []; if (!i || i.length === 0) { return e } if (typeof i === "string") { var T = i.split(";"); ej.each(T, function (iW) { var iV = iW.split(","); e.push(new b8(iV[0], iV[1])) }) } if (i.constructor === Array && i.length > 0) { e = i } return e }; hv.parseTolerance = { 0: [0.09, 0.005, 0.0001, 0.00001], 1: [9000, 500, 20, 1] }; ej.extend(hv.prototype, { initialize: function (e) { this.map = e; return null }, draw: function () { }, setPoints: function (e) { this._clearCache(); this.points = hv.getGraphPoints(e).slice(0); this._calcBounds() }, setPathIn: function (e) { this.setPoints(e) }, _calcBounds: function () { if (!this.points) { return } var e = this; e._bounds = new g0(); if (!this.hasMultipleParts) { ej.each(this.points, function (i) { e._bounds.extend(i) }) } else { ej.each(this.points, function (i) { ej.each(i, function (T) { e._bounds.extend(T) }) }) } }, getPoints: function () { return this.points }, getPathIn: function () { return this.points }, setPointAt: function (i, e) { if (!e || !this.points[i]) { return } this._clearCache(); this.points[i] = new b8(e.lng, e.lat); this._calcBounds() }, setPositionAt: function (i, e) { if (!e || !this.points[i]) { return } var T = hZ.convertLL2MC(e); this.setPointAt(i, T) }, setOptions: function (i) { i = i || {}; for (var e in i) { if (i.hasOwnProperty(e)) { this._config[e] = i[e] } } }, setStrokeColor: function (e) { this._config.strokeColor = e }, getStrokeColor: function () { return this._config.strokeColor }, setStrokeLineCap: function (e) { this._config.strokeLineCap = e }, getStrokeLineCap: function () { return this._config.strokeLineCap }, setStrokeLineJoin: function (e) { this._config.strokeLineJoin = e }, getStrokeLineJoin: function () { return this._config.strokeLineJoin }, setStrokeWeight: function (e) { if (e > 0) { this._config.strokeWeight = e } }, getStrokeWeight: function () { return this._config.strokeWeight }, setStrokeOpacity: function (e) { if (!e || e > 1 || e < 0) { return } this._config.strokeOpacity = e }, getStrokeOpacity: function () { return this._config.strokeOpacity }, setFillOpacity: function (e) { if (e > 1 || e < 0) { return } this._config.fillOpacity = e }, getFillOpacity: function () { return this._config.fillOpacity }, setStrokeStyle: function (e) { if (e !== "solid" && e !== "dashed" && e !== "dotted") { return } this._config.strokeStyle = e }, getStrokeStyle: function () { return this._config.strokeStyle }, setFillColor: function (e) { this._config.fillColor = e || "" }, getFillColor: function () { return this._config.fillColor }, getBoundsIn: function () { this._bounds.setMinMax(); return this._bounds }, getBounds: function () { var e = this.getBoundsIn(); var i = new g0(hZ.convertMC2LL(e.getSouthWest()), hZ.convertMC2LL(e.getNorthEast())); i.setMinMax(); return i }, remove: function () { if (this.map) { this.map.removeEventListener("onmousemove", this._graphMouseEvent); this.map.removeEventListener("onclick", this._graphClickEvent) } dX.prototype.remove.call(this); this._clearCache(); var e = new eX("onlineupdate"); e.action = "remove"; e.overlay = this; this.fire(e) }, enableEditing: function () { if (this.points.length < 2) { return } this._config.enableEditing = true; var e = this; f8.load("poly", function () { e.addVertexs() }, true) }, disableEditing: function () { this._config.enableEditing = false; var e = this; f8.load("poly", function () { e.clearVertexs() }, true) }, getLength: function () { if (typeof this._length === "number") { return this._length } if (typeof this._config.totalLength === "number") { this._length = this._config.totalLength; return this._length } var T = 0; if (this.points.length <= 1) { this._length = 0; return T } for (var e = 0; e < this.points.length - 1; e++) { T += dO(this.points[e], this.points[e + 1]) } this._length = T; return T }, getParsedPoints: function () { var e = this._simplification(this.points); if (this.hasMultipleParts) { return e } return [e] }, _simplification: function (i0) { var e = this.map; var iZ = this.getParseCacheIndex(e.getZoom()); var i2; if (this._parseCache[iZ]) { i2 = this._parseCache[iZ] } else { var iX = i0; if (this.greatCirclePoints.length > 0) { iX = this.greatCirclePoints } var iW = e.config.coordType === 2 ? 1 : e.config.coordType; var iY = this.getParseTolerance(e.getZoom(), iW); if (!this.hasMultipleParts) { var i1 = dh(iX, iY) } else { var i1 = []; for (var T = 0; T < iX.length; T++) { var iV = dh(iX[T], iY); i1.push(iV) } } i2 = this._parseCache[iZ] = i1 } return i2 }, _clearCache: function () { this._length = null; this._parseCache.length = 0; this._parseCacheGL.length = 0; this._parseCacheGLRaw.length = 0; this._areaCacheGL.length = 0 }, canRenderDataBeMerged: function () { var e = this._config; if (e.texture) { return false } return true } }); if (ej.Browser.ie && document.namespaces && !document.namespaces.olv) { document.namespaces.add("olv", "urn:schemas-microsoft-com:vml") } function id(iX, iV, T) { if (!iX || !iV) { return } this.imageUrl = null; this.imageDom = null; if (typeof iX === "string") { this.imageUrl = iX } else { this.imageDom = iX; if (!this.imageDom.id) { this.imageDom.id = bk.getGUID("icon_dom_") } } this.size = iV; var iW = new hS(Math.floor(iV.width / 2), Math.floor(iV.height / 2)); var i = { offset: iW, imageOffset: new hS(0, 0) }; T = T || {}; for (var e in T) { i[e] = T[e] } if (T.anchor) { i.offset = T.anchor } this.anchor = this.offset = i.offset; this.imageOffset = i.imageOffset; this.infoWindowOffset = T.infoWindowOffset || this.offset; this.printImageUrl = T.printImageUrl || ""; this.imageSize = T.imageSize || this.size; this.srcSetObject = {}; this.setImageSrcset(T.srcset || T.srcSet) } id.prototype.setImageUrl = function (e) { if (!e) { return } this.imageUrl = e; this._renderData = null }; id.prototype.getCurrentImageUrl = function () { if (window.devicePixelRatio > 1 && this.srcSetObject["2x"]) { return this.srcSetObject["2x"] } return this.imageUrl }; id.prototype.setPrintImageUrl = function (e) { if (!e) { return } this.printImageUrl = e }; id.prototype.setSize = function (e) { if (!e) { return } this.size = new hS(e.width, e.height); this._renderData = null }; id.prototype.setOffset = function (e) { if (!e) { return } this.anchor = this.offset = new hS(e.width, e.height); this._renderData = null }; id.prototype.setAnchor = function (e) { this.setOffset(e) }; id.prototype.setImageOffset = function (e) { if (!e) { return } this.imageOffset = new hS(e.width, e.height); this._renderData = null }; id.prototype.setInfoWindowOffset = function (e) { if (!e) { return } this.infoWindowOffset = new hS(e.width, e.height) }; id.prototype.setImageSize = function (e) { if (!e) { return } this.imageSize = new hS(e.width, e.height) }; id.prototype.setImageSrcset = function (T) { var e = ""; if (!T) { return } for (var i in T) { if (T.hasOwnProperty(i)) { this.srcSetObject[i] = T[i]; e = T[i] + " " + i + "," } } this.srcSet = e }; id.prototype.toString = function () { return "Icon" }; id.prototype.generateRenderData = function (iX) { var T = this.offset; var e = this.size; var iZ = this.imageOffset; var iY = []; iY.push(-T.width, T.height - e.height, 0); iY.push(e.width - T.width, T.height - e.height, 0); iY.push(e.width - T.width, T.height, 0); iY.push(-T.width, T.height - e.height, 0); iY.push(e.width - T.width, T.height, 0); iY.push(-T.width, T.height, 0); if (iX !== 0) { for (var iW = 0; iW < iY.length; iW += 3) { var iV = vec2.fromValues(iY[iW], iY[iW + 1]); vec2.rotate(iV, iV, [0, 0], hw(-iX)); iY[iW] = iV[0]; iY[iW + 1] = iV[1] } } return { vertex: iY } }; id.prototype.getRenderData = function (e) { this._renderData = this.generateRenderData(e); return this._renderData }; function ds(T, i) { ej.BaseClass.call(this); this.content = T; this.map = null; this._config = { width: 0, height: 0, maxWidth: 600, offset: new hS(0, 0), title: "", maxContent: "", enableMaximize: false, enableAutoPan: true, enableCloseOnClick: true, margin: [10, 10, 40, 10], collisions: [[10, 10], [10, 10], [10, 10], [10, 10]], ifMaxScene: false, onClosing: function () { return true } }; this.setConfig(i); if (this._config.width !== 0) { if (this._config.width < 220) { this._config.width = 220 } if (this._config.width > 730) { this._config.width = 730 } } if (this._config.height !== 0) { if (this._config.height < 60) { this._config.height = 60 } if (this._config.height > 650) { this._config.height = 650 } } if (this._config.maxWidth !== 0) { if (this._config.maxWidth < 220) { this._config.maxWidth = 220 } if (this._config.maxWidth > 730) { this._config.maxWidth = 730 } } this.isWinMax = false; this.IMG_PATH = u.imgPath; this.overlay = null; var e = this; f8.load("infowindow", function () { e._draw() }) } ds.inherits(ej.BaseClass, "InfoWindow"); ej.extend(ds.prototype, { setWidth: function (e) { e = e * 1; if (!e && e !== 0 || isNaN(e) || e < 0) { return } if (e !== 0) { if (e < 220) { e = 220 } if (e > 730) { e = 730 } } this._config.width = e }, setHeight: function (e) { e = e * 1; if (!e && e !== 0 || isNaN(e) || e < 0) { return } if (e !== 0) { if (e < 60) { e = 60 } if (e > 650) { e = 650 } } this._config.height = e }, setMaxWidth: function (e) { e = e * 1; if (!e && e !== 0 || isNaN(e) || e < 0) { return } if (e !== 0) { if (e < 220) { e = 220 } if (e > 730) { e = 730 } } this._config.maxWidth = e }, setTitle: function (e) { this._config.title = e || "" }, setContent: function (e) { this.content = e || "" }, getContent: function () { return this.content }, setMaxContent: function (e) { this._config.maxContent = e || "" }, redraw: function () { }, enableAutoPan: function () { this._config.enableAutoPan = true }, disableAutoPan: function () { this._config.enableAutoPan = false }, enableCloseOnClick: function () { this._config.enableCloseOnClick = true }, disableCloseOnClick: function () { this._config.enableCloseOnClick = false }, enableMaximize: function () { this._config.enableMaximize = true }, disableMaximize: function () { this._config.enableMaximize = false }, show: function () { this._visible = true }, hide: function () { this._visible = false }, close: function () { this.hide() }, dispose: function () { ej.BaseClass.prototype.decontrol.call(this) }, maximize: function () { this.isWinMax = true }, restore: function () { this.isWinMax = false }, setConfig: function (i) { if (!i) { return } for (var e in i) { if (typeof (this._config[e]) === typeof (i[e])) { this._config[e] = i[e] } } }, isVisible: function () { return this.isOpen() }, isOpen: function () { return false }, getPointIn: function () { if (this.overlay && this.overlay.getPoint) { return this.overlay.getPoint() } }, getTitle: function () { return this._config.title || "" }, getPosition: function () { return this.latLng }, getPoint: function () { var e = this.getPointIn(); if (this.map.config.coordType === BMAP_COORD_GCJ02) { var i = hZ.convertMC2LL(e); return d4(i) } return hZ.convertMC2LL(e) }, getOffset: function () { return this._config.offset }, dispose: function () { ej.BaseClass.prototype.decontrol.call(this) }, toString: function () { return "InfoWindow" } }); gL.prototype.openInfoWindow = function (T, e) { T.latLng = new b3(e.lat, e.lng); var i = hZ.convertLL2MC(e); this.openInfoWindowIn(T, i) }; gL.prototype.closeInfoWindow = function () { var e = this.temp.infoWin || this.temp._infoWin; if (e && e.overlay) { e.overlay.closeInfoWindow() } }; gL.prototype.openInfoWindowIn = function (iV, e) { if (!iV || iV.toString() !== "InfoWindow" || !e || e.toString() !== "Point") { return } var i = this.temp; if (!i.marker) { var T = new id(u.imgPath + "blank.gif", { width: 1, height: 1 }); i.marker = new iC(e, { icon: T, width: 1, height: 1, offset: new hS(0, 0), infoWindowOffset: new hS(0, 0), clickable: false }); i.marker._fromMap = 1 } else { i.marker.setPoint(e) } this.addOverlay(i.marker); i.marker.show(); i.marker.openInfoWindow(iV) }; dX.prototype.openInfoWindow = function (e) { if (this.map) { this.map.closeInfoWindow(); e._visible = true; this.map.temp._infoWin = e; e.overlay = this; ej.BaseClass.call(e, e.hashCode) } }; dX.prototype.closeInfoWindow = function () { if (this.map && this.map.temp._infoWin) { this.map.temp._infoWin._visible = false; this.map.temp._infoWin.decontrol(); this.map.temp._infoWin = null } }; function a0(T, i) { dX.call(this); this.content = T; this.map = null; this.domElement = null; this._config = { width: 0, offset: new hS(0, 0), styles: { backgroundColor: "#fff", border: "1px solid #f00", padding: "1px", whiteSpace: "nowrap", fontSize: "12px", zIndex: "80", MozUserSelect: "none" }, point: null, enableMassClear: true }; i = i || {}; this.setConfig(i); if (this._config.width < 0) { this._config.width = 0 } this.point = this._config.point; var e = this; f8.load("marker", function () { e._draw() }) } a0.inherits(dX, "Label"); ej.extend(a0.prototype, { setPoint: function (e) { if (e && e.toString() === "Point" && !this.getMarker()) { if (this.coordType === BMAP_COORD_GCJ02) { var i = hp(e, 3); this.point = this._config.point = new b8(i.lng, i.lat) } else { this.point = this._config.point = new b8(e.lng, e.lat) } } }, setContent: function (e) { this.content = e }, getContent: function (e) { return this.content }, setOpacity: function (e) { if (e >= 0 && e <= 1) { this._config.opacity = e } }, setOffset: function (e) { if (!e || e.toString() !== "Size") { return } this._config.offset = new hS(e.width, e.height) }, getOffset: function () { return this._config.offset }, setStyle: function (e) { e = e || {}; this._config.styles = ej.extend(this._config.styles, e) }, setStyles: function (e) { this.setStyle(e) }, setTitle: function (e) { this._config.title = e || "" }, getTitle: function () { return this._config.title }, setMarker: function (e) { if (this._marker && this._marker !== e) { this._marker._config.label = null } this._marker = e; if (e) { this.point = this._config.point = e.getPoint() } else { this.point = this._config.point = null } }, getMarker: function () { return this._marker || null }, getPositionIn: function () { return this.getPoint() }, }); function gT(T, i) { var iV = {}; for (var e in i) { if (i.hasOwnProperty(e)) { if (e === "position") { iV.point = hZ.convertLL2MC(i[e]); this.latLng = new b3(i[e]["lat"], i[e]["lng"]) } else { iV[e] = i[e] } } } a0.call(this, T, iV) } gT.inherits(a0, "LabelOut"); ej.extend(gT.prototype, { toString: function () { return "Label" }, setPosition: function (e) { this.latLng = new b3(e.lat, e.lng); var i = hZ.convertLL2MC(e); this.setPoint(i) }, getPosition: function () { return this.latLng } }); window.BMAP_ANIMATION_DROP = 1; window.BMAP_ANIMATION_BOUNCE = 2; function iC(e, i) { dX.call(this); i = i || {}; this.point = e; this._rotation = 0; this.map = null; this._animation = null; this.domElement = null; this.iconDom = null; this.infoWindowDom = null; this.siblingElement = null; this.textureCoord = null; this.textureCoordGLMap = null; this.collisionDetectionFailed = false; this._config = { offset: new hS(0, 0), opacity: 1, icon: null, title: "", infoWindow: null, label: null, baseZIndex: 0, clickable: true, zIndexFixed: false, isTop: false, enableMassClear: true, enableDragging: false, raiseOnDrag: false, restrictDraggingArea: false, startAnimation: "", enableCollisionDetection: false, rank: 0, enableDraggingMap: false }; this.setConfig(i); if (!i.icon) { this._config.icon = new id(u.imgPath + "marker_red.png", new hS(23, 25), { offset: new hS(10, 25), infoWindowOffset: new hS(10, 0) }) } this._isDragging = false; var T = this; f8.load("marker", function () { T._draw() }) } iC.TOP_ZINDEX = aD.getZIndex(-90) + 1000000; iC.DRAG_ZINDEX = iC.TOP_ZINDEX + 1000000; iC._injectMethond = function (e) { ej.extend(iC.prototype, e) }; iC.inherits(dX, "Marker"); ej.extend(iC.prototype, { toString: function () { return "Marker" }, setIcon: function (e) { if (e) { this._config.icon = e; this.textureCoord = this.textureCoordGLMap = null } }, getIcon: function () { return this._config.icon }, setLabel: function (e) { if (!(e instanceof a0)) { return } this._config.label = e; e._config.enableMassClear = this._config.enableMassClear; e.setPoint(this.point) }, getLabel: function () { return this._config.label }, enableDragging: function () { this._config.enableDragging = true }, disableDragging: function () { this._config.enableDragging = false }, setPoint: function (e) { if (e) { if (this.map.config.coordType === BMAP_COORD_GCJ02) { var i = hp(e, 3); this.point = this._config.point = new b8(i.lng, i.lat); this.latLng = hZ.convertMC2LL(i) } else { this.point = this._config.point = new b8(e.lng, e.lat); this.latLng = hZ.convertMC2LL(e) } } }, setPositionIn: function (e) { this.setPoint(e) }, getPositionIn: function () { return this.getPoint() }, setTop: function (i, e) { this._config.isTop = !!i; if (i) { this._addi = e || 0 } }, setTitle: function (e) { this._config.title = e || "" }, getTitle: function () { return this._config.title }, setOffset: function (e) { if (e) { this._config.offset = e } }, getOffset: function () { return this._config.offset }, setAnimation: function (e) { this._animation = e }, setRank: function (e) { this._config.rank = e }, getRank: function () { return this._config.rank }, setRotation: function (e) { while (e < 0) { e += 360 } this._rotation = e % 360 }, getRotation: function () { return this._rotation } }); function p(e, T) { this.latLng = new b3(e.lat, e.lng); var i = hZ.convertLL2MC(e); iC.call(this, i, T) } p.inherits(iC, "MarkerOut"); ej.extend(p.prototype, { toString: function () { return "Marker" }, setPosition: function (e) { this.latLng = new b3(e.lat, e.lng); var i = hZ.convertLL2MC(e); this.setPositionIn(i) }, getPosition: function () { return this.latLng }, }); window.BMAP_SHAPE_CIRCLE = 1; window.BMAP_SHAPE_RECT = 2; function dC(i, e, T) { dX.call(this, e, T); this.domElement = null; this.point = i; T = T || {}; this._config = {}; this._config.height = e || 0; this._config.size = typeof T.size === "number" ? T.size : 50; this._config.fillOpacity = typeof T.fillOpacity === "number" ? T.fillOpacity : 0.8; this._config.shape = typeof T.shape === "number" ? T.shape : 1; bR(this._config.fillOpacity, 0, 1); if (T.fillColor === "") { this._config.fillColor = "" } else { this._config.fillColor = T.fillColor ? T.fillColor : "#f00" } this._config.icon = T.icon instanceof id ? T.icon : ""; this._config.enableMassClear = T.enableMassClear || true; var iV = this; f8.load("marker", function () { iV._draw() }) } dC.inherits(dX, "Marker3D"); ej.extend(dC.prototype, { setPoint: function (e) { if (this.map.config.coordType === BMAP_COORD_GCJ02) { var T = hp(e, 3); this.point = this._config.point = new b8(T.lng, T.lat); this.latLng = hZ.convertMC2LL(T) } else { this.point = this._config.point = new b8(e.lng, e.lat); this.latLng = hZ.convertMC2LL(e) } var i = new eX("onstatus_change"); i.overlay = this; i.action = "setPoint"; this.fire(i) }, setPositionIn: function (e) { this.setPoint(e) }, getPositionIn: function () { return this.getPoint() }, setDomAttribute: function (i, T) { var e = new eX("onlineupdate"); e.overlay = this; this.dispatchEvent(e) } }); function dz(i, e, iV) { this.latLng = new b3(i.lat, i.lng); var T = hZ.convertLL2MC(i); dC.call(this, T, e, iV) } dz.inherits(dC, "Marker3d"); ej.extend(dz.prototype, { toString: function () { return "Marker3D" }, setHeight: function (e) { this._config.height = Number(e); this.draw(); var i = new eX("onlineupdate"); i.overlay = this; this.dispatchEvent(i) }, getHeight: function () { return this._config.height }, setFillOpacity: function (e) { if (e > 1 || e < 0) { return } this._config.fillOpacity = e; this.setDomAttribute("fillopacity", e) }, getFillOpacity: function () { return this._config.fillOpacity }, setFillColor: function (e) { this._config.fillColor = e || ""; this.setDomAttribute("fillcolor", e) }, getFillColor: function () { return this._config.fillColor }, setIcon: function (i) { if (!i || !this.map) { return } this._config.icon = i; if (this._config.icon) { var e = this._config.icon.getCurrentImageUrl(); var iV = i.getCurrentImageUrl() !== e; this._config.icon = i; this.textureCoord = this.textureCoordGLMap = null; this.draw(); var T = new eX("onstatus_change"); T.overlay = this; T.action = "setIcon"; T.imageUrlChanged = iV; this.fire(T) } }, getIcon: function () { return this._config.icon }, setPosition: function (e) { this.latLng = new b3(e.lat, e.lng); var i = hZ.convertLL2MC(e); this.setPositionIn(i) }, getPosition: function () { var e = this.getPositionIn(); return hZ.convertMC2LL(e) } }); function e7(T, e) { hv.call(this, e); this._normalizedBounds = new g0(); this.setPoints(T); var i = this; f8.load("poly", function () { i._draw() }) } e7.inherits(hv, "Polyline"); ej.extend(e7.prototype, { getBoundsIn: function (e) { if (!e) { this._bounds.setMinMax(); return this._bounds } this._normalizedBounds.setMinMax(); return this._normalizedBounds }, setPoints: function (T) { this._clearCache(); this.points = hv.getGraphPoints(T).slice(0); if (this._config.geodesic === true) { this.greatCirclePoints.length = 0; for (var e = 0; e < this.points.length - 1; e++) { this.calcGreatCirclePoints(this.points[e], this.points[e + 1]) } } this._calcBounds() }, _calcBounds: function () { if (!this.points) { return } var e = this; e._bounds.setNorthEast(null); e._bounds.setSouthWest(null); if (e.greatCirclePoints && e.greatCirclePoints.length > 0) { ej.each(e.greatCirclePoints, function (i) { e._bounds.extend(i) }) } else { ej.each(e.points, function (i) { e._bounds.extend(i) }) } e._normalizedBounds.setSouthWest(e._bounds.getSouthWest()); e._normalizedBounds.setNorthEast(e._bounds.getNorthEast()); if (e._normalizedBounds.sw.lng < -gL.WORLD_SIZE_MC_HALF || e._normalizedBounds.ne.lng > gL.WORLD_SIZE_MC_HALF) { e._normalizedBounds.sw.lng = -gL.WORLD_SIZE_MC_HALF; e._normalizedBounds.ne.lng = gL.WORLD_SIZE_MC_HALF } }, calcGreatCirclePoints: function (iV, T) { var iX = iV.latLng; var iW = T.latLng; if (iX.equals(iW)) { return } var e = hZ.getDistance(hw(iX.lng), hw(iX.lat), hw(iW.lng), hw(iW.lat)); if (e < 250000) { return } var i1 = Math.round(e / 150000); var i5 = this.calcAngularDistance(iX, iW); this.greatCirclePoints.push(iV); var i4 = iX.lng; var i3 = iV; for (var iY = 0; iY < i1; iY++) { var i0 = this.calcMiddlePoint(iX, iW, iY / i1, i5); var i2 = hZ.convertLL2MC(i0); var iZ = i2.lng; var i6 = dO(i2, i3); if (i6 > 30037726) { if (i2.lng < i3.lng) { i2.lng += gL.WORLD_SIZE_MC } else { i2.lng -= gL.WORLD_SIZE_MC } } this.greatCirclePoints.push(i2); i3 = i2 } var i6 = dO(T, i3); if (i6 > 30037726) { if (T.lng < i3.lng) { T.lng += gL.WORLD_SIZE_MC } else { T.lng -= gL.WORLD_SIZE_MC } } this.greatCirclePoints.push(T) }, calcMiddlePoint: function (i2, i1, i3, i7) { var iW = i2.lat; var iV = i1.lat; var i6 = i2.lng; var i4 = i1.lng; var i8 = hw(iW); var i5 = hw(iV); var i = hw(i6); var e = hw(i4); var ja = Math.sin((1 - i3) * i7) / Math.sin(i7); var i9 = Math.sin(i3 * i7) / Math.sin(i7); var iZ = ja * Math.cos(i8) * Math.cos(i) + i9 * Math.cos(i5) * Math.cos(e); var iY = ja * Math.cos(i8) * Math.sin(i) + i9 * Math.cos(i5) * Math.sin(e); var iX = ja * Math.sin(i8) + i9 * Math.sin(i5); var T = Math.atan2(iX, Math.sqrt(Math.pow(iZ, 2) + Math.pow(iY, 2))); var i0 = Math.atan2(iY, iZ); return new b8(eu(i0), eu(T)) }, calcAngularDistance: function (iW, i) { var iX = hw(iW.lat); var iV = hw(i.lat); var T = hw(iW.lng); var e = hw(i.lng); return Math.acos(Math.sin(iX) * Math.sin(iV) + Math.cos(iX) * Math.cos(iV) * Math.cos(Math.abs(e - T))) } }); function a8(iW, e) { if (!iW || iW.length === 0) { return } var iV = []; for (var T = 0; T < iW.length; T++) { iV[T] = hZ.convertLL2MC(iW[T]) } e7.call(this, iV, e) } a8.inherits(e7, "PolylineOut"); ej.extend(a8.prototype, { toString: function () { return "Polyline" }, setPath: function (iV) { if (!iV || iV.length === 0) { return } var T = []; for (var e = 0; e < iV.length; e++) { T[e] = hZ.convertLL2MC(iV[e]) } this.setPathIn(T) }, getPath: function () { var e = this.getPathIn(); if (!e || e.length === 0) { return [] } var iV = []; for (var T = 0; T < e.length; T++) { iV[T] = hZ.convertMC2LL(e[T]) } return iV }, getBounds: function (i) { var e = this.getBoundsIn(i); var T = new g0(hZ.convertMC2LL(e.getSouthWest()), hZ.convertMC2LL(e.getNorthEast())); return T } }); function fW(T, iV, e) { hv.call(this, e); this._normalizedBounds = new g0(); this._cps = iV; this._path = T; this.setPoints(T); var i = this; f8.load("poly", function () { i._draw() }) } fW.inherits(e7, "BezierCurve"); ej.extend(fW.prototype, { getBoundsIn: function (e) { if (!e) { this._bounds.setMinMax(); return this._bounds } this._normalizedBounds.setMinMax(); return this._normalizedBounds }, setPoints: function (e) { this._clearCache(); this.points = hv.getGraphPoints(e).slice(0); this.points = this.calcBezierPoints(this.points, this._cps); this._calcBounds() }, _calcBounds: function () { if (!this.points) { return } var e = this; e._bounds.setNorthEast(null); e._bounds.setSouthWest(null); if (e.greatCirclePoints && e.greatCirclePoints.length > 0) { ej.each(e.greatCirclePoints, function (i) { e._bounds.extend(i) }) } else { ej.each(e.points, function (i) { e._bounds.extend(i) }) } e._normalizedBounds.setSouthWest(e._bounds.getSouthWest()); e._normalizedBounds.setNorthEast(e._bounds.getNorthEast()); if (e._normalizedBounds.sw.lng < -gL.WORLD_SIZE_MC_HALF || e._normalizedBounds.ne.lng > gL.WORLD_SIZE_MC_HALF) { e._normalizedBounds.sw.lng = -gL.WORLD_SIZE_MC_HALF; e._normalizedBounds.ne.lng = gL.WORLD_SIZE_MC_HALF } }, getPathIn: function () { return this._path }, setPathIn: function (e) { this._path = e; this.setPoints(e) }, getCpsIn: function () { return this._cps }, setCpsIn: function (e) { this._cps = e; this.setPoints(this._path) }, calcBezierPoints: function (iV, iX) { var T = []; for (var e = 0; e < iV.length - 1; e++) { var iW = [iV[e], iX[e][0], iX[e][1], iV[e + 1]]; T = T.concat((this.bezierbetweenTwoP(iW))) } return T }, bezierbetweenTwoP: function (iX) { var T = 100; var iW = 1 / T; var e = []; for (var iV = 0; iV < T; iV++) { e.push(this.getPointOnCubicBezier(iX, iV * iW)) } return e }, getPointOnCubicBezier: function (iY, i2) { var i; var iX; var iV; var i3; var iW; var T; var i1; var e; var i0; var iZ; iV = 3 * (iY[1].lng - iY[0].lng); iX = 3 * (iY[2].lng - iY[1].lng) - iV; i = iY[3].lng - iY[0].lng - iV - iX; T = 3 * (iY[1].lat - iY[0].lat); iW = 3 * (iY[2].lat - iY[1].lat) - T; i3 = iY[3].lat - iY[0].lat - T - iW; i1 = i2 * i2; e = i1 * i2; i0 = (i * e) + (iX * i1) + (iV * i2) + iY[0].lng; iZ = (i3 * e) + (iW * i1) + (T * i2) + iY[0].lat; return new b8(i0, iZ) } }); function cg(iW, iY, e) { if (!iW || iW.length === 0) { return } this.userPath = iW; this.userCps = iY; var iV = []; for (var T = 0; T < iW.length; T++) { iV[T] = hZ.convertLL2MC(iW[T]) } if (!iY || iY.length === 0) { return } var iX = []; for (var T = 0; T < iY.length; T++) { iX[T] = []; iX[T][0] = hZ.convertLL2MC(iY[T][0]); if (iY[T][1]) { iX[T][1] = hZ.convertLL2MC(iY[T][1]) } else { iX[T][1] = hZ.convertLL2MC(iY[T][0]) } } fW.call(this, iV, iX, e) } cg.inherits(fW, "BezierCurveOut"); ej.extend(cg.prototype, { toString: function () { return "BezierCurve" }, setPath: function (iV) { if (!iV || iV.length === 0) { return } this.userPath = iV; var T = []; for (var e = 0; e < iV.length; e++) { T[e] = hZ.convertLL2MC(iV[e]) } this.setPathIn(T) }, getPath: function () { return this.userPath; var e = this.getPathIn(); if (!e || e.length === 0) { return [] } var iV = []; for (var T = 0; T < e.length; T++) { iV[T] = hZ.convertMC2LL(e[T]) } return iV }, getControlPoints: function () { return this.userCps; var e = this.getCpsIn(); if (!e || e.length === 0) { return [] } var iV = []; for (var T = 0; T < e.length; T++) { iV[T] = []; iV[T][0] = hZ.convertMC2LL(e[T][0]); iV[T][1] = hZ.convertMC2LL(e[T][1]) } return iV }, setControlPoints: function (iV) { if (!iV || iV.length === 0) { return } this.userCps = iV; var T = []; for (var e = 0; e < iV.length; e++) { T[e] = []; T[e][0] = hZ.convertLL2MC(iV[e][0]); if (iV[e][1]) { T[e][1] = hZ.convertLL2MC(iV[e][1]) } else { T[e][1] = hZ.convertLL2MC(iV[e][0]) } } this.setCpsIn(T) }, getBounds: function (i) { var e = this.getBoundsIn(i); var T = new g0(hZ.convertMC2LL(e.getSouthWest()), hZ.convertMC2LL(e.getNorthEast())); return T } }); function dI(e, T) { hv.call(this, T); this._normalizedBounds = new g0(); this.setPoints(e); var i = this; f8.load("poly", function () { i._draw() }) } dI.inherits(e7, "PolylineMultipart"); ej.extend(dI.prototype, { setPoints: function (e) { if (!e) { return } this._clearCache(); this.points = this._unifyArgs(e); this._calcBounds() }, _unifyArgs: function (T) { var e = []; var i = []; if (T.constructor === Array) { if (T[0].constructor === b8) { i.push(T) } else { i = T } } else { if (typeof T === "string") { i.push(T) } } ej.each(i, function (iV) { e.push(hv.getGraphPoints(iV)) }); return e }, setPointAt: function (i, e, T) { T = T || 0; if (!e || !this.points[T] || !this.points[T][i]) { return } this._clearCache(); this.points[T][i] = new b8(e.lng, e.lat); this._calcBounds() }, getBoundsIn: function (e) { if (!e) { this._bounds.setMinMax(); return this._bounds } this._normalizedBounds.setMinMax(); return this._normalizedBounds }, _calcBounds: function () { if (!this.points) { return } var e = this; e._bounds.setNorthEast(null); e._bounds.setSouthWest(null); if (e.greatCirclePoints && e.greatCirclePoints.length > 0) { ej.each(e.greatCirclePoints, function (i) { e._bounds.extend(i) }) } else { ej.each(e.points, function (i) { ej.each(i, function (T) { e._bounds.extend(T) }) }) } e._normalizedBounds.setSouthWest(e._bounds.getSouthWest()); e._normalizedBounds.setNorthEast(e._bounds.getNorthEast()); if (e._normalizedBounds.sw.lng < -gL.WORLD_SIZE_MC_HALF || e._normalizedBounds.ne.lng > gL.WORLD_SIZE_MC_HALF) { e._normalizedBounds.sw.lng = -gL.WORLD_SIZE_MC_HALF; e._normalizedBounds.ne.lng = gL.WORLD_SIZE_MC_HALF } } }); function gm(T, e) { hv.call(this, e); e = e || {}; if (typeof e.fillOpacity === "number") { this._config.fillOpacity = e.fillOpacity } else { this._config.fillOpacity = 0.6 } bR(this._config.fillOpacity, 0, 1); if (e.fillColor === "") { this._config.fillColor = "" } else { this._config.fillColor = e.fillColor ? e.fillColor : "#fff" } this._parseFillCacheWebGL = []; this.setPoints(T, e); var i = this; f8.load("poly", function () { i._draw() }) } gm.inherits(hv, "Polygon"); ej.extend(gm.prototype, { setPoints: function (iX) { var iV = []; if (typeof iX === "string" || iX.length === 1 || iX[0] instanceof b8 || iX[0] instanceof b3 || this instanceof f3 || iX.length === 0) { if (iX.length === 1) { iX = iX[0] } var e = this._processSinglePointArray(iX); this._userPoints = e.userPoints; iV = e.innerPoints; this.hasMultipleParts = false } else { this._userPoints = []; for (var iW = 0; iW < iX.length; iW++) { var T = this._processSinglePointArray(iX[iW]); this._userPoints.push(T.userPoints); iV.push(T.innerPoints) } this.hasMultipleParts = true } hv.prototype.setPoints.call(this, iV) }, setPathIn: function (e) { this.setPoints(e) }, _processSinglePointArray: function (e) { var i = hv.getGraphPoints(e).slice(0); innerPoints = i.slice(0); if (innerPoints.length > 1 && !innerPoints[0].equals(innerPoints[innerPoints.length - 1])) { innerPoints.push(new b8(innerPoints[0].lng, innerPoints[0].lat)) } return { userPoints: i, innerPoints: innerPoints } }, setPointAt: function (i, e) { if (!this._userPoints[i]) { return } this._clearCache(); this._userPoints[i] = new b8(e.lng, e.lat); this.points[i] = new b8(e.lng, e.lat); if (i === 0 && !this.points[0].equals(this.points[this.points.length - 1])) { this.points[this.points.length - 1] = new b8(e.lng, e.lat) } this._calcBounds() }, setPositionAt: function (i, e) { if (!this._userPoints[i]) { return } var T = hZ.convertLL2MC(e); this.setPointAt(i, T) }, getPoints: function () { var e = this._userPoints; if (e.length === 0) { e = this.points } return e }, getPathIn: function () { return this.getPoints() } }); function hB(i0, iX) { if (!i0 || i0.length === 0) { return } var iZ = []; if (typeof i0 === "string" || i0[0] instanceof b8 || i0[0] instanceof b3) { var e = this._processSinglePointArray(i0); for (var iY = 0; iY < e.innerPoints.length; iY++) { iZ[iY] = hZ.convertLL2MC(e.innerPoints[iY]) } } else { for (var iY = 0; iY < i0.length; iY++) { var T = this._processSinglePointArray(i0[iY]); var iW = []; for (var iV = 0; iV < T.innerPoints.length; iV++) { iW[iV] = hZ.convertLL2MC(T.innerPoints[iV]) } iZ.push(iW) } } gm.call(this, iZ, iX) } hB.inherits(gm, "PolygonOut"); ej.extend(hB.prototype, { toString: function () { return "Polygon" }, setPath: function (iV) { if (!iV || iV.length === 0) { return } iV = hv.getGraphPoints(iV); var T = []; for (var e = 0; e < iV.length; e++) { T[e] = hZ.convertLL2MC(iV[e]) } this.setPathIn(T) }, getPath: function () { var e = this.getPathIn(); if (!e || e.length === 0) { return [] } var iV = []; for (var T = 0; T < e.length; T++) { iV[T] = hZ.convertMC2LL(e[T]) } return iV } }); function f3(i, e, T) { this.point = i; this.radius = Math.abs(e); gm.call(this, [], T) } f3.parseTolerance = { 0: [0.01, 0.0001, 0.00001, 0.000004], 1: [1000, 10, 1, 0.4] }; f3.inherits(gm, "Circle"); ej.extend(f3.prototype, { initialize: function (e) { this.map = e; this.points = this._getPerimeterPoints(this.point, this.radius); this._calcBounds(); return null }, getPoint: function () { return this.point }, setPoint: function (e) { if (!e) { return } this.point = e; this.latLng = hZ.convertMC2LL(e) }, setCenterIn: function (e) { var i = arguments[1]; this.setPoint(e, i) }, setRadius: function (e) { this.radius = Math.abs(e) }, getCenterIn: function () { return this.point }, getRadius: function () { return this.radius }, _getPerimeterPoints: function (e, i2) { if (!e || !i2 || !this.map) { return [] } var T = this.map; var iZ = e.lng; var iX = e.lat; var i8 = hZ.convertMC2LL(e); iZ = i8.lng; iX = i8.lat; var i9 = []; var i4 = i2 / hZ.EARTHRADIUS; var i1 = (Math.PI / 180) * iX; var i7 = (Math.PI / 180) * iZ; for (var i0 = 0; i0 < 360; i0 += 9) { var iY = (Math.PI / 180) * i0; var i5 = Math.asin(Math.sin(i1) * Math.cos(i4) + Math.cos(i1) * Math.sin(i4) * Math.cos(iY)); var i3 = Math.atan2(Math.sin(iY) * Math.sin(i4) * Math.cos(i1), Math.cos(i4) - Math.sin(i1) * Math.sin(i5)); var i6 = ((i7 - i3 + Math.PI) % (2 * Math.PI)) - Math.PI; var iW = new b3(i5 * (180 / Math.PI), i6 * (180 / Math.PI)); i9.push(hZ.convertLL2MC(iW)) } var iV = i9[0]; i9.push(new b8(iV.lng, iV.lat)); if (iV) { this._radiusMercator = Math.sqrt(Math.pow(iV.lng - this.point.lng, 2) + Math.pow(iV.lat - this.point.lat, 2)) } else { this._radiusMercator = this.radius } return i9 } }); function aG(i, e, iV) { this.latLng = new b3(i.lat, i.lng); var T = hZ.convertLL2MC(i); f3.call(this, T, e, iV) } aG.inherits(f3, "CircleOut"); ej.extend(aG.prototype, { toString: function () { return "Circle" }, setCenter: function (e) { this.latLng = new b3(e.lat, e.lng); var i = hZ.convertLL2MC(e); this.setCenterIn(i) }, getCenter: function () { return this.latLng }, getPath: function () { var e = this.getPathIn(); if (!e || e.length === 0) { return [] } var iV = []; for (var T = 0; T < e.length; T++) { iV[T] = hZ.convertMC2LL(e[T]) } return iV } }); function iM(iV, e, i) { hv.call(this, i); i = i || {}; if (typeof i.topFillOpacity === "number") { this._config.topFillOpacity = i.topFillOpacity } else { this._config.topFillOpacity = 0.6 } if (typeof i.sideFillOpacity === "number") { this._config.sideFillOpacity = i.sideFillOpacity } else { this._config.sideFillOpacity = 0.8 } bR(this._config.sideFillOpacity, 0, 1); if (i.topFillColor === "") { this._config.topFillColor = "" } else { this._config.topFillColor = i.topFillColor ? i.topFillColor : "#fff" } if (i.sideFillColor === "") { this._config.sideFillColor = "" } else { this._config.sideFillColor = i.sideFillColor ? i.sideFillColor : "#fff" } this._parseFillCacheWebGL = []; this.setPoints(iV, i); this._config.altitude = e || 0; var T = this; f8.load("poly", function () { T._draw() }) } iM.inherits(hv, "Prism"); ej.extend(iM.prototype, { setPoints: function (iX) { var iV = []; if (typeof iX === "string" || iX[0] instanceof b8 || iX[0] instanceof b3 || this instanceof f3 || iX.length === 0) { var e = this._processSinglePointArray(iX); this._userPoints = e.userPoints; iV = e.innerPoints; this.hasMultipleParts = false } else { this._userPoints = []; for (var iW = 0; iW < iX.length; iW++) { var T = this._processSinglePointArray(iX[iW]); this._userPoints.push(T.userPoints); iV.push(T.innerPoints) } this.hasMultipleParts = true } hv.prototype.setPoints.call(this, iV) }, setPathIn: function (e) { this.setPoints(e) }, _processSinglePointArray: function (e) { var i = hv.getGraphPoints(e).slice(0); innerPoints = i.slice(0); if (innerPoints.length > 1 && !innerPoints[0].equals(innerPoints[innerPoints.length - 1])) { innerPoints.push(new b8(innerPoints[0].lng, innerPoints[0].lat)) } return { userPoints: i, innerPoints: innerPoints } }, setPointAt: function (i, e) { if (!this._userPoints[i]) { return } this._clearCache(); this._userPoints[i] = new b8(e.lng, e.lat); this.points[i] = new b8(e.lng, e.lat); if (i === 0 && !this.points[0].equals(this.points[this.points.length - 1])) { this.points[this.points.length - 1] = new b8(e.lng, e.lat) } this._calcBounds() }, getPoints: function () { var e = this._userPoints; if (e.length === 0) { e = this.points } return e }, getPathIn: function () { return this.getPoints() }, setTopFillOpacity: function (e) { if (e > 1 || e < 0) { return } this._config.topFillOpacity = e; this._setDomAttribute("topfillopacity", e) }, getTopFillOpacity: function () { return this._config.topFillOpacity }, setSideFillOpacity: function (e) { if (e > 1 || e < 0) { return } this._config.sideFillOpacity = e; this._setDomAttribute("sidefillopacity", e) }, getSideFillOpacity: function () { return this._config.sideFillOpacity }, setTopFillColor: function (e) { this._config.topFillColor = e || ""; this._setDomAttribute("topfillcolor", e) }, getTopFillColor: function () { return this._config.topFillColor }, setSideFillColor: function (e) { this._config.sideFillColor = e || ""; this._setDomAttribute("sidefillcolor", e) }, getSideFillColor: function () { return this._config.sideFillColor }, setAltitude: function (e) { this._config.altitude = Number(e); this.draw(); var i = new eX("onlineupdate"); i.overlay = this; this.dispatchEvent(i) }, getAltitude: function () { return this._config.altitude } }); function bd(iZ, iX, i0) { if (!iZ || iZ.length === 0) { return } this.userPath = iZ; var e = []; if (typeof iZ === "string" || iZ[0] instanceof b8 || iZ[0] instanceof b3) { var i1 = this._processSinglePointArray(iZ); for (var iW = 0; iW < i1.innerPoints.length; iW++) { e[iW] = hZ.convertLL2MC(i1.innerPoints[iW]) } } else { for (var iW = 0; iW < iZ.length; iW++) { var iY = this._processSinglePointArray(iZ[iW]); var T = []; for (var iV = 0; iV < iY.innerPoints.length; iV++) { T[iV] = hZ.convertLL2MC(iY.innerPoints[iV]) } e.push(T) } } iM.call(this, e, iX, i0) } bd.inherits(iM, "PrismOut"); ej.extend(bd.prototype, { toString: function () { return "Prism" }, setPath: function (iV) { if (!iV || iV.length === 0) { return } this.userPath = iV; var T = []; for (var e = 0; e < iV.length; e++) { T[e] = hZ.convertLL2MC(iV[e]) } this.setPathIn(T) }, getPath: function () { return this.userPath; var e = this.getPathIn(); if (!e || e.length === 0) { return [] } var iV = []; for (var T = 0; T < e.length; T++) { iV[T] = hZ.convertMC2LL(e[T]) } return iV } }); function bH(T, e) { hv.call(this, e); e = e || {}; this._config.type = e.type || "image"; this._config.url = e.url || ""; this._config.opacity = typeof e.opacity === "number" ? e.opacity : 1; bR(this._config.opacity, 0, 1); this._parseFillCacheWebGL = []; this.setPoints(T, e); var i = this; f8.load("poly", function () { i._draw() }) } bH.inherits(hv, "GroundOverlay"); ej.extend(bH.prototype, { setPoints: function (i) { var e = hv.getGraphPoints(i).slice(0); this.hasMultipleParts = false; hv.prototype.setPoints.call(this, e) }, setPathIn: function (e) { this.setPoints(e) }, getPoints: function () { return this.points }, getPathIn: function () { return this.getPoints() } }); function fc(iW, T) { if (!iW) { return } var iY = [new b8(iW.sw.lng, iW.ne.lat), new b8(iW.ne.lng, iW.ne.lat), new b8(iW.ne.lng, iW.sw.lat), new b8(iW.sw.lng, iW.sw.lat)]; var e = hv.getGraphPoints(iY).slice(0); var iX = []; for (var iV = 0; iV < e.length; iV++) { iX[iV] = hZ.convertLL2MC(e[iV]) } bH.call(this, iX, T) } fc.inherits(bH, "GroundOverlayOut"); ej.extend(fc.prototype, { toString: function () { return "GroundOverlay" } }); var ak = {}; function g3(T, i) { ej.BaseClass.call(this); this.content = T; this.map = null; this._config = { width: 0, height: 0, maxWidth: 600, offset: new hS(0, 0), title: "", maxContent: "", enableMaximize: false, enableAutoPan: true, enableCloseOnClick: true, margin: [10, 10, 40, 10], collisions: [[10, 10], [10, 10], [10, 10], [10, 10]], ifMaxScene: false, onClosing: function () { return true } }; this.setConfig(i); if (this._config.width < 50) { this._config.width = 50 } if (this._config.width > 730) { this._config.width = 730 } if (this._config.height != 0) { if (this._config.height < 50) { this._config.height = 50 } if (this._config.height > 650) { this._config.height = 650 } } if (this._config.maxWidth !== 0) { if (this._config.maxWidth < 50) { this._config.maxWidth = 50 } if (this._config.maxWidth > 730) { this._config.maxWidth = 730 } } this.isWinMax = false; this.IMG_PATH = u.imgPath; this.overlay = null; var e = this; f8.load("simpleInfowindow", function () { e._draw() }) } g3.inherits(ej.BaseClass, "SimpleInfoWindow"); ej.extend(g3.prototype, { setWidth: function (e) { e = e * 1; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 50) { e = 50 } if (e > 730) { e = 730 } } this._config.width = e }, setHeight: function (e) { e = e * 1; e -= 10; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 50) { e = 50 } if (e > 650) { e = 650 } } this._config.height = e }, setMaxWidth: function (e) { e = e * 1; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 50) { e = 50 } if (e > 730) { e = 730 } } this._config.maxWidth = e }, setTitle: function (e) { this._config.title = e || "" }, setContent: function (e) { this.content = e || "" }, setMaxContent: function (e) { this._config.maxContent = e || "" }, redraw: function () { }, enableAutoPan: function () { this._config.enableAutoPan = true }, disableAutoPan: function () { this._config.enableAutoPan = false }, enableCloseOnClick: function () { this._config.enableCloseOnClick = true }, disableCloseOnClick: function () { this._config.enableCloseOnClick = false }, enableMaximize: function () { this._config.enableMaximize = true }, disableMaximize: function () { this._config.enableMaximize = false }, show: function () { this._visible = true }, hide: function () { this._visible = false }, close: function () { this.hide() }, dispose: function () { ej.BaseClass.prototype.decontrol.call(this) }, maximize: function () { this.isWinMax = true }, restore: function () { this.isWinMax = false }, setConfig: function (i) { if (!i) { return } for (var e in i) { if (typeof (this._config[e]) == typeof (i[e])) { this._config[e] = i[e] } } }, isVisible: function () { return this.isOpen() }, isOpen: function () { return false }, getPoint: function () { if (this.overlay && this.overlay.getPoint) { return this.overlay.getPoint() } }, getOffset: function () { return this._config.offset }, dispose: function () { ej.BaseClass.prototype.decontrol.call(this) }, toString: function () { return "SimpleInfoWindow" } }); gL.prototype.openSimpleInfoWindow = function (iV, e) { if (!iV || iV.toString() != "SimpleInfoWindow" || !e || e.toString() != "Point") { return } var i = this.temp; if (!i.marker) { var T = new id(u.imgPath + "blank.gif", { width: 1, height: 1 }); i.marker = new iC(e, { icon: T, width: 1, height: 1, offset: new hS(0, 0), infoWindowOffset: new hS(0, 0), clickable: false }); i.marker._fromMap = 1 } else { i.marker.setPoint(e) } this.addOverlay(i.marker); i.marker.show(); i.marker.openSimpleInfoWindow(iV) }; gL.prototype.closeSimpleInfoWindow = function () { var e = this.temp.infoWin || this.temp._infoWin; if (e && e.overlay) { e.overlay.closeSimpleInfoWindow() } }; dX.prototype.openSimpleInfoWindow = function (e) { if (this.map) { this.map.closeSimpleInfoWindow(); e._visible = true; this.map.temp._infoWin = e; e.overlay = this; ej.BaseClass.call(e, e.hashCode) } }; dX.prototype.closeSimpleInfoWindow = function () { if (this.map && this.map.temp._infoWin) { this.map.temp._infoWin._visible = false; this.map.temp._infoWin.decontrol(); this.map.temp._infoWin = null } }; function eB(e, i) { e = isNaN(e) ? 0 : e; i = isNaN(i) ? 0 : i; this.x = e; this.y = i } eB.prototype.equals = function (e) { if (!e) { return false } return e.x === this.x && e.y === this.y }; eB.prototype.clone = function () { return new eB(this.x, this.y) }; eB.prototype.toString = function () { return "Pixel" }; function hS(i, e) { if (typeof i !== "number") { this.width = parseFloat(i) } else { this.width = i } if (typeof e !== "number") { this.height = parseFloat(e) } else { this.height = e } } hS.prototype.equals = function (e) { return !!(e && this.width === e.width && this.height === e.height) }; hS.prototype.toString = function () { return "Size" }; var iO = { B_NORMAL_MAP: { tileUrls: c1(u.tileDomain, u.rasterTilePath), vectorTileUrls: c1(u.tileDomain, u.vectorTilePath), tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, webgl: { minZoom: 3, maxZoom: 25 }, zoomLevelBase: 18, errorUrl: u.imgPath + "bg.png", bounds: new g0(new b8(-21364736, -11708041.66), new b8(23855104, 12474104.17)), imgExtend: "png" }, B_SATELLITE_MAP: { tileUrls: ["//maponline0.bdimg.com/starpic/?qt=satepc&", "//maponline1.bdimg.com/starpic/?qt=satepc&", "//maponline2.bdimg.com/starpic/?qt=satepc&", "//maponline3.bdimg.com/starpic/?qt=satepc&"], tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, zoomLevelBase: 18, errorUrl: u.imgPath + "bg.png", bounds: new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)), imgExtend: "png" }, B_STREET_MAP: { tileUrls: c1(u.tileDomain, u.rasterTilePath), tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, zoomLevelBase: 18, errorUrl: u.imgPath + "bg.png", bounds: new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)), imgExtend: "png" }, BMAP_CUSTOM_LAYER: { tileUrls: [""], tileSize: 256, baseUnits: 256, zoomLevelMin: 1, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, zoomLevelBase: 18, errorUrl: u.imgPath + "blank.gif", bounds: new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)), imgExtend: "png" }, B_EARTH_MAP: { tileUrls: [""], tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, webgl: { minZoom: 3, maxZoom: 21 }, zoomLevelBase: 18, errorUrl: u.imgPath + "blank.gif", bounds: new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)), imgExtend: "png" }, B_NONE_MAP: { tileUrls: "", tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, zoomLevelBase: 18, errorUrl: u.imgPath + "bg.png", bounds: new g0(new b8(-21364736, -11708041.66), new b8(23855104, 12474104.17)), imgExtend: "png" } }; var dG = iO; function ck(iY, iZ, T, e, iX) { if (iX && dG[iX]) { this.mapTypeName = iX } else { this.mapTypeName = BMAP_NORMAL_MAP } if (iY && iY instanceof Array) { var iW = true; for (var iV = 0; iV < iY.length; iV++) { if (iY[iV] instanceof g0) { continue } else { iW = false; break } } iW && (this.bounds = iY) } if (typeof iZ === "number" && iZ >= dG[this.mapTypeName].webgl.minZoom) { if (dG[this.mapTypeName].webgl) { if (iZ >= dG[this.mapTypeName].webgl.minZoom) { this.minZoom = iZ } else { this.minZoom = dG[this.mapTypeName].webgl.minZoom } } else { if (iZ >= dG[this.mapTypeName].minZoom) { this.minZoom = iZ } else { this.minZoom = dG[this.mapTypeName].minZoom } } } if (typeof T === "number") { if (dG[this.mapTypeName].webgl) { if (T <= dG[this.mapTypeName].webgl.maxZoom) { this.maxZoom = T } else { this.maxZoom = dG[this.mapTypeName].webgl.maxZoom } } else { if (T <= dG[this.mapTypeName].maxZoom) { this.maxZoom = T } else { this.maxZoom = dG[this.mapTypeName].maxZoom } } } if (this.maxZoom < this.minZoom) { this.maxZoom = null } if (e && typeof e === "function") { this.tileUrlFunction = e } } ej.extend(ck.prototype, { addBoundary: function (e) { if (e instanceof g0) { if (this.bounds) { this.bounds.push(e) } else { this.bounds = [e] } } }, setTileUrlFunction: function (e) { if (e && typeof e === "function") { this.tileUrlFunction = e } }, crossPoint: function (e, iV, iW) { if (iW < this.minZoom || iW > this.maxZoom) { return false } var iX = this.containsPoint(e, iW); if (iX) { return iX } for (var T = 0; T < this.bounds.length; T++) { if (this.bounds[T].intersects(iV)) { iX = true; break } } return iX }, containsPoint: function (e, iV) { if (!e || !(e instanceof b8) || !this.isValid()) { return false } var iW = false; if (iV < this.minZoom || iV > this.maxZoom) { return iW } for (var T = 0; T < this.bounds.length; T++) { if (this.bounds[T].containsPoint(e)) { iW = true; break } } return iW }, isValid: function () { return this.bounds && this.minZoom && this.maxZoom && this.tileUrlFunction }, toString: function () { return "PrivateRegionDataModel" } }); function gK(i0, i, iW, T, iV) { this.mgr = i0; this.position = iW; this._cbks = []; this.name = i0.getTileName(T, iV, i0.map.config.style); this.info = T; this._transparentPng = iV.isTransparentPng(); var i1 = bG("img"); g2(i1); i1.galleryImg = false; var iZ = i1.style; iZ.position = "absolute"; iZ.width = i0.tileSize + "px"; iZ.height = i0.tileSize + "px"; iZ.left = iW[0] + "px"; iZ.top = iW[1] + "px"; this.img = i1; this.src = i; if (dY && iW._offsetX === 0) { iZ.opacity = 0; iZ.willChange = "opacity" } var iY = this; this.img.onload = function (i9) { if (!iY.mgr) { return } var i4 = iY.mgr; var i2 = i4.bufferTiles; if (i4.bufferNumber > 0) { i2[iY.name] = iY; i2.push(iY.name) } var i6 = i2.length - i4.bufferNumber; for (var i7 = 0; i6 > 0 && i7 < i2.length; i7++) { var i8 = i2[i7]; if (!i4.mapTiles[i8]) { if (i2[i8]) { i2[i8].mgr = null; var i5 = i2[i8].img; if (i5.parentNode) { hk(i5); i5.parentNode.removeChild(i5) } i5 = null; i2[i8].img = null; i2[i8] = null; delete i2[i8] } i2.splice(i7, 1); i7--; i6-- } } iY.loaded = true; i4.imgNumber++; if (!aE(iY.img)) { if (iV.tilesDiv) { iV.tilesDiv.appendChild(iY.img) } } var i9 = new eX("onimagechange"); i9.action = "show"; i9.tile = iY.name; i4.map.dispatchEvent(i9); if (dY && iW._offsetX === 0) { var i3 = new eQ({ fps: 10, duration: 300, render: function (e) { if (iY.img && iY.img.style) { iY.img.style.opacity = e * 1 } }, finish: function () { if (iY.img && iY.img.style) { delete iY.img.style.opacity; iY.img.style.willChange = "auto" } } }) } iY._callCbks() }; this.img.onerror = function (i4) { iY.error = true; iY._callCbks(); if (!iY.mgr) { return } var i2 = iY.mgr; var i3 = dG[iV.mapType]; if (i3.errorUrl) { iY.img.src = i3.errorUrl } if (!aE(iY.img)) { if (iV.tilesDiv) { iV.tilesDiv.appendChild(iY.img) } } }; i1 = null; var iX = new eX("onimagebefore"); iX.tile = iY.name; i0.map.dispatchEvent(iX) } gK.prototype._addLoadCbk = function (e) { this._cbks.push(e) }; gK.prototype._load = function () { if (FeBrowser.ie <= 6 && FeBrowser.ie > 0 && this._transparentPng) { this.img.src = u.imgPath + "blank.gif" } else { this.img.src = this.src } }; gK.prototype._callCbks = function () { var T = this; for (var e = 0; e < T._cbks.length; e++) { T._cbks[e]() } T._cbks.length = 0 }; var dY = (!ej.Browser.ie || ej.Browser.ie > 8); function h6(e) { this.tileLayers = []; this.map = e; this.bufferNumber = 300; this.mapTiles = []; this.bufferTiles = []; this.config = dG[this.map.mapType]; this.errorUrl = this.config.errorUrl; this.tileSize = this.config.tileSize; this.baseUnits = this.config.baseUnits; this.baseZoomLevel = this.config.zoomLevelBase; this.tileURLs = this.config.tileUrls; this.imgNumber = 0; this.numLoading = 0; this.temp = {} } bk.register(function (i) { if (i._renderType === "webgl") { return } var e = i.tileMgr = new h6(i); i.addEventListener("mousewheel", function (T) { e.mouseWheel(T) }); i.addEventListener("dblclick", function (T) { e.dblClick(T) }); i.addEventListener("rightdblclick", function (T) { e.dblClick(T) }); i.addEventListener("minuspress", function (T) { e.keypress(T) }); i.addEventListener("pluspress", function (T) { e.keypress(T) }); i.addEventListener("load", function (T) { if (this.mapType === BMAP_EARTH_MAP) { return } e.loadTiles() }); i.addEventListener("zoomstartcode", function (T) { if (this.mapType === BMAP_EARTH_MAP) { return } e._zoom(T) }); i.addEventListener("moving", function (T) { if (this.mapType === BMAP_EARTH_MAP) { return } e.moveGridTiles() }); i.addEventListener("resize", function (T) { if (this.mapType === BMAP_EARTH_MAP) { return } e.resizeMap(T) }); i.addEventListener("addtilelayer", function (T) { e.addTileLayer(T) }); i.addEventListener("removetilelayer", function (T) { e.removeTileLayer(T) }) }); ej.extend(h6.prototype, { addTileLayer: function (iV) { var T = this; var i = iV.target; T.tileLayers.push(i); if (T.map.loaded) { T.moveGridTiles() } }, removeTileLayer: function (i2) { var i3 = this; var i0 = i2.target; var iY = i0.mapType; var iX = i3.mapTiles; var i5 = i3.bufferTiles; for (var T in i5) { var iV = T.split("-")[1]; if (iV == iY) { delete i5[T] } } for (var T in iX) { var iV = T.split("-")[1]; if (iV == iY) { delete iX[T] } } if (i3.zoomsDiv && i3.zoomsDiv.parentNode) { i3.zoomsDiv.parentNode.removeChild(i3.zoomsDiv); i3.zoomsDiv.innerHTML = "" } var iW = i3.map; if (iW.deepZoom) { var i4 = iW.deepZoom.preDeepZoomDiv; if (i4 && i4.parentNode) { i4.parentNode.removeChild(i4) } } for (var i1 = 0, iZ = i3.tileLayers.length; i1 < iZ; i1++) { if (i0 == i3.tileLayers[i1]) { i3.tileLayers.splice(i1, 1) } } i3.moveGridTiles() }, hideDeepZoomDiv: function () { var i = this, T = i.map; if (T.deepZoom) { var e = T.deepZoom.preDeepZoomDiv; if (e && e.style.display != "none") { e.style.display = "none" } } }, getTileLayer: function (iW) { var iV = this; for (var T = 0, e = iV.tileLayers.length; T < e; T++) { tilelayer = iV.tileLayers[T]; if (tilelayer.mapType == iW) { return tilelayer } } return null }, _zoom: function (T) { var i = this; if (i.zoomsDiv && i.zoomsDiv.style.display != "none") { i.zoomsDiv.style.display = "none" } i.hideDeepZoomDiv(); i.moveGridTiles() }, resizeMap: function (i) { this.loaded = false; this.moveGridTiles() }, _checkTilesLoaded: function () { this.numLoading--; var e = this; if (this.numLoading == 0) { if (this._checkLoadedTimer) { clearTimeout(this._checkLoadedTimer); this._checkLoadedTimer = null } this._checkLoadedTimer = setTimeout(function () { if (e.numLoading == 0) { e.map.dispatchEvent(new eX("ontilesloaded")) } e._checkLoadedTimer = null }, 80) } }, getTileName: function (e, T, i) { var iW = T.mapType; var iV = "TILE-" + iW + "-" + i + "-" + e[0] + "-" + e[1] + "-" + e[2]; return iV }, hideTile: function (iV, T) { var i = iV.img; if (aE(i)) { if (iV.loaded) { this.imgNumber-- } if (i.parentNode) { hk(i); i.parentNode.removeChild(i) } } var iW = new eX("onimagechange"); iW.tile = this.getTileName(iV.info, T, this.map.config.style); iW.action = "hide"; delete this.mapTiles[iV.name]; if (!iV.loaded) { hk(i); iV._callCbks(); i = null; iV.img = null; iV.mgr = null } this.map.dispatchEvent(iW) }, loadTiles: function () { var i = this; if (ej.Browser.ie) { try { document.execCommand("BackgroundImageCache", false, true) } catch (T) { } } if (this.zoomsDiv && this.zoomsDiv.style.display != "none") { this.zoomsDiv.style.display = "none" } i.hideDeepZoomDiv(); i.moveGridTiles() }, getCell: function (iW, iV) { var e = this.baseUnits * Math.pow(2, (this.baseZoomLevel - iV)); var T = parseInt(iW.lng / e); var i = parseInt(iW.lat / e); return [T, i, e * (T + 0.5), e * (i + 0.5)] }, moveGridTiles: function () { var i9 = this.map, ji = i9.getMapType(), jg = this.tileLayers.length; var je = i9.centerPoint; if (ji !== BMAP_SATELLITE_MAP) { je = em.calcLoopCenterPoint(je) } var i0 = i9.width; var ju = i9.getZoomUnits(); var jf = ju * i0; var jk = je.lng - jf / 2; var i5 = je.lng + jf / 2; var i8 = em.isAddWidth(jk, i5); for (var jm = 0; jm < jg; jm++) { var iW = this.tileLayers[jm]; if (iW.baseLayer || jg == 1) { this.tilesDiv = iW.tilesDiv } var ja = dG[iW.mapType]; var iV = i9.zoomLevel; var jp = i9.getZoomUnits(i9.zoomLevel); var i4 = ja.baseUnits * Math.pow(2, (ja.zoomLevelBase - iV)); var i2 = Math.floor(je.lng / i4); var jl = Math.floor(je.lat / i4); var i7 = ja.tileSize; var jb = [i2, jl, (je.lng - i2 * i4) / i4 * i7, (je.lat - jl * i4) / i4 * i7]; var i3 = i8 ? i9.width / 2 * 1.5 : i9.width / 2; var i6 = jb[0] - Math.ceil((i3 - jb[2]) / i7); var jt = jb[1] - Math.ceil((i9.height / 2 - jb[3]) / i7); var jn = jb[0] + Math.ceil((i3 + jb[2]) / i7); var jc = jb[1] + Math.ceil((i9.height / 2 + jb[3]) / i7); var i1 = []; for (var jr = i6; jr < jn; jr++) { for (var jq = jt; jq < jc; jq++) { i1.push([jr, jq]); var jh = "id_" + jr + "_" + jq + "_" + iV; i1[jh] = true } } if (iW.mapType !== BMAP_SATELLITE_MAP) { i1 = em.calcLoopTiles(i1, iV) } i1.sort((function (i) { return function (jw, jx) { return ((0.4 * Math.abs(jw[0] - i[0]) + 0.6 * Math.abs(jw[1] - i[1])) - (0.4 * Math.abs(jx[0] - i[0]) + 0.6 * Math.abs(jx[1] - i[1]))) } })([jb[0], jb[1]])); var T = this.mapTiles; var e = -je.lng / jp; var jv = je.lat / jp; var jj = [e, jv]; for (var jd in T) { var iY = T[jd]; var js = iY.info; if (!js) { continue } var jh = "id_" + js[0] + "_" + js[1] + "_" + js[2]; if (!i1[jh]) { this.hideTile(iY, iW) } } var iX = -i9.offsetX + i9.width / 2; var iZ = -i9.offsetY + i9.height / 2; iW.tilesDiv.style.left = Math.round(e + iX) - jj[0] + "px"; iW.tilesDiv.style.top = Math.round(jv + iZ) - jj[1] + "px"; this.numLoading += i1.length; for (var jr = 0, jo = i1.length; jr < jo; jr++) { this.showTile([i1[jr][0], i1[jr][1], i9.zoomLevel], jj, iW, jr, i9.config.style) } } }, showTile: function (iY, iX, i1, i6) { this.centerPos = iX; var iZ = dG[i1.mapType]; var i2 = this.map.config.style; var iV = this.getTileName(iY, i1, i2); var iW = (iY[0] * iZ.tileSize) + iX[0]; var T = (-1 - iY[1]) * iZ.tileSize + iX[1]; var i5 = [iW, T]; var i0 = null; if (i1.mapType !== BMAP_SATELLITE_MAP) { i0 = em.calcLoopParam(iY[0], iY[2]); var i4 = i0.offsetX; i5[0] += i4; i5._offsetX = i4 } var i9 = this; var i8 = this.mapTiles[iV]; if (i8) { i8.img.style.left = i5[0] + "px"; i8.img.style.top = i5[1] + "px"; if (i8.loaded) { this._checkTilesLoaded() } else { i8._addLoadCbk(function () { i9._checkTilesLoaded() }) } return } i8 = this.bufferTiles[iV]; if (i8) { this.imgNumber++; i1.tilesDiv.insertBefore(i8.img, i1.tilesDiv.lastChild); this.mapTiles[iV] = i8; i8.img.style.left = i5[0] + "px"; i8.img.style.top = i5[1] + "px"; if (i8.loaded) { this._checkTilesLoaded() } else { i8._addLoadCbk(function () { i9._checkTilesLoaded() }) } var i7 = new eX("onimagechange"); i7.action = "cache"; i7.tile = this.getTileName(iY, i1, i2); this.map.dispatchEvent(i7) } else { var i3 = new eB(iY[0], iY[1]); if (i0) { i3.x = i0.col } var i = i1.getTilesUrl(i3, iY[2]); i8 = new gK(this, i, i5, iY, i1); i8._addLoadCbk(function () { i9._checkTilesLoaded() }); i8._load(); this.mapTiles[iV] = i8; gl(this.map) } }, mouseWheel: function (iZ) { var iY = this.map; if (!iY.config.enableWheelZoom) { return } var i0 = iY.zoomLevel + (iZ.trend === true ? 1 : -1); var iW = iY._getProperZoom(i0); if (iW.exceeded) { var T = new eX("onzoomexceeded"); T.targetZoom = i0; iY.dispatchEvent(T); return } iY.dispatchEvent(new eX("onzoomstart")); iY.lastLevel = iY.zoomLevel; iY.zoomLevel = iW.zoom; var i = iZ.pixel; var iV = iY.pixelToPointIn(i, { zoom: iY.lastLevel }); var iX = iY.getZoomUnits(iY.zoomLevel); iY.centerPoint = new b8(iV.lng + iX * (iY.width / 2 - i.x), iV.lat - iX * (iY.height / 2 - i.y)); this.zoom(i) }, dblClick: function (T) { var i = this.map; if (!i.config.enableDblclickZoom) { return } if (i.mapType === "B_EARTH_MAP") { return } if (i.currentOperation === dA.dragging) { return } if (T.type == "onrightdblclick") { i.zoomOut(T.point) } else { i.zoomIn(T.point) } }, keypress: function (T) { var i = this.map; if (i.getMapType() === BMAP_EARTH_MAP) { return } T.type == "onpluspress" ? i.zoomIn() : i.zoomOut() } }); function gy(iV) { this.opts = iV || {}; this.copyright = this.opts.copyright || {}; this.transparentPng = this.opts.transparentPng || false; this.png8 = this.opts.png8 || false; this.baseLayer = this.opts.baseLayer || false; this.dataType = this.opts.dataType || 1; this.transform = this.opts.transform || 0; this.isFlat = !this.opts.isFlat ? false : true; this.showLabel = this.opts.showLabel === false ? false : true; var e = this.opts.tileTypeName || "web"; this.tileType = g1.getInstance(e); this.clipTile = this.opts.clipTile || false; this._type = "tilelayer"; var i = bF() ? 128 : 256; this.cacheSize = this.opts.cacheSize || i; var T = this; this.tileCache = new ao(this.cacheSize, { clearCallback: function (iW) { if (iW.label) { if (iW.label.textImageBitmap) { iW.label.textImageBitmap.close() } if (iW.label.indoorTextImageBitmap) { iW.label.indoorTextImageBitmap.close() } } T._removeIndoorData(iW) } }); this.scaler = fp() >= 1.5 ? 2 : 1; this.normalUdt = iB("ditu", "normal").udt; this.numLoading = 0; this.useThumbData = false; this.useThumbData = this.opts.useThumbData || false; if (this.baseLayer) { this.useThumbData = true } if (typeof this.opts.customLayer === "boolean") { this.customLayer = this.opts.customLayer } else { this.customLayer = true } } gy.inherits(cD, "TileLayer"); ej.extend(gy.prototype, { isTransparentPng: function () { return this.transparentPng }, getTilesUrl: function (i2, e) { var T = dG[this.mapType]; if (typeof T !== "object") { return null } var iV = i2.x; var i3 = i2.y; if (this.mapType !== BMAP_SATELLITE_MAP) { var i3 = em.calcLoopParam(i3, e).col } var i = ""; if (this.opts.tileUrlTemplate) { i = this.opts.tileUrlTemplate; i = i.replace(/\{X\}/, i3); i = i.replace(/\{Y\}/, iV); i = i.replace(/\{Z\}/, e) } else { if (this.mapType === BMAPGL_NORMAL_MAP) { var i1 = this.isCanvasMap ? 0 : 1; var iX = T.tileUrls[Math.abs(i3 + iV) % T.tileUrls.length]; if (window.offLineIPAddress) { iX = window.offLineIPAddress + "tile5/" } var iW = this.map.config.style; i = iX + "?qt=vtile&x=" + iV + "&y=" + i3 + "&z=" + e + (iW === "default" ? "" : ("&styleId=1")) + "&styles=pl&udt=" + this.normalUdt + "&scaler=" + this.scaler + "&showtext=" + i1; i = i.replace(/-(\d+)/gi, "M$1") } if (this.mapType === BMAP_SATELLITE_MAP) { var iY = iB("ditu", "satellite"); var i0 = iY.ver; var iZ = iY.udt; i = T.tileUrls[Math.abs(i3 + iV) % T.tileUrls.length] + "u=x=" + iV + ";y=" + i3 + ";z=" + e + ";v=" + i0 + ";type=sate&fm=46&udt=" + iZ; i = i.replace(/-(\d+)/gi, "M$1") } } return i }, initialize: function (iX) { this.map = iX; if (iX._renderType === "webgl") { var iW = null; if (this.customLayer !== false) { iW = this.getTilesUrl } ej.extend(this, ey); this.labelProcessor = new h1(this); this.callbackDataQueue = []; if (iW) { this.getTilesUrl = iW } var i = this; iX.on("indoor_data_refresh", function (iY) { if (!i.baseLayer) { return } i._refreshIndoorData(iY.uid, iY.floor) }); iX.on("custom_labels_ready", function (iY) { if (!i.baseLayer) { return } i._doWorkAfterLabelImageLoad(iY.virtualTile, iY.labelCanvas, null, iY.imgKey) }); iX.on("glmoduleloaded", function () { if (!i.baseLayer) { return } i.updateAllIconsTextureCoords() }); iX.on("layer_update", function (iZ) { if (iZ.name === i.tileType.getName() && iX.customLoaded) { i.tileCache.clear(); iX._featureMgr.clearData(i.drawIndex); iX._featureMgr.setLabelData([]); iX._featureMgr.clearLabelOverlayData(); i.labelProcessor.iconCache = {}; var iY = new eX("onlayer_clear"); iX.fire(iY) } }) } if (!iX.temp.layerZIndex) { iX.temp.layerZIndex = 0 } this.zIndex = this.zIndex || 0; if (this.baseLayer) { this.zIndex = 0 } this.adjustZIndex(); if (!iX.temp.layid) { iX.temp.layid = 0 } if (!this.opts.mapType) { this.mapType = "BMAP_CUSTOM_LAYER_" + iX.temp.layid; iX.temp.layid++ } else { this.mapType = this.opts.mapType } var T = dG[this.mapType]; if (!T) { dG[this.mapType] = { tileUrls: [], tileSize: 256, baseUnits: 256, zoomLevelMin: 1, zoomLevelMax: 19, minZoom: 3, maxZoom: 19, minDataZoom: 3, maxDataZoom: 19, zoomLevelBase: 18, errorUrl: u.imgPath + "/blank.gif", bounds: new g0(new b8(-21364736, -10616832), new b8(23855104, 15859712)), imgExtend: "png" } } if (iX._renderType !== "webgl") { var iV = bw(iX.platform, '<div style="position:absolute;z-index:' + this.zIndex + '"></div>'); iV.style.display = ""; iV.style.left = Math.ceil(-iX.offsetX + iX.width / 2) + "px"; iV.style.top = Math.ceil(-iX.offsetY + iX.height / 2) + "px"; this.tilesDiv = iV } this.isCanvasMap = iX.isCanvasMap(); this.lastZoom = iX.getZoom(); var e = this; this.addEventListener("initDrawData", function (iY) { if (e.opts.boundary) { e.addBoundary(e.opts.boundary) } }) }, remove: function () { if (this.tilesDiv && this.tilesDiv.parentNode) { this.tilesDiv.innerHTML = ""; this.tilesDiv.parentNode.removeChild(this.tilesDiv) } delete this.tilesDiv }, getCopyright: function () { return this.copyright }, getMapType: function () { return this.mapType }, adjustZIndex: function () { if (this.map && this.map._featureMgr) { var e = this.map._featureMgr.result.bkData; while (e[this.zIndex]) { this.zIndex += 1 } } }, setZIndex: function (e) { this.setTargetZIndex(e) }, setTargetZIndex: function (e) { this.zIndex = e; this.drawIndex = e; if (this.tilesDiv) { this.tilesDiv.style.zIndex = e } }, calcLoopParam: function (e, i) { return em.calcLoopParam(e, i) }, addBoundary: function (iX) { if (!iX || !this.map) { return } if (typeof iX === "string") { iX = [iX] } for (var iV = 0; iV < iX.length; iV++) { var T = new BMapGL.Polygon(iX[iV]); if (T && bC(T._i)) { var iW = new eX("onbeforeaddoverlay", T); iW.overlay = T; iW.isLayerMask = true; this.map.dispatchEvent(iW); T._i(this.map); if (this.boundary) { this.boundary.push(T) } else { this.boundary = [T] } } } this.updateBoundary() }, clearBoundary: function () { this.boundary = false; this.updateBoundary() }, updateBoundary: function () { if (this.boundary === undefined || !this.map) { return } var i = this.map._featureMgr.result.bkData; if (i[this.zIndex]) { i[this.zIndex].boundary = this.boundary; this.map.dispatchEvent(new eX("onrefresh")); if (this.boundary === false) { var T = new eX("onremoveLayerMask"); T.hasLayerBoundary = this.map._featureMgr.hasLayerBoundary(); this.map.dispatchEvent(T) } } } }); function g(i, e, T) { this.bounds = i; this.content = e; this.mapType = T } g.inherits(cD, "Copyright"); var dL = { get: function (e) { if (!dL.singleton) { dL.singleton = new fi(e) } return dL.singleton } }; function fi(i) { this._map = i; this._tileMgr = i.tileMgr; this._animationDiv = null; this._preAnimationDiv = null; this._animation = null; this._baseLayerDiv = null; this._transformStyleName = cB.ifSupportCSS3("transform", true); this._transformOriginStyleName = cB.ifSupportCSS3("transformOrigin", true); this._preZoomTimes = 1; this._preRenderTick = 1; this._enableCanvas2dMap = !!(i.getRenderType() === "canvas"); this._isIE9 = !!(ej.Browser.ie === 9); var e = this; i.addEventListener("maptypechange", function () { e.hide() }); i.addEventListener("load", function () { e.hide() }) } ej.extend(fi.prototype, { prepareLayer: function () { var iV = this._map; var e = this._tileMgr; this._canvas2dMapMgr = iV.canvas2dMapMgr; var T = this._baseLayerDiv = e.tilesDiv; if (!this._animationDiv) { var i = this._preAnimationDiv; if (i) { i.parentNode && i.parentNode.removeChild(i); this._preAnimationDiv = null } this._preAnimationDiv = this._animationDiv = T.cloneNode(true); iV.platform.insertBefore(this._animationDiv, iV.platform.firstChild) } this.show() }, prepareAniParam: function () { var iV = this._animationDiv; if (!iV) { return } var e = iV.children.length; var T; this._zoomAniInfo = []; for (var iW = e - 1; iW > -1; iW--) { var iX = {}; T = iV.children[iW].style; iX.top = parseInt(T.top, 10); iX.left = parseInt(T.left, 10); this._zoomAniInfo[iW] = iX } }, prepareLabelLayer: function () { var iW = this._map; if (this._enableCanvas2dMap && iW.canvas2dMapMgr) { if (this.touchZoomLabelCanvas) { this.touchZoomLabelCanvas.parentNode.removeChild(this.touchZoomLabelCanvas) } var i = iW.canvas2dMapMgr._labelCanvas; this.touchZoomLabelCanvas = i.cloneNode(false); var e = this.touchZoomLabelCanvas.getContext("2d"); e.drawImage(i, 0, 0); iW.platform.insertBefore(this.touchZoomLabelCanvas, iW.platform.firstChild); var iV = parseInt(i.style.left, 10); var T = parseInt(i.style.top, 10); this.touchZoomLabelCanvas.style.zIndex = 9; this.touchZoomLabelCanvas.style[this._transformOriginStyleName] = (this._fixPosition.x - (iW.offsetX + iV)) + "px " + (this._fixPosition.y - (iW.offsetY + T)) + "px"; i.style.visibility = "hidden" } }, show: function () { if (this._animationDiv) { this._animationDiv.style.visibility = "" } }, showLabel: function () { var i = this._map; if (this._enableCanvas2dMap && i.canvas2dMapMgr) { var e = i.canvas2dMapMgr._labelCanvas; if (e) { e.style.visibility = "" } if (this.touchZoomLabelCanvas) { this.touchZoomLabelCanvas.style.zIndex = -2; this.touchZoomLabelCanvas.style.visibility = "hidden" } } }, hide: function () { if (this._animationDiv) { this._animationDiv.style.visibility = "hidden" } if (this._preAnimationDiv) { this._preAnimationDiv.style.visibility = "hidden" } }, hideNonAnimationLayers: function () { var iV = this._map; if (iV.getRenderType() === "dom") { if (iV.overlayDiv) { iV.overlayDiv.style.visibility = "hidden" } if (iV.overlayDivEx) { iV.overlayDivEx.style.visibility = "hidden" } } var iX = iV.tileMgr.tileLayers; var iW; for (var T = 0, e = iX.length; T < e; T++) { iW = iX[T]; iW.tilesDiv.style.visibility = "hidden" } }, showNonAnimationLayers: function () { var iV = this._map; if (iV.getRenderType() === "dom") { if (iV.overlayDiv) { iV.overlayDiv.style.visibility = "" } if (iV.overlayDivEx) { iV.overlayDivEx.style.visibility = "" } } var iX = iV.tileMgr.tileLayers; var iW; for (var T = 0, e = iX.length; T < e; T++) { iW = iX[T]; iW.tilesDiv.style.visibility = "" } }, setFixPosition: function (e) { this._fixPosition = e }, setZoom: function (e, i1) { var iY = this._fixPosition; var i7 = this._map; var i8 = this._baseLayerDiv; var iZ = { x: iY.x - parseInt(i8.style.left, 10) - i7.offsetX, y: iY.y - parseInt(i8.style.top, 10) - i7.offsetY }; var iV = this._animationDiv; if (!iV) { return } var i5 = iV.children.length; var i3; var i6 = this._transformStyleName; var iX = this._transformOriginStyleName; var i9 = this; var jb; var i0; for (var i4 = i5 - 1; i4 > -1; i4--) { var i2 = this._zoomAniInfo[i4]; i3 = iV.children[i4].style; var iW = i2.left - iZ.x; var T = i2.top - iZ.y; i2.dx = iW * e - iW; i2.dy = T * e - T; i2.preDx = iW - iW; i2.preDy = T - T; jb = i2.preDx + (i2.dx - i2.preDx); i0 = i2.preDy + (i2.dy - i2.preDy) + i1; i3.left = i2.left + jb + "px"; i3.top = i2.top + i0 + "px"; i3.width = i3.height = 256 * e + "px" } if (this._enableCanvas2dMap) { var ja = !i9._isIE9 ? "translate3d(0px, " + i1 + "px, 0) scale(" + e + ")" : "translate(0px, " + i1 + "px) scale(" + e + ")"; this.touchZoomLabelCanvas.style[i6] = ja } }, setZoomFinish: function () { this._animationDiv = null }, startAnimation: function (iY) { this.prepareLayer(); this.hideNonAnimationLayers(); var jh = this._map; if (this.touchZoomLabelCanvas) { this.touchZoomLabelCanvas.style.display = "none" } iY = iY || {}; var jf = iY.zoomCount || 0; var i3 = iY.fixPosition; var jd = iY.fixMCPosition; var i1 = iY.pixOffset; this._zoomCount = jf; var iV = jh.getZoom(); var jg = iV + jf; var e = jh.config.enableContinuousZoom; var i7 = 0.5; var i2 = 5; var T = Math.pow(2, jf); var jj = this._baseLayerDiv; var i4 = { x: i3.x - parseInt(jj.style.left, 10) - jh.offsetX, y: i3.y - parseInt(jj.style.top, 10) - jh.offsetY }; var iZ = this._animationDiv; var jb = iZ.children.length; var jl = this._preZoomTimes; var je = []; var jc = this._transformStyleName; var i0 = this._transformOriginStyleName; for (var ja = jb - 1; ja > -1; ja--) { var i8 = {}; var i9 = iZ.children[ja].style; i8.top = parseInt(i9.top, 10); i8.left = parseInt(i9.left, 10); var iX = i8.left - i4.x; var iW = i8.top - i4.y; i8.dx = iX * T - iX; i8.dy = iW * T - iW; i8.preDx = iX * jl - iX; i8.preDy = iW * jl - iW; je[ja] = i8 } var ji = this; var i6; var jk; var i5; this._zoomAni = new eQ({ fps: 60, duration: e ? 500 : 1, transition: function (i) { i = i * i2 / (2 * i7); return i2 * i - i7 * i * i }, render: function (ju) { ju = ju * (4 * i7) / (i2 * i2); i6 = jl + ju * (T - jl); var jn = iV + k(i6); var js = null; var jr = 0; var jv = 0; if (iY.onAnimationBeforeLooping) { var jw = iY.onAnimationBeforeLooping(ju, jn); js = jw.loopingCenter; jr = jw.yDiff; jv = jw.totalYDiff } for (var jo = je.length - 1; jo > -1; jo--) { var jp = je[jo]; if (iZ.children[jo]) { var jt = iZ.children[jo].style; jk = jp.preDx + (jp.dx - jp.preDx) * ju - i1.width * ju; i5 = jp.preDy + (jp.dy - jp.preDy) * ju - i1.height * ju + jr; jt.left = jp.left + jk + "px"; jt.top = jp.top + i5 + "px"; jt.height = jt.width = 256 * i6 + "px" } } var jm = i1.width * ju; var jq = i1.height * ju; if (jh.isRestrict) { ji._enableCanvas2dMap && ji._canvas2dMapMgr.clearLabel() } else { ji._enableCanvas2dMap && ji._canvas2dMapMgr.drawLabel(i6, i3, iV, jg, jf, ju, jm, jq, jv, jr) } ji._preZoomTimes = i6; ji._preRenderTick = ju; iY.onAnimationLooping && iY.onAnimationLooping(ju, jn, js) }, finish: function () { ji._preZoomTimes = 1; ji._zoomAni = null; ji._animationDiv = null; iY.onAnimationFinish && iY.onAnimationFinish(); ji.showNonAnimationLayers() } }); return this._zoomAni }, stopAnimation: function () { if (this._zoomAni) { this._zoomAni.stop(); this._zoomAni = null } } }); function iS(e) { this._initVars(e); this._initColorCanvas(); this._bindEvent(e) } ej.extend(iS.prototype, { _initVars: function (e) { this._map = e._map; this._canvas2dMapMgr = e; this._labelCtx = e._labelCtx; this.ratio = this._map.config.ratio; this.sizeRatio = this.ratio > 1 ? 2 : 1; this.RANK1 = 1000000; this.RANK2 = 2000000; this.RANK3 = 3000000; this.RANK4 = 4000000; this.RANK5 = 5000000 }, _initColorCanvas: function () { var i = 256, T = bG("canvas"), e = T.style; e.width = i + "px"; e.height = i + "px"; T.width = i; T.height = i; this._colorCvsSize = i; this._colorCvs = T; this._colorCtx = T.getContext("2d") }, getLabelImageData: function (i8) { var i7 = i8.textImg; var T = i8.textPos; var i5 = this.ratio; var i3 = this.sizeRatio / i5; var iW = this._colorCtx; var i0 = this._colorCvsSize; iW.clearRect(0, 0, i0, i0); var i2 = 0; var e = 0; var iZ = 0; for (var i1 = 0; i1 < T.length; i1++) { if (T[i1].width > i2) { i2 = T[i1].width; e = i1; iZ = T[i1].drawX } } i2 /= i3; var i4 = 0; for (var i1 = 0, iY = T.length; i1 < iY; i1++) { var i6 = T[i1]; var i9; if (i1 === e) { i9 = 0 } else { i9 = i6.drawX - iZ } iW.drawImage(i7, i6.srcX, i6.srcY, i6.width, i6.height, i9, i4, i6.width / i3, i6.height / i3); if (i6.width / i3 > i2) { i2 = i6.width / i3 } i4 += i6.height / i3 + 2 * i5 } var iV = iW.getImageData(0, 0, i2, i4); var iX = iW.getImageData(0, 0, i2, i4); return [iV, iX] }, _bindEvent: function (i) { var e = this, T = i._map; T.addEventListener("onspotmouseover", function (iY) { if (!this.isCanvasMap() || !this.temp.isPermitSpotOver) { return } if (iY.spots.length > 0) { var iX = iY.spots[0].userdata.uid; var iW = iY.spots[0].userdata.name; var iV = e.findLabelByUid(iX, iW); iV && e._toHighLightColor(iV) } }); T.addEventListener("onspotmouseout", function (iY) { if (!this.isCanvasMap() || !this.temp.isPermitSpotOver) { return } if (iY.spots.length > 0) { var iX = iY.spots[0].userdata.uid; var iW = iY.spots[0].userdata.name; var iV = e.findLabelByUid(iX, iW); iV && e._toDefaultColor(iV) } }); T.addEventListener("onspotclick", function (iY) { if (!this.isCanvasMap() || !this.temp.isPermitSpotOver) { return } if (iY.spots && iY.spots.length > 0) { var iX = iY.spots[0].userdata.uid; var iW = iY.spots[0].userdata.name; var iV = e.findLabelByUid(iX, iW); iV && e._changeBaseMapState(iV) } else { e._recoverNormalState() } }); T.on("spot_status_reset", function () { e._recoverNormalState() }); T.on("spot_highlight", function (iW) { var iV = e.findLabelByUid(iW.uid); iV && e._changeBaseMapState(iV) }) }, _getTextBound: function (i6) { if (!i6.textPos) { return null } var i4 = this.ratio; var i2 = this.sizeRatio / i4; var T = i6.textPos; var i5 = i6.baseDrawX; var i3 = i6.baseDrawY; var i0 = i5 * i4 + (T[0].drawX - i5) / i2; var iY = i3 * i4 + (T[0].drawY - i3) / i2; var iW = i0 + T[0].width / i2; var e = iY + T[0].height / i2; for (var i1 = 0, iZ = T.length; i1 < iZ; i1++) { var i7 = T[i1]; var iX = i5 * i4 + (i7.drawX - i5) / i2; if (iX < i0) { i0 = iX } var iV = i3 * i4 + (i7.drawY - i3) / i2; if (iV < iY) { iY = iV } if (iX + i7.width > iW) { iW = iX + i7.width } if (iV + i7.height > e) { e = iV + i7.height } } return [i0, iY, iW, e] }, _toHighLightColor: function (T) { if (T._tempRank && T._tempRank == this.RANK5) { return } var iZ = this._getTextBound(T); if (!iZ) { return } var iV = Math.round(iZ[0]); var i = Math.round(iZ[1]); var e = this.getLabelImageData(T); var iX = e[0]; var iW = e[1]; var iY = this._canvas2dMapMgr.getFilterImageData(iX, this.RANK5); T._oldImgData = iW; this._labelCtx.putImageData(iY, iV, i) }, _toDefaultColor: function (e) { if (e._tempRank && e._tempRank == this.RANK5) { return } if (e._oldImgData) { var i = this.sizeRatio; var T = this._getTextBound(e); if (!T) { return } this._labelCtx.putImageData(e._oldImgData, Math.round(T[0]), Math.round(T[1])); e._oldImgData = null } }, _changeBaseMapState: function (iV) { var T = this._canvas2dMapMgr; var i = iV.guid; var e = iV.guidExt; var iW = { guid: i, name: iV.name, guidExt: e }; T._labelStrategy.setStrategyInfo(iW); T._loadData() }, _recoverNormalState: function () { var e = this._canvas2dMapMgr; e._labelStrategy.setStrategyInfo(null); e._loadData() }, findLabelByUid: function (iX, iV) { var iZ = this._canvas2dMapMgr, e = iZ._computedLabel; for (var iW = 0, T = e.length; iW < T; iW++) { var iY = e[iW]; if (!iZ.isClickableLabel(iY)) { continue } if (iX && iY.guid === iX) { return iY } if (iV && iY.name === iV) { return iY } } return null } }); function x(e) { this._initVars(e) } ej.extend(x.prototype, { _initVars: function (e) { this._map = e._map; this._canvas2dMapMgr = e; this.ratio = this._map.config.ratio; this._strategyInfo = null; this.RANK1 = 1000000; this.RANK2 = 2000000; this.RANK3 = 3000000; this.RANK4 = 4000000; this.RANK5 = 5000000 }, setStrategyInfo: function (e) { this._strategyInfo = e }, preComputeLabel: function (i1, jS, jB, jd, jM, j6) { var jv = [], i9 = i1._centerX, i7 = i1._centerY, j7 = jd * jM; var jH = this.ratio; var i0 = this._map.getZoom(); var jq = 0; if (i0 === 5) { jq = 4 } if (i0 === 8) { jq = -6 } i1.sort(function (j8, i) { if (j8.x * j8.y < i.x * i.y) { return -1 } else { return 1 } }); for (var js = 0, jo = i1.length; js < jo; js++) { var jX = i1[js], jj = jX.x, jg = jX.y, je = jX.z; var jl = em.calcLoopParam(jj, je).offsetX; var jF = jj * j7, jE = (jg + 1) * j7, iV = (jF - i9) / jd + jS / 2 + jl, T = (i7 - jE) / jd + jB / 2; for (var jp = 0, j1 = jX.length; jp < j1; jp++) { var i3 = jX[jp], ja = undefined, i8 = undefined, jZ = undefined, jY = undefined; var jO = i3.baseDrawX = iV + i3.baseX; var jN = i3.baseDrawY = T + i3.baseY; if (i3.type == "fixed") { var jz = i3.iconPos, jc = i3.textPos, j3 = i3.textImg; if (jz) { jz.drawX = iV + jz.destX; jz.drawY = T + jz.destY; ja = jz.drawX; i8 = jz.drawY; jZ = jz.drawX + jz.width; jY = jz.drawY + jz.height } if (jc && j3) { for (var jP = 0; jP < jc.length; jP++) { var j2 = jc[jP]; j2.drawX = iV + j2.destX; j2.drawY = T + j2.destY; if (!ja) { ja = j2.drawX; i8 = j2.drawY; jZ = j2.drawX + j2.width; jY = j2.drawY + j2.height } else { if (j2.drawX < ja) { ja = j2.drawX } if (j2.drawY < i8) { i8 = j2.drawY } if (j2.drawX + j2.width > jZ) { jZ = j2.drawX + j2.width } if (j2.drawY + j2.height > jY) { jY = j2.drawY + j2.height } } } } } else { i3.tileX = iV; i3.tileY = T; ja = iV + i3.minXOriginal; i8 = T + i3.minYOriginal; jZ = iV + i3.maxXOriginal; jY = T + i3.maxYOriginal } if (ja != undefined) { var jR = jO + (ja - jO) / jH; var jQ = jN + (i8 - jN) / jH; var jt = jO + (jZ - jO) / jH; var jr = jN + (jY - jN) / jH; i3.minX = jR; i3.minY = jQ; i3.maxX = jt; i3.maxY = jr; var jV = (jR + jt) / 2, jU = (jQ + jr) / 2, jC = i9 + (jV - jS / 2) * jd, jA = i7 + (jB / 2 - jU) * jd; i3.geoX = jC; i3.geoY = jA; jv.push(i3) } } } if (j6) { for (var js = 0, jo = j6.length; js < jo; js++) { var jn = j6[js]; var jK = jn[0]; var i4 = jn[1]; var jz = jK.iconPos; var iY = jz.geoX; var iW = jz.geoY; var jO = (iY - i9) / jd + jS / 2; var jN = (i7 - iW) / jd + jB / 2; var ja = jO + jz.destX; var i8 = jN + jz.destY; var jZ = ja + jz.width; var jY = i8 + jz.height; jK.textPos = jK.textPos || jK._textPos; var jc = jK.textPos; var jT = jc[0]; var ji = jO + jT.destX; var i6 = jN + jT.destY; if (i6 < i8) { i8 = i6 } if (ji + jT.width > jZ) { jZ = ji + jT.width } if (i6 + jT.height > jY) { jY = i6 + jT.height } if (jc.length === 2) { var jh = jc[1]; var jf = jO + jh.destX; var i5 = jN + jh.destY; if (i5 < i8) { i8 = i5 } if (jf + jh.width > jZ) { jZ = jf + jh.width } if (i5 + jh.height > jY) { jY = i5 + jh.height } } jK._tempBounds = [ja, i8, jZ, jY]; var jz = i4.iconPos; var iY = jz.geoX; var iW = jz.geoY; var jO = (iY - i9) / jd + jS / 2; var jN = (i7 - iW) / jd + jB / 2; var ja = jO + jz.destX; var i8 = jN + jz.destY; var jZ = ja + jz.width; var jY = i8 + jz.height; i4.textPos = i4.textPos || i4._textPos; var jc = i4.textPos; var jT = jc[0]; var ji = jO + jT.destX; var i6 = jN + jT.destY; if (ji < ja) { ja = ji } if (i6 < i8) { i8 = i6 } if (i6 + jT.height > jY) { jY = i6 + jT.height } if (jc.length === 2) { var jh = jc[1]; var jf = jO + jh.destX; var i5 = jN + jh.destY; if (jf < ja) { ja = jf } if (i5 < i8) { i8 = i5 } if (i5 + jh.height > jY) { jY = i5 + jh.height } } i4._tempBounds = [ja, i8, jZ, jY] } for (var js = 0, jo = j6.length; js < jo; js++) { var jn = j6[js]; var jK = jn[0]; var i4 = jn[1]; if (js === 0 && i4.textPos) { i4._textPos = i4.textPos; delete i4.textPos } var jW = jK; if (!jK.textPos && i4.textPos) { jW = i4 } var j0 = jW._tempBounds; for (jp = js + 1; jp < jo; jp++) { var jm = j6[jp]; var jw = jm[0]; var j5 = jm[1]; var jb = 0; var j4 = jw._tempBounds; if (!(j0[2] < j4[0] || j0[0] > j4[2] || j0[3] < j4[1] || j0[1] > j4[3])) { jb++; if (jw.textPos) { jw._textPos = jw.textPos; delete jw.textPos } } var j4 = j5._tempBounds; if (!(j0[2] < j4[0] || j0[0] > j4[2] || j0[3] < j4[1] || j0[1] > j4[3])) { jb++; if (j5.textPos) { j5._textPos = j5.textPos; delete j5.textPos } } if (jb >= 2) { if (jW.textPos) { jW._textPos = jW.textPos; delete jW.textPos } } } } for (var js = 0, jo = j6.length; js < jo; js++) { var jn = j6[js]; var jK = jn[0]; var i4 = jn[1]; var jx = jK; if (!jK.textPos && i4.textPos) { jx = i4 } var jz = jx.iconPos; var iY = jz.geoX; var iW = jz.geoY; var jO = jx.baseDrawX = (iY - i9) / jd + jS / 2; var jN = jx.baseDrawY = (i7 - iW) / jd + jB / 2; jz.drawX = jO + jz.destX; jz.drawY = jN + jz.destY; var ja = jz.drawX; var i8 = jz.drawY; var jZ = jz.drawX + jz.width; var jY = jz.drawY + jz.height; var jc = jx.textPos; if (jc) { var jT = jc[0]; jT.drawX = jO + jT.destX; jT.drawY = jN + jT.destY; if (jT.drawX < ja) { ja = jT.drawX } if (jT.drawY < i8) { i8 = jT.drawY } if (jT.drawX + jT.width > jZ) { jZ = jT.drawX + jT.width } if (jT.drawY + jT.height > jY) { jY = jT.drawY + jT.height } if (jc.length === 2) { var jh = jc[1]; jh.drawX = jO + jh.destX; jh.drawY = jN + jh.destY; if (jh.drawX < ja) { ja = jh.drawX } if (jh.drawY < i8) { i8 = jh.drawY } if (jh.drawX + jh.width > jZ) { jZ = jh.drawX + jh.width } if (jh.drawY + jh.height > jY) { jY = jh.drawY + jh.height } } } var jR = jO + (ja - jO) / jH; var jQ = jN + (i8 - jN) / jH; var jt = jO + (jZ - jO) / jH; var jr = jN + (jY - jN) / jH; jx.minX = jR; jx.minY = jQ; jx.maxX = jt; jx.maxY = jr; var jJ = (jR + jt) / 2; var jI = (jQ + jr) / 2; var iZ = i9 + (jJ - jS / 2) * jd; var iX = i7 + (jB / 2 - jI) * jd; jx.geoX = iZ; jx.geoY = iX; jv.push(jx) } } var jL = this._strategyInfo; if (jL) { var ju = jL.guid; var jD = jL.name; var jk = jL.guidExt; for (var js = 0, jo = jv.length; js < jo; js++) { var i2 = jv[js]; delete i2._tempRank; if (!this._canvas2dMapMgr.isClickableLabel(i2) || (jk === 1 && !i2.guidExt)) { continue } if ((ju && ju === i2.guid) || (jD && jD === i2.name)) { i2._tempRank = this.RANK5 } } } else { for (var js = 0, jo = jv.length; js < jo; js++) { var i2 = jv[js]; if (i2.type == "line" || !i2.iconPos) { continue } delete i2._tempRank } } jv.sort(function (j9, j8) { var ka = j9._tempRank ? j9._tempRank : j9.rank, i = j8._tempRank ? j8._tempRank : j8.rank; if (ka === i) { return j9.baseX - j8.baseX } return i - ka }); for (var js = 0, jo = jv.length; js < jo; js++) { var jW = jv[js]; jW.isDel = false; jW.isFadeout = false; jW._schedule = 0; jW._isIgnore = false; jW.arrIntersectIndex = []; for (jp = js + 1; jp < jo; jp++) { var jy = jv[jp]; if (!(jW.maxX - jq < jy.minX || jW.minX > jy.maxX - jq || jW.maxY - jq < jy.minY || jW.minY > jy.maxY - jq)) { jW.arrIntersectIndex.push(jp) } } } for (var js = 0, jo = jv.length; js < jo; js++) { var i2 = jv[js]; if (i2.isDel == false) { var e = i2.arrIntersectIndex; for (var jp = 0, j1 = e.length; jp < j1; jp++) { var jG = jv[e[jp]]; jG.isDel = true; if (jG.guidExt === 1) { jG.isDel = false } } } } return jv } }); function P(e) { this._map = e; this._initCanvas(); this._initVars(); this._bindEvent(); this._tileType = g1.getInstance("na") } bk.register(function (i) { if (i.getRenderType() === "canvas") { var e = i.config.style; if (bk["FeatureStyle" + e]) { i.canvas2dMapMgr = new P(i) } else { i.loadMapStyleFiles(function () { i.canvas2dMapMgr = new P(i); i.canvas2dMapMgr._loadData() }) } } }); ej.extend(P.prototype, { _initCanvas: function () { var iY = this._map, iW = iY.getSize(), iV = iW.width, i = iW.height, e = iY.platform, iZ = bG("canvas"), iX = iZ.style; var T = this.ratio = iY.config.ratio; this._width = iV; this._height = i; iX.cssText = "position: absolute;left:0;top:0;width:" + iV + "px;height:" + i + "px;z-index:100;"; iZ.width = iV * T; iZ.height = i * T; this._labelCanvas = iZ; this._labelCtx = iZ.getContext("2d"); e.appendChild(iZ) }, _initVars: function () { var e = iB("ditu", "normal"); this._udt = e.udt; this._version = e.ver; this._labelDataUrls = dG.B_NORMAL_MAP.vectorTileUrls; this._style = bk["FeatureStyle" + this._map.config.style]; this._labelCount = 0; this._vectorDrawLib = new f7(this); this._cache = { maxNum: 500, delNum: 50, arrCache: [] }; this._computedLabel = null; this._spotData = null; this._labelStrategy = new x(this); this._labelClick = new iS(this); this._biz = new dN(this); this._map.temp.isPermitSpotOver = true; this.labelStyleParam = "pl"; if (this._map.getMapType() === BMAP_SATELLITE_MAP) { this.labelStyleParam = "sl" } this.statRequestCount = 0; this.statResponseCount = 0 }, _resizeHandler: function (iX) { var iZ = this, i = iZ._map, iW = i.getSize(), T = iW.width, i1 = iW.height; var iY = this.ratio; var i2 = this._labelCanvas, iV = i2.style; iV.width = T + "px"; iV.height = i1 + "px"; i2.width = T * iY; i2.height = i1 * iY; iZ._width = T; iZ._height = i1; var i0 = true; iZ._loadData(i0) }, _bindEvent: function () { var e = this, i = e._map; i.addEventListener("load", function (T) { e.clearLabel(); e._loadData() }); i.addEventListener("zoomend", function (T) { if (!T.notClearLabel) { e.clearLabel() } e._loadData() }); i.addEventListener("moveend", function (T) { e._loadData() }); i.addEventListener("resize", function (T) { e._resizeHandler(T) }); i.addEventListener("maptypechange", function (T) { if (T.mapType === BMAP_EARTH_MAP) { e.hideLabelCanvas() } else { e.showLabelCanvas(); if (T.mapType === BMAPGL_NORMAL_MAP) { e.labelStyleParam = "pl" } else { if (T.mapType === BMAP_SATELLITE_MAP) { e.labelStyleParam = "sl" } } e._loadData() } }); i.addEventListener("streetlayer_show", function (T) { if (this.isCanvasMap()) { e.showLabelCanvas() } }); i.addEventListener("streetlayer_hide", function (T) { if (this.isCanvasMap()) { e.hideLabelCanvas() } }); i.addEventListener("loadbizdata", function (iV) { var T = iV.data; e._biz.proecessBizData(T, function () { e.updateLabel() }) }); i.addEventListener("unloadbizdata", function (T) { e._biz.clearBizData(); e.updateLabel() }); e.isDrawText = false; setTimeout(function () { if (!e.isDrawText) { i.dispatchEvent(new eX("onmapwhitescreen")) } }, 10000) }, getStyle: function () { return this._style }, _getZoomUnits: function (e) { return Math.pow(2, 18 - e) }, _createCacheForm: function (T, iZ, iY, i) { var iX = this; var e = iX._cache; var iV = e.arrCache; var i0 = this._getLabelId(T, iZ, iY, i); var iW = { id: i0, updateLabelCounter: 0 }; iV.push(iW); iV[i0] = iW; return iW }, _getLabelId: function (i, iV, T, e) { return "_" + i + "_" + iV + "_" + T + "_" + e + "_" + this.labelStyleParam }, _getCache: function (i, iV, T, e) { return this._cache.arrCache[this._getLabelId(i, iV, T, e)] }, _setCacheValue: function (iW, i9, i7, iV, i2) { var i4 = this; var e = i4._cache; var iY = e.arrCache; var i0 = e.maxNum; var iX = e.delNum; var i8 = this._getLabelId(iW, i9, i7, iV); var i3 = iY[i8]; if (i2) { i3.lb = i2 } if (iY.length > i0) { var T = iY.splice(0, iX); for (var i1 = 0, iZ = T.length; i1 < iZ; i1++) { var i5 = T[i1], i6 = i5.id; if (iY[i6].lb) { iY[i6].lb = null } iY[i6] = null; delete iY[i6] } T = null } }, _loadData: function (i7) { var jq = this._map; if (!jq.isCanvasMap()) { return } var i0 = jq.getCenterIn(); var jp = em.calcLoopCenterPoint(i0); var iZ = this._tileType; var i2 = this._width / 2; var je = this._height; var jf = jq.getZoom(); var jb = iZ.getDataZoom(jf); var i4 = jq.getZoomUnits(jf); var ja = i4 * i2; var jo = jp.lng - ja; var jn = jp.lng + ja; var i8 = em.isAddWidth(jo, jn); i2 = i8 ? i2 * 1.5 : i2; var i9 = iZ.getTileSize(jf); var iW = iZ.getMercatorSize(jf, jb); var i3 = Math.floor(jp.lng / iW); var i5 = Math.floor(jp.lat / iW); var iX = [i3, i5, (jp.lng - i3 * iW) / iW * i9, (jp.lat - i5 * iW) / iW * i9]; var jh = iX[0] - Math.ceil((i2 - iX[2]) / i9); var jl = iX[1] - Math.ceil((je / 2 - iX[3]) / i9); var jd = iX[0] + Math.ceil((i2 + iX[2]) / i9); var ji = iX[1] + Math.ceil((je / 2 + iX[3]) / i9); jq.temp.isPermitSpotOver = false; var e = []; for (var jk = jh; jk < jd; jk++) { for (var jj = jl; jj < ji; jj++) { e.push([jk, jj, jb]); var jc = "id_" + jk + "_" + jj + "_" + jf; e[jc] = true } } e._zoom = jb; e = em.calcLoopTiles(e, jf); e.sort((function (i) { return function (js, jt) { return ((0.4 * Math.abs(js[0] - i[0]) + 0.6 * Math.abs(js[1] - i[1])) - (0.4 * Math.abs(jt[0] - i[0]) + 0.6 * Math.abs(jt[1] - i[1]))) } })([iX[0], iX[1]])); var i6 = this._cache.arrCache; this._curViewLabels = []; var iV = "viewKey_" + Math.floor(i0.lng) + "_" + Math.floor(i0.lat) + "_" + jf; this.statRequestCount = 0; this.statResponseCount = 0; this._labelCount += e.length; var i1 = jf; for (var jk = 0, jg = e.length; jk < jg; jk++) { var i3 = e[jk][0]; var i5 = e[jk][1]; var T = e[jk][2]; var iY = this._getLabelId(i3, i5, T, i1); var jm = i6[iY]; if (!jm) { jm = this._createCacheForm(i3, i5, T, i1) } if (typeof jm.lb === "undefined") { jm.lb = null; this._loadLabelData(i3, i5, T, i1, i9, iV); this.statRequestCount++ } else { if (jm.lb) { this._curViewLabels.push(jm.lb); this._labelCount-- } else { if (i7) { this._loadLabelData(i3, i5, T, i1, i9, iV) } jm.updateLabelCounter++ } } } if (this._labelCount === 0) { this.updateLabel() } var jr = this; if (jr.errorTimer) { clearTimeout(jr.errorTimer) } jr.errorTimer = setTimeout(function () { if (jr._labelCount !== 0) { jr._labelCount = 0; jr.updateLabel() } var jt = new eX("onloaddatatimeout"); var ju = 0; var js = 0; var jv = 0; var i = 0; if (jr.statRequestCount === jr.statResponseCount) { ju = 1 } else { js = 1 } if (js === 1) { i = jr.statRequestCount - jr.statResponseCount; jv = jr.statResponseCount } jt.noTimeoutCount = ju; jt.timeoutCount = js; jt.timeoutNoLoaded = i; jt.timeoutLoaded = jv; jr._map.dispatchEvent(jt) }, 500) }, clearLabel: function () { var e = this._width; var T = this._height; var i = this.ratio; this._labelCtx.clearRect(0, 0, e * i, T * i) }, updateLabel: function () { var i = this._map; var e = i.getCenterIn(); var iV = this._width; var iY = this._height; var i1 = i.getZoom(); var i0 = this._tileType.getTileSize(i1); var iZ = this._getZoomUnits(i1); var T = this._labelCtx; this._labelCanvas.style.left = -i.offsetX + "px"; this._labelCanvas.style.top = -i.offsetY + "px"; var iX = this._curViewLabels; iX._centerX = e.lng; iX._centerY = e.lat; var iW = this._biz.bizLabels; this._computedLabel = this._labelStrategy.preComputeLabel(iX, iV, iY, iZ, i0, iW); this._computedLabel._zoom = i1; this.clearLabel(); this._vectorDrawLib.drawIconAndText(T, this._computedLabel, i1); this._addSpotData(); i.temp.isPermitSpotOver = true; if (iX.length > 0) { this.isDrawText = true } }, _loadLabelData: function (i4, i3, i2, T, i5, e) { var iX = i4.toString(); var iV = i3.toString(); var iZ = "cbk_" + iX.replace("-", "_") + "_" + iV.replace("-", "__") + "_" + Math.floor(i2); var i9 = eL + "." + iZ; var i8 = this._labelDataUrls; var i1 = Math.abs(i4 + i3) % i8.length; var je = i8[i1]; if (window.offLineIPAddress) { je = window.offLineIPAddress + "pvd/" } var i = this.labelStyleParam; var i7 = "?qt=vtile"; var ja = ""; if (this._map.config.style !== "default") { ja = "&styleId=1" } var i6 = "x={x}&y={y}&z={z}&udt={udt}&v={v}&styles={styles}" + ja + "&textonly=1&textimg=1&scaler={scaler}&fn=" + encodeURIComponent(i9); var jb = em.calcLoopParam(i4, i2).col; var i0 = this.ratio > 1 ? 2 : 1; var iY = i6.replace(/{x}/, jb).replace(/{y}/, i3).replace(/{z}/, Math.floor(i2)).replace(/{styles}/, i).replace(/{udt}/, this._udt).replace(/{v}/, this._version).replace(/{scaler}/, i0); var iW = je + i7 + "&param=" + window.encodeURIComponent(ef(iY)); var jd = this; var jc = jd._map; bk[iZ] = function (jf) { jd._vectorDrawLib.parseLabelData(jf, i4, i3, i2, T, i5, function (jk) { var jh = jc.getCenterIn(); var jl = jc.getZoom(); var jn = "viewKey_" + Math.floor(jh.lng) + "_" + Math.floor(jh.lat) + "_" + jl; jd._labelCount--; var jo = jd._getCache(i4, i3, i2, T).updateLabelCounter; jd._labelCount -= jo; var ji = jd._curViewLabels; if (jn === e || (jd._labelCount < 0 && jl === i2)) { ji.push(jk) } if (jn === e) { jd.statResponseCount++ } if (jd._labelCount <= 0) { var jg = (new Date()).getTime(); jd.updateLabel(); var jj = (new Date()).getTime(); var jm = new eX("oncanvasmaploaded"); jm.drawTime = jj - jg; if (jd.statResponseCount === jd.statRequestCount) { jm.isAllLoadedDrawing = true } jc.dispatchEvent(jm) } jd._setCacheValue(i4, i3, i2, T, jk); delete bk[iZ] }) }; fV.load(iW) }, drawLabel: function (T, iV, i2, i, i0, iW, e, iX, i1, iY) { var iZ = this; if (!iZ._computedLabel) { return } if (iZ._computedLabel._zoom !== i2) { iZ.clearLabel(); return } iZ._map.temp.isPermitSpotOver = false; iZ.clearLabel(); iZ._vectorDrawLib.zoomingIconAndText(this._labelCtx, iZ._computedLabel, T, iV, i, i0, iW, e, iX, i1, iY) }, _addSpotData: function () { this._spotData = []; var i2 = this._map.getZoom(); for (var iX = 0, iW = this._computedLabel.length; iX < iW; iX++) { var iZ = this._computedLabel[iX]; if (!this.isClickableLabel(iZ) || (iZ.guidExt === 1 && iZ.startScale > i2)) { continue } var iY = []; iY[0] = (iZ.minX - iZ.maxX) / 2; iY[1] = (iZ.minY - iZ.maxY) / 2; iY[2] = (iZ.maxX - iZ.minX) / 2; iY[3] = (iZ.maxY - iZ.minY) / 2; var iV = null; if (iZ.iconPos) { iV = new b8(iZ.iconPos.geoX, iZ.iconPos.geoY) } var T = iZ.name ? iZ.name.replace("\\\\", "<br>") : ""; if (iZ.iconPos && iZ.iconPos.iconType.indexOf("ditie") > -1 && this._map.getZoom() > 14) { T = "" } var i1 = { n: T, pt: new b8(iZ.geoX, iZ.geoY), userdata: { iconPoint: iV, uid: iZ.guid, name: T, type: iZ.iconPos ? iZ.iconPos.iconType : "", iconImg: iZ.iconImg, mapPoi: true, adver_log: iZ.adver_log || "" }, bd: iY, tag: "MAP_SPOT_INFO" }; this._spotData.push(i1) } var i0 = new eX("onspotsdataready"); i0.spots = this._spotData; this._map._spotDataOnCanvas = this._spotData; this._map.dispatchEvent(i0) }, isClickableLabel: function (e) { if (e.isDel || (!e.guid && !e.name)) { return false } return true }, getFilterImageData: function (T, iY) { var iZ = T.data, iX = this._labelStrategy, iY = parseInt(iY); for (var i0 = 0, iW = iZ.length; i0 < iW; i0 += 4) { var e = iZ[i0], i1 = iZ[i0 + 1], i2 = iZ[i0 + 2], i3 = iZ[i0 + 3]; if (i3 === 0) { continue } var iV = Math.round((e + i1 + i2) / 3); var i4 = iV - 90; i4 = i4 < 0 ? 0 : i4; if (iY === iX.RANK5) { iZ[i0] = 51 + i4 * 1.3; iZ[i0 + 1] = 133 + i4 * 0.8; iZ[i0 + 2] = 255 } } return T }, showLabelCanvas: function () { this._labelCanvas.style.visibility = "" }, hideLabelCanvas: function () { this._labelCanvas.style.visibility = "hidden" } }); var aF = 5; var hW = 4; var fH = 3; var F = 2; var dM = 1; var gx = 0; var iT = 3; var hl = 5; var eA = { 3: { start: 3, base: 3 }, 4: { start: 4, base: 5 }, 5: { start: 4, base: 5 }, 6: { start: 6, base: 7 }, 7: { start: 6, base: 7 }, 8: { start: 8, base: 9 }, 9: { start: 8, base: 9 }, 10: { start: 10, base: 10 }, 11: { start: 11, base: 12 }, 12: { start: 11, base: 12 }, 13: { start: 11, base: 12 }, 14: { start: 14, base: 15 }, 15: { start: 14, base: 15 }, 16: { start: 16, base: 17 }, 17: { start: 16, base: 17 }, 18: { start: 18, base: 19 }, 19: { start: 18, base: 19 }, 20: { start: 18, base: 19 }, 21: { start: 18, base: 19 } }; function f7(iV) { this._canvas2dMapMgr = iV; var i = this.ratio = iV._map.config.ratio; this._featureStyle = null; this._map = iV._map; var T = bl(); var e = "udt=" + T.udt + "&v=" + T.ver; this.sizeRatio = this.ratio > 1 ? 2 : 1; this._binaryCache = {}; this._iconCache = {}; this._initColorCanvas() } ej.extend(f7.prototype, { _initColorCanvas: function () { var i = 256, T = bG("canvas"), e = T.style; e.width = i + "px"; e.height = i + "px"; T.width = i; T.height = i; this._colorCvs = T; this._colorCtx = T.getContext("2d") }, parseLabelData: function (i, iX, iW, iV, e, i0, iZ) { if (!this._featureStyle) { this._featureStyle = this._canvas2dMapMgr.getStyle() } if (!i || !i[0]) { iZ([]); return } var iY = this._map.getZoomUnits(); var T = this; this.loadTextPng(i, i0, iX, iW, iV, e, iY, iZ) }, loadTextPng: function (jc, i3, i1, i0, iY, i, iW, iV) { var jb = this; var e = jc[5]; var ja = this._map; var i7 = ja.getZoom(); var T = ja.getSize(); var i8 = T.width; var i6 = T.height; var i9 = ja.getCenterIn(); var iZ = i9.lng; var iX = i9.lat; var i5 = i1 * i3 * iW; var i4 = (i0 + 1) * i3 * iW; if (e) { var i2 = new Image(); i2.onload = function () { jb.calcIconAndTextInfo(jc, i2, i3, i1, i0, iY, i, iW, i5, i4, iV); delete this.onload }; i2.src = e } else { setTimeout(function () { jb.calcIconAndTextInfo(jc, null, i3, i1, i0, iY, i, iW, i5, i4, iV) }, 1) } }, calcIconAndTextInfo: function (je, i5, i6, i4, i1, iZ, iV, iX, i8, i7, iW) { var jd = this; var jc = jd._featureStyle; var i2 = []; i2.x = i4; i2.y = i1; i2.z = iZ; var i3 = jd._canvas2dMapMgr, T = i4 * iX * i6, jb = (i1 + 1) * iX * i6, iY = { tileLeft: T, tileTop: jb, zoomUnits: iX }; var e = []; if (je[0]) { for (var i9 = 0; i9 < je[0].length; i9++) { if (je[0][i9][0] === iT) { e.push(je[0][i9]) } } } var i0 = je[2] || []; for (var i9 = 0; i9 < e.length; i9++) { this._getFixedLabelInfo(e[i9], i5, iV, iX, i6, i8, i7, i2) } var ja = Math.pow(2, iV - iZ); for (i9 = 0; i9 < i0.length; i9++) { this._getLineLabelInfo(i0[i9], i5, iZ, iV, iX, i6, i8, i7, ja, i2) } iW(i2) }, _getFixedLabelInfo: function (i5, i9, iW, i0, ja, jd, jc, jf) { var i4 = i5[1]; if (!i4) { return } var jh = this._map.getZoom(); var jp = this._map.config.style; var jq = this._featureStyle; var i1 = iW; if (i1 === 9) { i1 = 8 } for (var jm = 0; jm < i4.length; jm++) { var jr = i4[jm]; var e = jr[0]; var iV = aK.getStyleFromCache(jp, e, "point", i1, jq); var jl = aK.getStyleFromCache(jp, e, "pointText", i1, jq); if ((!jl || jl.length === 0) && (!iV || iV.length === 0)) { if (i1 === 5) { var iZ = jr[1]; if (!iZ) { continue } for (var ji = 0; ji < iZ.length; ji++) { var jg = iZ[ji][4]; if (jg && jg[7] === "北京") { iV = aK.getStyleFromCache(jp, e, "point", 6, jq); jl = aK.getStyleFromCache(jp, e, "pointText", 6, jq); break } else { continue } } } else { continue } } var iZ = jr[1]; if (!iZ) { continue } var jn = null; var i2 = 1; var T = 0; var i8 = 0; if (iV && iV[0]) { iV = iV[0]; jn = iV.icon; i2 = iV.zoom ? iV.zoom / 100 : 1 } else { iV = null } for (var ji = 0; ji < iZ.length; ji++) { var jg = iZ[ji][4]; if (!jg) { continue } var jk = jg[2]; if (!this._isVisible(jk, jh)) { continue } var i3 = jg[12]; if (jl && jl.length > 0 && !i3) { continue } var i7 = Math.round(jg[0] / 100); var i6 = Math.round(jg[1] / 100); var jj = { lng: jd + i7, lat: jc - (ja * i0 - i6) }; var iY = i7 / i0; var iX = ja - i6 / i0; var jb = jg[7] || ""; var jo = jg[5]; var je = { type: "fixed", name: jb, textImg: i9, rank: jg[4], baseX: iY, baseY: iX, iconPos: null, textPos: null, guid: jg[3] || "", tracer: jk, direction: jo, startScale: 3 }; if ((jo !== hW && i3 || !i3) && jn !== null) { je.iconPos = this._getIconPosition(jn, i2, iY, iX, jj); if (je.iconPos) { T = je.iconPos.width; i8 = je.iconPos.height } } if (T === 0) { je.direction = hW } if (i3) { je.textPos = this._getTextDrawData(jg, iY, iX, T, i8) } if (je.textPos || je.iconPos) { jf.push(je) } } } }, _isVisible: function (e, i) { var iV; if (!this._binaryCache[e]) { iV = e.toString(2); if (iV.length < 8) { iV = new Array(8 - iV.length + 1).join("0") + iV } this._binaryCache[e] = iV } iV = this._binaryCache[e]; var T = eA[i].start; return iV[i - T] === "1" }, _getIconPosition: function (iZ, iX, T, i, e) { var iV = this._map.config.style; var i0 = bk["iconSetInfo" + iV][iZ]; if (!i0) { if (iZ.charCodeAt(0) >= 48 && iZ.charCodeAt(0) <= 57) { i0 = bk["iconSetInfo" + iV]["_" + iZ] } } if (!i0) { return null } var iW = i0[0]; var iY = i0[1]; iW = iW * iX; iY = iY * iX; return { srcX: 0, srcY: 0, destX: T - iW / 2, destY: i - iY / 2, width: iW, height: iY, geoX: e.lng, geoY: e.lat, mcPt: e, iconType: iZ } }, _getTextDrawData: function (i6, i5, i4, iV, i2) { var jb = i6[5]; if (typeof jb !== "number") { jb = 0 } var i0 = this.ratio; var iZ = i0 / 2; iV *= iZ; i2 *= iZ; var i1 = i6[12]; var iW = i1.length; var je = 0; var jd = 0; var ja = []; var i9 = 0; var jc = 0; for (var i8 = 0; i8 < iW; i8++) { jc += Math.round(i1[i8][3]) } for (var i8 = 0; i8 < iW; i8++) { var iY = i1[i8]; var iX = iY[0]; var i = iY[1]; var T = iY[2]; var e = iY[3]; var jf = 2 * i0; var i7 = 0; if (iV !== 0) { i7 = 2 * i0 } if (iV === 0) { jb = hW } switch (jb) { case fH: var i3 = i4 - jc / 2 - jf * (iW - 1) / 2; je = i5 - T - iV / 2 - i7; jd = i3 + i9 + jf * i8; break; case dM: var i3 = i4 - jc / 2 - jf * (iW - 1) / 2; je = i5 + iV / 2 + i7; jd = i3 + i9 + jf * i8; break; case F: var i3 = i4 - i2 / 2 - jc - jf * (iW - 1) - jf; je = i5 - T / 2; jd = i3 + i9 + jf * i8; break; case gx: var i3 = i4 + i2 / 2 + jf / 2; je = i5 - T / 2; jd = i3 + i9 + jf * i8; break; case hW: var i3 = i4 - e / 2 - jf * (iW - 1) / 2; je = i5 - T / 2; jd = i3 + i9 + jf * i8; break }i9 += e; if (T > 0 && e > 0) { ja.push({ srcX: iX, srcY: i, destX: je, destY: jd, width: T, height: e }) } } if (ja.length > 0) { return ja } return null }, _getLineLabelInfo: function (i3, iV, iW, ji, jv, ja, jg, jf, jh, i9) { if (i3.length !== 10) { return } var jk = this.ratio; var T = this.ratio; var jr = i3[7].length; var jb = i3[1]; var jt = i3[3]; var jz = i3[8]; var iZ = i3[4]; var e = 2; var iX = iZ.slice(0, e); for (var jw = e; jw < iZ.length; jw += e) { iX[jw] = iX[jw - e] + iZ[jw]; iX[jw + 1] = iX[jw - (e - 1)] + iZ[jw + 1] } for (var jw = e; jw < iZ.length; jw += e) { if (jw % (jt * e) === 0 || jw % (jt * e) === 1) { continue } iX[jw] = iX[jw - e] + iZ[jw] / jh; iX[jw + 1] = iX[jw - (e - 1)] + iZ[jw + 1] / jh } for (var jy = 0; jy < jr; jy++) { var ju = i3[7][jy]; if (!this._isVisible(ju, ji)) { continue } var jm = i3[6][jy]; var i8 = jy * jt * e; iZ = iX.slice(i8, i8 + jt * e); var jc = []; var jl = undefined; var jj = undefined; var i7 = undefined; var i6 = undefined; var jz = i3[9].slice(0); if (jm) { jz.reverse() } var jp; var jn; for (var jx = 0; jx < jt; jx++) { var i5 = i3[5][jt * jy + jx]; var jq = iZ[jx * e] / 100; var jo = iZ[jx * e + 1] / 100; var i4 = jz[jx]; var i0 = i4[0]; var i2 = i4[1]; var iY = i4[2]; var i1 = i4[3]; var je; var jd; var jB; var jA; if (jx === 0) { jp = jB = jq / jv; jn = ja - jo / jv; jA = jo / jv } else { jB = jq / jv; jA = jo / jv } var jD = jp + (jB - jp) * T - iY / 2; var jC = jn + (ja - jA - jn) * T - i1 / 2; if (jl === undefined) { jl = jp - iY / 2; jj = jn - i1 / 2; i7 = jl + iY; i6 = jj + i1 } else { if (jD < jl) { jl = jD } if (jC < jj) { jj = jC } if (jD + iY > i7) { i7 = jD + iY } if (jC + i1 > i6) { i6 = jC + i1 } } jc.push({ angle: i5, srcX: i0, srcY: i2, destX: jD, destY: jC, width: iY, height: i1 }) } var js = { type: "line", textImg: iV, rank: jb, baseX: jp, baseY: jn, arrWordPos: jc, minXOriginal: jl, minYOriginal: jj, maxXOriginal: i7, maxYOriginal: i6, text: "" }; i9.push(js) } }, alterColor: function (iY, e, iX) { var T = this._colorCtx, i = this._canvas2dMapMgr; T.clearRect(0, 0, iY.width, iY.height); T.drawImage(e, iY.srcX, iY.srcY, iY.width, iY.height, 0, 0, iY.width, iY.height); var iW = T.getImageData(0, 0, iY.width, iY.height), iV = i.getFilterImageData(iW, iX); T.putImageData(iV, 0, 0) }, drawIconAndText: function (ja, i9, e) { var i1 = this.ratio; var iZ = this.sizeRatio / i1; var i3 = 2 / i1; var jl = this; for (var jd = 0, jb = i9.length; jd < jb; jd++) { var i2 = i9[jd]; if (i2.isDel == false) { var iW = i2.baseDrawX; var iV = i2.baseDrawY; if (i2.type == "fixed") { var iY = i2.iconPos, je = i2.textPos, i7 = i2.textImg, jh = i2.startScale; if (iY && jh <= e) { var T = this._iconCache[iY.iconType]; if (T) { if (T.img) { ja.drawImage(T.img, 0, 0, T.img.width, T.img.height, Math.round(iW * i1 + (iY.drawX - iW) / i3), Math.round(iV * i1 + (iY.drawY - iV) / i3), iY.width / i3, iY.height / i3) } else { T.drawLabels.push(i2) } } else { if (!T) { this._iconCache[iY.iconType] = { img: null, drawLabels: [i2] }; var jn = new Image(); jn._iconName = iY.iconType; jn.onload = function () { var jt = jl._iconCache[this._iconName]; jt.img = this; this.onload = null; for (var jp = 0; jp < jt.drawLabels.length; jp++) { var jr = jt.drawLabels[jp]; var jq = jr.baseDrawX; var jo = jr.baseDrawY; var js = jr.iconPos; ja.drawImage(this, 0, 0, this.width, this.height, Math.round(jq * i1 + (js.drawX - jq) / i3), Math.round(jo * i1 + (js.drawY - jo) / i3), js.width / i3, js.height / i3) } jt.drawPos = [] }; jn.src = u.getIconSetPath(jl._map.config.style) + iY.iconType + ".png" } } } if (je && i7 && jh <= e) { for (var i0 = 0; i0 < je.length; i0++) { var i8 = je[i0]; if (!i2._tempRank) { ja.drawImage(i7, i8.srcX, i8.srcY, i8.width, i8.height, Math.round(iW * i1 + (i8.drawX - iW) / iZ), Math.round(iV * i1 + (i8.drawY - iV) / iZ), i8.width / iZ, i8.height / iZ) } else { this.alterColor(i8, i7, i2._tempRank); ja.drawImage(this._colorCvs, 0, 0, i8.width, i8.height, Math.round(iW * i1 + (i8.drawX - iW) / iZ), Math.round(iV * i1 + (i8.drawY - iV) / iZ), i8.width / iZ, i8.height / iZ) } } } } else { var iX = i2.arrWordPos, i7 = i2.textImg, i6 = i2.tileX, i4 = i2.tileY; for (var jc = 0, i5 = iX.length; jc < i5; jc++) { var jf = iX[jc]; var jm = Math.round(i6 + jf.destX); var jk = Math.round(i4 + jf.destY); var jg = jf.angle; jm = iW * i1 + jm - iW; jk = iV * i1 + jk - iV; if (jg > 10 && jg < 350) { ja.save(); var jj = Math.round(jm + jf.width / 2); var ji = Math.round(jk + jf.height / 2); ja.translate(jj, ji); ja.rotate(-jg / 180 * Math.PI); ja.drawImage(i7, jf.srcX, jf.srcY, jf.width, jf.height, -Math.round(jf.width / 2), -Math.round(jf.height / 2), jf.width / iZ, jf.height / iZ); ja.restore() } else { ja.drawImage(i7, jf.srcX, jf.srcY, jf.width, jf.height, jm, jk, jf.width / iZ, jf.height / iZ) } } } } } }, isCollide: function (iX, i6, i5, e, iZ, T, i1) { for (var iW = 0, iV = T.length; iW < iV; iW++) { var i0 = T[iW], iY = 1 / Math.pow(2, i1 + 1), i4 = iY * i0[3] / 2, i3 = iY * i0[4] / 2, i2 = i0[0]; if (i2 != iX) { if (!(i6 + e < i0[1] - i4 || i6 > i0[1] + i0[3] + i4 || i5 + iZ < i0[2] - i3 || i5 > i0[2] + i0[4] + i3)) { return true } } } return false }, zoomingIconAndText: function (jl, jf, iV, jj, jk, jM, js, i3, jy, jr, jc) { var jN = this.ratio; var i4 = this.sizeRatio / jN; var jO = 2 / jN; var jY = jN / 2; var jI = jj.x; var jH = jj.y; var jm = 2 * jN; if (jc !== 0) { jH += jr } var i7 = undefined, i0 = undefined, iX = undefined, i2 = undefined, jb = undefined; var jx = jM > 0 ? true : false; if (!jx) { i7 = []; var jB = 1 - js } for (var jU = 0, jS = jf.length; jU < jS; jU++) { var jP = jf[jU]; if (jP.isDel == false) { var jZ = jP.baseDrawX; var jW = jP.baseDrawY; jl.save(); jl.translate(-i3 * jN, -jy * jN); if (jP.isFadeout) { if (!jx && jP._schedule <= js && !jP._isIgnore) { jl.globalAlpha = jB; jP._schedule = js } else { jP._isIgnore = true; continue } } if (jP.type == "fixed") { var jn = jP.iconPos, ju = jP.textPos, iY = jP.textImg, jo = jP.startScale; var T; var jF = 0; if (jn) { jF = jm } if (jn && !jP.iconImg && this._iconCache[jn.iconType]) { T = this._iconCache[jn.iconType].img } if (jn && jo <= jk && T) { i2 = jn.width; jb = jn.height; i0 = (jI + (jZ - jI) * iV) * jN - i2 / 2 / jO; iX = (jH + (jW - jH) * iV) * jN - jb / 2 / jO + jc; if (!jx && this.isCollide(jU, i0, iX, i2, jb, i7, jM)) { jP.isFadeout = true } jl.drawImage(T, jn.srcX, jn.srcY, T.width, T.height, Math.round(i0), Math.round(iX), i2 / jO, jb / jO); !jx && i7.push([jU, i0, iX, i2, jb]) } if (ju && iY && jo <= jk) { var jt; var jv; var je = 0; var jq = 0; if (jn) { je = jn.width; jq = jn.height } var jG = ju.length; var i6 = 0; var jw = 0; for (var jg = 0; jg < jG; jg++) { var jR = ju[jg]; jw += jR.height; if (i6 < jR.width) { i6 = jR.width } } jw += (jg - 1) * jm; if (!jx && this.isCollide(jU, i0, iX, i6, jw, i7, jM)) { jP.isFadeout = true } var jQ = 0; for (var jg = 0; jg < jG; jg++) { var jR = ju[jg]; switch (jP.direction) { case fH: jt = -(je / 2 / jO + jR.width + jF); jv = -jw / 2 + jQ + jm * jg; break; case dM: jt = je / 2 / jO + jF; jv = -jw / 2 + jQ + jm * jg; break; case F: jt = -jR.width / 2; jv = -jq / 2 / jO - jw + jQ - jm * (jg + 1); break; case gx: jt = -jR.width / 2; jv = jq / 2 / jO + jQ + jm * (jg + 1); break; case hW: jt = -jR.width / 2; jv = -jw / 2 + jQ + jm * jg; break }jQ += jR.height; i0 = (jI + (jZ - jI) * iV) * jN + jt / i4; iX = (jH + (jW - jH) * iV) * jN + jv / i4; +jc; i2 = jR.width; jb = jR.height; if (!jP._tempRank) { jl.drawImage(iY, jR.srcX, jR.srcY, i2, jb, Math.round(i0), Math.round(iX), i2 / i4, jb / i4) } else { this.alterColor(jR, iY, jP._tempRank); jl.drawImage(this._colorCvs, 0, 0, i2, jb, Math.round(i0), Math.round(iX), i2 / i4, jb / i4) } !jx && i7.push([jU, i0, iX, i2, jb]) } } } else { var jd = jP.arrWordPos, iY = jP.textImg, jX = jP.tileX, jV = jP.tileY; var i5 = jd[0]; var i1 = Math.round(jX + i5.destX); var iZ = Math.round(jV + i5.destY); for (var jT = 0, jE = jd.length; jT < jE; jT++) { var jL = jd[jT]; var j1 = Math.round(jX + jL.destX); var j0 = Math.round(jV + jL.destY); var ji = jL.angle; var jD = Math.round((jI + (jZ - jI) * iV) * jN - i5.width / 2 + j1 - i1); var jC = Math.round((jH + (jW - jH) * iV) * jN - i5.height / 2 + j0 - iZ); i0 = jD; iX = jC; i2 = jL.width; jb = jL.height; if (!jx && this.isCollide(jU, i0, iX, i2, jb, i7, jM)) { jP.isFadeout = true } if (ji > 10 && ji < 350) { var jK = jD + jL.width / 2; var jJ = jC + jL.height / 2; var iW = ji / 180 * Math.PI; var jp = Math.cos(iW); var i8 = Math.sin(iW); var jA = jp; var i9 = jp; var jz = i8; var ja = -i8; var jh = jK - jK * jp - jJ * i8; var e = jJ + jK * i8 - jJ * jp; jl.save(); jl.transform(jA, ja, jz, i9, jh, e); jl.drawImage(iY, jL.srcX, jL.srcY, i2, jb, i0, iX, i2 / i4, jb / i4); jl.restore() } else { jl.drawImage(iY, jL.srcX, jL.srcY, i2, jb, i0, iX, i2 / i4, jb / i4) } !jx && i7.push([jU, i0, iX, i2, jb]) } } jl.restore() } } } }); function dN(e) { this.initVars(e) } ej.extend(dN.prototype, { initVars: function (e) { this._map = e._map; this._canvas2dMapMgr = e; this.base64Prefix = "data:image/png;base64,"; this.bizData = null; this.objTextsPng = null; this.arrIconsPng = null; this.bizLabels = null }, proecessBizData: function (iX, i1) { var iZ = this; this.bizData = iX; this.objTextsPng = null; this.arrIconsPng = null; var T = iX.textsPng; var i3 = iX.iconsPng; if (!T || !i3) { return } var i0 = new Image(); i0.onload = function () { iZ.objTextsPng = this; iZ.calcIconAndTextInfo(i1); this.onload = null }; i0.src = this.base64Prefix + T; var i2 = i3.length; var e = []; for (var iW = 0; iW < i2; iW++) { var iY = i3[iW]; var iV = new Image(); (function (i) { iV.onload = function () { i2--; e[i] = this; if (i2 === 0) { iZ.arrIconsPng = e; iZ.calcIconAndTextInfo(i1) } this.onload = null } })(iW); iV.src = this.base64Prefix + iY } }, calcIconAndTextInfo: function (i4) { if (this.objTextsPng && this.arrIconsPng) { var i0 = this.bizData; var iY = i0.pois; var e = []; for (var i1 = 0, iX = iY.length; i1 < iX; i1++) { var iV = iY[i1]; var iZ = this.arrIconsPng[iV.iconPng]; var iW = iZ.height / 2; var i3 = { type: "fixed", name: "", textImg: this.objTextsPng, iconImg: iZ, rank: iV.rank, iconPos: { srcX: 0, srcY: 0, destX: -iZ.width / 2, destY: -iW / 2, width: iZ.width, height: iW, geoX: iV.x, geoY: iV.y, iconType: "vectorCustom" }, textPos: this.calcTextPos(iV.pos, iZ), startScale: iV.from < 12 ? 12 : iV.from, guid: iV.guid, guidExt: 1, adver_log: iV.adver_log || "" }; var T = { type: "fixed", textDirLeft: "left", name: "", textImg: this.objTextsPng, iconImg: iZ, rank: iV.rank, iconPos: { srcX: 0, srcY: 0, destX: -iZ.width / 2, destY: -iW / 2, width: iZ.width, height: iW, geoX: iV.x, geoY: iV.y, iconType: "vectorCustom" }, textPos: this.calcTextPosLeft(iV.pos, iZ), startScale: iV.from < 12 ? 12 : iV.from, guid: iV.guid, guidExt: 1, adver_log: iV.adver_log || "" }; var i2 = [i3, T]; e.push(i2) } this.bizLabels = e; i4 && i4() } }, calcTextPos: function (iY, T) { var i = []; var iX = iY.length / 4; var iW = T.width / 2; if (iX === 1) { var iV = { srcX: iY[0], srcY: iY[1], destX: iW, destY: -iY[3] / 2, width: iY[2], height: iY[3] }; i.push(iV) } else { var iV = { srcX: iY[0], srcY: iY[1], destX: iW, destY: -iY[3], width: iY[2], height: iY[3] }; var e = { srcX: iY[4], srcY: iY[5], destX: iW, destY: 0, width: iY[6], height: iY[7] }; i.push(iV); i.push(e) } return i }, calcTextPosLeft: function (iY, T) { var i = []; var iX = iY.length / 4; var iW = T.width / 2; if (iX === 1) { var iV = { srcX: iY[0], srcY: iY[1], destX: -iW - iY[2], destY: -iY[3] / 2, width: iY[2], height: iY[3] }; i.push(iV) } else { var iV = { srcX: iY[0], srcY: iY[1], destX: -iW - iY[2], destY: -iY[3], width: iY[2], height: iY[3] }; var e = { srcX: iY[4], srcY: iY[5], destX: -iW - iY[2], destY: 0, width: iY[6], height: iY[7] }; i.push(iV); i.push(e) } return i }, clearBizData: function () { this.bizData = null; this.bizLabels = null } }); function v() { } ej.extend(v.prototype, { centerAndZoomIn: function (T, i1, i2) { i2 = i2 || {}; if (!this.loaded) { this.firstTileLoad = false } i1 = this._getProperZoom(i1).zoom; if (i2.noAnimation !== true && this.loaded) { var iX = this._ifUseAnimation(T, i1); if (iX) { this.flyToIn(T, i1, i2); return } } var iZ = this; if (!T && !i1) { return } this._stopAllAnimations(); if (T && !T.equals(this.centerPoint)) { this.fire(new eX("oncenter_changed")) } if (i1 && i1 !== this.zoomLevel) { this.fire(new eX("onzoom_changed")) } T = T || this.centerPoint; i1 = i1 || this.zoomLevel; i1 = this._getProperZoom(i1).zoom; if (this.mapType === BMAP_EARTH_MAP) { if (!this._earth) { this.mapType = BMAPGL_NORMAL_MAP; this.temp.originMapType = BMAP_EARTH_MAP; function i0() { iZ._earth = new bk.Earth(iZ, { showRealSunlight: iZ.config.showRealSunlight, showMilkyway: iZ.config.showMilkyway, earthBackground: iZ.config.earthBackground }); iZ._proxyEarthEvents(); iZ._changeEarthMapType(BMAP_EARTH_MAP); ej.extend(iZ, bk.EarthView.prototype); delete iZ.temp.originMapType } f8.load("earth", function () { if (bk["FeatureStyle" + iZ.config.style]) { i0() } else { iZ.loadMapStyleFiles(function () { i0() }) } }) } } this.lastLevel = this.zoomLevel || i1; this.zoomLevel = i1; var iY = new eX("onload"); iY.point = T; iY.zoom = i1; this.centerPoint = new b8(T.lng, T.lat); this.defaultZoomLevel = this.defaultZoomLevel || this.zoomLevel; this.defaultCenter = this.defaultCenter || this.centerPoint; if (this.mapType !== BMAP_EARTH_MAP) { this.centerPoint = this.restrictCenter(this.centerPoint) } if (!this.loaded && !(this.temp.originMapType === BMAP_EARTH_MAP)) { var i = this.config.defaultMaxBounds; var iW = new g(i, "baidu", this.mapType); if (this.mapType !== BMAP_NONE_MAP) { var iV = new gy({ mapType: this.mapType, copyright: iW, dataType: this.mapType === BMAP_SATELLITE_MAP ? fO : gJ, customLayer: this.mapType === BMAP_SATELLITE_MAP, baseLayer: true, transparentPng: true, tileTypeName: this.mapType === BMAP_SATELLITE_MAP ? "web" : "na" }); iV._isInnerLayer = true; this.addTileLayer(iV); this.baseLayerAdded = true } if (this.mapType === BMAP_SATELLITE_MAP && this._isHybridShow === true) { this._addHybirdMap() } this.on("zoom_changed", function () { if (this._heading === 0) { return } if (this.getZoom() < 7 && this.config.restrictCenter === true) { iZ.resetHeading() } }) } this.loaded = true; this.dispatchEvent(iY); i2.callback && i2.callback() }, _ifUseAnimation: function (iV, i0) { var iZ = this.getSize(); var T = { zoom: this.zoomLevel }; var i2 = { zoom: i0 }; var i1 = this.pointToPixelIn(this.centerPoint); var iW = this.pointToPixelIn(iV, T); var iY = this.pointToPixelIn(this.centerPoint, i2); var i4 = this.pointToPixelIn(iV, i2); var iX = Math.abs(i1.x - iW.x); var i = Math.abs(i1.y - iW.y); var e = Math.abs(iY.x - i4.x); var i3 = Math.abs(iY.y - i4.y); if ((iX > iZ.width || i > iZ.height) && (e > iZ.width || i3 > iZ.height)) { return false } return true }, _setPlatformPosition: function (i2, i1, i4) { i4 = i4 || {}; if (i2 === 0 && i1 === 0 && !i4.point) { return } if (isNaN(i4.initMapOffsetX)) { i4.initMapOffsetX = this.offsetX } if (isNaN(i4.initMapOffsetY)) { i4.initMapOffsetY = this.offsetY } var iY = hw(this._heading); if (this._tilt > 0) { i1 = i1 / Math.cos(hw(this._tilt)) } var i3 = i2 * Math.cos(iY) + i1 * Math.sin(iY); var i0 = -i2 * Math.sin(iY) + i1 * Math.cos(iY); i3 = i3 + i4.initMapOffsetX; i0 = i0 + i4.initMapOffsetY; if (i4.point) { var i = this.restrictCenter(i4.point); if (!i.equals(this.centerPoint)) { this.centerPoint = i.clone(); this.fire(new eX("oncenter_changed")) } } else { var iV = this.offsetX - i3; var e = this.offsetY - i0; var iZ = this.centerPoint.lng; var iX = this.centerPoint.lat; var iW = new b8(iZ, iX); var T = this.getZoomUnits(); this.centerPoint = this.restrictCenter(new b8(iW.lng + iV * T, iW.lat - e * T), T); this.fire(new eX("oncenter_changed")) } this.offsetX = i3; this.offsetY = i0; this.dispatchEvent(new eX("onmoving")) }, restrictCenter: function (i3, e) { if (this.config.restrictCenter === false) { return i3 } e = e || this.getZoomUnits(); var i1 = this.pixelToPointIn(new eB(this.width, 0), { center: i3 }); var iY = this.pixelToPointIn(new eB(0, this.height), { center: i3 }); var i4 = i3.lng; var i9 = i3.lat; if (this.config.restrictBounds !== null && !this.config.restrictBounds.isEmpty()) { var i8 = this.config.restrictBounds; var T = i8.getSouthWest(); var i6 = i8.getNorthEast(); var i2 = hZ.convertLL2MC(T); var iW = hZ.convertLL2MC(i6); var iZ = this.calcNewZoomByRestriction(i4, i9, iY, i1, i2.lng, iW.lng, i2.lat, iW.lat); if (iZ > this.zoomLevel) { this.zoomLevel = iZ; return i3 } i3.lng = this.calcNewLngByBounds(i4, iY, i1, i2.lng, iW.lng, e); i3.lat = this.calcNewLatByBounds(i9, iY, i1, i2.lat, iW.lat, e); return i3 } var i0 = this.pixelToPointIn(new eB(0, 0), { center: i3 }); var iV = this.pixelToPointIn(new eB(0, this.height), { center: i3 }); if (this.zoomLevel < 5) { if (i0.lat > gL.MAX_LAT && iV.lat < gL.MIN_LAT) { var i = gL.MAX_LAT - i3.lat; var iX = i3.lat - gL.MIN_LAT; var i7; if (i < iX) { i7 = i / (this.height / 2) } else { i7 = iX / (this.height / 2) } var i5 = 18 - k(i7); this.zoomLevel = i5; return i3 } } if (i0.lat > gL.MAX_LAT) { i3.lat = gL.MAX_LAT - this.height / 2 * e } else { if (iV.lat < gL.MIN_LAT) { i3.lat = gL.MIN_LAT + this.height / 2 * e } } return i3 }, calcNewZoomByRestriction: function (i2, i1, e, i0, iW, iY, iV, iX) { var i5 = 0; var i6 = 0; if (typeof iV === "number" && typeof iX === "number" && i0.lat > iX && e.lat < iV) { var T = iX - i1; var i = i1 - iV; var iZ; if (T < i) { iZ = T / (this.height / 2) } else { iZ = i / (this.height / 2) } i5 = 18 - k(iZ) } if (typeof iW === "number" && typeof iY === "number" && i0.lng > iY && e.lng < iW) { var i4 = iY - i2; var i3 = i2 - iW; var iZ; if (i4 < i3) { iZ = i4 / (this.width / 2) } else { iZ = i3 / (this.width / 2) } i6 = 18 - k(iZ) } return Math.max(i5, i6) || this.zoomLevel }, calcNewLatByBounds: function (i, iV, T, iY, iX, e) { var iW = i; if (T.lat > iX) { iW = iX - this.height / 2 * e } else { if (iV.lat < iY) { iW = iY + this.height / 2 * e } } return iW }, calcNewLngByBounds: function (iY, iX, iV, iW, T, e) { var i = iY; if (iV.lng > T) { i = T - this.width / 2 * e } else { if (iX.lng < iW) { i = iW + this.width / 2 * e } } return i }, zoomTo: function (e, i6, i7) { var i2 = dG[this.mapType]; if (!i2) { return } var i1 = this._getProperZoom(e); e = i1.zoom; if (this.zoomLevel === e) { i7 && i7.callback && i7.callback(); return } var iX = e; this.lastLevel = this.zoomLevel; i7 = i7 || {}; if (this.zoomEventStatus === "idle") { this.fire(new eX("onzoomstart")); this.zoomEventStatus = "zooming" } if (!i6 && (this.getInfoWindow() && this.temp.infoWin && this.temp.infoWin.isOpen())) { i6 = hZ.convertLL2MC(this.getInfoWindow().getPoint()) } var T = null; if (i7.fixPixel) { T = i7.fixPixel } else { if (i6) { T = this.pointToPixelIn(i6, { useRound: false }) } } var iY = this.pixelToPointIn(T); var iZ = this.centerPoint.clone(); this.fixPoint = i6; this.fixPixel = T; this.fixCenter = iZ; this.mousePosMCPoint = iY; if (i7.noAnimation) { e = i1.zoom; this.zoomLevel = e; this.fire(new eX("onzoom_changed")); var iW = this.getCurrentMaxTilt(); if (this._tilt > iW) { this._tilt = iW } if (i6) { if (this._heading % 360 !== 0 || this._tilt > 0) { var i = this._webglMapCamera.fromScreenPixelToMC(T.x, T.y, { center: iZ, zoom: this.zoomLevel }); if (i) { var i3 = i.sub(iY); var iV = iZ.sub(i3); this.centerPoint = this.restrictCenter(iV) } } else { var i0 = this.getZoomUnits(); var iV = new b8(i6.lng - i0 * (T.x - this.width / 2), i6.lat + i0 * (T.y - this.height / 2)); this.centerPoint = this.restrictCenter(iV, i0) } this.fire(new eX("oncenter_changed")) } this._checkFireZoomend(); i7.callback && i7.callback(); return } this._animationInfo.zoom = { current: this.zoomLevel, diff: e - this.zoomLevel, target: e }; var i4 = this; i4._checkFireZoomend(); var i5 = this._tilt; if (this.fixPoint || i5 > gL.MAX_DRAG_TILT_L2) { i7.renderCallback = function () { var jb = i4.getCurrentMaxTilt(); if (i4._tilt > jb) { i4._tilt = jb } var jc = i4.fixPixel; if (!i4.fixPixel || !i4.fixPoint) { return } var i8 = i4.fixPixel; var ji = i4.fixPoint; var jf = i4.fixCenter; var jd = i4.mousePosMCPoint; if (i4._heading % 360 !== 0 || i4._tilt > 0) { var i9 = i4._webglMapCamera.fromScreenPixelToMC(i8.x, i8.y, { center: jf, zoom: i4.zoomLevel, tilt: i4._tilt }); if (i9) { var jh = i9.sub(jd); var ja = jf.sub(jh); i4.centerPoint = i4.restrictCenter(ja) } } else { var je = i8; var jg = i4.getZoomUnits(); var ja = new b8(ji.lng - jg * (je.x - i4.width / 2), ji.lat + jg * (je.y - i4.height / 2)); i4.centerPoint = i4.restrictCenter(ja, jg) } i4.fire(new eX("oncenter_changed")) } } if (i7.fromMouseWheel === true) { this._startInfiniteZoomAnimation(i7); i7.callback && i7.callback(); return } this._startAnimation(i7) }, _checkFireZoomend: function () { var e = this; if (e.fireZoomendTimer) { clearTimeout(e.fireZoomendTimer) } e.fireZoomendTimer = setTimeout(function () { if (e.zoomEventStatus === "zooming") { e.fire(new eX("onzoomend")); e.zoomEventStatus = "idle" } e.fireZoomendTimer = null }, 150) }, deepZoomMedia: function (e) { var i = this; if (!i.temp.isStdCtrlBusy) { i.temp.isStdCtrlBusy = true; i.deepZoomTo(i.zoomLevel + e); setTimeout(function () { i.temp.isStdCtrlBusy = false }, 400) } }, deepZoomTo: function (e) { this.zoomTo(e) }, flyToIn: function (T, jp, ja) { ja = ja || {}; var iW = this._getProperZoom(jp); jp = iW.zoom; if (this.centerPoint.equals(T) && this.zoomLevel === jp && typeof ja.heading !== "number" && typeof ja.tilt !== "number") { return } var e = this.getHeading() % 360; var i2 = this.getTilt(); var i8 = 0; var jc = 0; var i5 = this.getBounds().containsPoint(T); if (typeof ja.heading === "number") { i8 = ja.heading } else { if (i5) { i8 = e } } if (typeof ja.tilt === "number") { jc = ja.tilt } else { if (i5) { jc = i2 } } this._heading = e; var jm = i8 - e; var ji = jc - i2; var i6 = this; var iY = this.zoomLevel; var iZ = 1.42; var je = this.zoomScale(jp - iY); var jr = this.getZoomUnits(); var i4 = this.centerPoint.div(jr); var js = T.div(jr); var jl = this.worldSize(); var jh = iZ; var jg = Math.max(this.width, this.height); var jf = jg / je; var i3 = js.sub(i4).mag(); var i = jh * jh; function jo(ju) { var jt = (jf * jf - jg * jg + (ju ? -1 : 1) * i * i * i3 * i3) / (2 * (ju ? jf : jg) * i * i3); return Math.log(Math.sqrt(jt * jt + 1) - jt) } function iV(jt) { return (Math.exp(jt) - Math.exp(-jt)) / 2 } function i0(jt) { return (Math.exp(jt) + Math.exp(-jt)) / 2 } function i9(jt) { return iV(jt) / i0(jt) } var i1 = jo(0); var jj = function (jt) { return (i0(i1) / i0(i1 + jh * jt)) }; var jk = function (jt) { return jg * ((i0(i1) * i9(i1 + jh * jt) - iV(i1)) / i) / i3 }; var iX = (jo(1) - i1) / jh; if (Math.abs(i3) < 0.000001 || iX === Infinity || isNaN(iX)) { if (Math.abs(jg - jf) < 0.000001) { this._animationInfo.zoom = { current: this.zoomLevel, diff: jp - this.zoomLevel }; this._animationInfo.center = { current: this.centerPoint, diff: T.sub(this.centerPoint) }; this._animationInfo.heading = { current: e, diff: i8 - e }; this._animationInfo.tilt = { current: i2, diff: jc - i2 }; this.setLock(true); this._startAnimation({ callback: function (jt) { i6.setLock(false); if (ja.callback) { ja.callback(jt) } }, duration: ja.duration }); return } var jq = jf < jg ? -1 : 1; iX = Math.abs(Math.log(jf / jg)) / jh; jk = function () { return 0 }; jj = function (jt) { return Math.exp(jq * jh * jt) } } var jn = 1.7; if (iX < 0.3) { jn = 0.8 } else { if (iX > 5) { jn = (iX - 5) / 2 + jn } } var jb = ja.duration || 1000 * iX / jn; if (isNaN(jb)) { var jd = {}; for (var i7 in ja) { jd[i7] = ja[i7]; jd.noAnimation = true } this.centerAndZoomIn(T, jp, jd); return } this.fire(new eX("onmovestart")); this.fire(new eX("onzoomstart")); this.setLock(true); this._startAnimation({ duration: jb, renderCallback: function (jt, ju) { var jv = jt * iX; var jy = jk(jv); var jx = iY + i6.scaleZoom(1 / jj(jv)); if (jx < i6.getMinZoom()) { jx = i6.getMinZoom() } if (jx > i6.getMaxZoom()) { jx = i6.getMaxZoom() } if (jx !== i6.zoomLevel) { i6.zoomLevel = jx; i6.fire(new eX("onzoom_changed")) } i6.centerPoint = i4.add(js.sub(i4).mult(jy)).mult(jr); i6.fire(new eX("oncenter_changed")); if (typeof i8 === "number") { var jw = jt / 0.7; if (jw > 1) { jw = 1 } i6.setHeading(e + jm * jt, { noAnimation: true }) } if (typeof jc === "number") { i6.setTilt(i2 + ji * jt, { noAnimation: true }) } }, callback: function (jt, ju) { i6.setLock(false); if (ju && ju.stop === true) { i6.fire(new eX("onmoveend")); i6.fire(new eX("onzoomend")); ja.callback && ja.callback(jt); return } if (jp !== i6.zoomLevel) { i6.zoomLevel = jp; i6.fire(new eX("onzoom_changed")) } i6.fire(new eX("onmoveend")); i6.fire(new eX("onzoomend")); ja.callback && ja.callback(jt) } }) }, zoomScale: function (e) { return Math.pow(2, e) }, scaleZoom: function (e) { return Math.log(e) / Math.LN2 }, panToIn: function (i, T) { T = T || {}; if (!i || i.equals(this.centerPoint)) { T.callback && T.callback(); return } var iV = this.pointToPixelIn(i); var e = Math.round(this.width / 2); var iX = Math.round(this.height / 2); var iW = this._ifUseAnimation(i, this.zoomLevel); if (T.noAnimation === true || iW === false) { this._stopAllAnimations(); this._panToIn(e - iV.x, iX - iV.y, i); T.callback && T.callback(); return } this.flyToIn(i, this.zoomLevel, T) }, _panToIn: function (i, e, iV) { var T = this.temp; if (T.operating === true) { return } if (T.dragAni) { T.dragAni.stop(false, { readyToMove: true }); T.dragAni = null } this.dispatchEvent(new eX("onmovestart")); this._setPlatformPosition(i, e, { point: iV }); this.dispatchEvent(new eX("onmoveend")) }, _stopAllAnimations: function (e) { e = e || {}; if (this._ani) { this._ani.stop(!!e.goToEnd, { stopCurrentAnimation: e.stopCurrentAnimation }); this._ani = null } if (this._infiniteAni) { this._infiniteAni.stop(); this._infiniteAni = null } }, panBy: function (i, e, T) { i = Math.round(i) || 0; e = Math.round(e) || 0; T = T || {}; if (Math.abs(i) <= this.width && Math.abs(e) <= this.height && T.noAnimation !== true) { this._panBy(i, e, T) } else { this._panToIn(i, e, T.point); T.callback && T.callback() } }, _panBy: function (i, e, iW) { if (this.temp.operating === true) { return } iW = iW || {}; this.dispatchEvent(new eX("onmovestart")); var iV = this; var T = iV.temp; T.pl = iV.offsetX; T.pt = iV.offsetY; if (T.tlPan) { T.tlPan.cancel() } if (T.dragAni) { T.dragAni.stop(false, { readyToMove: true }); T.dragAni = null } T.tlPan = new eQ({ fps: iW.fps || iV.config.fps, duration: iW.duration || iV.config.actionDuration, transition: iW.transition || fJ.easeInOutQuad, render: function (iX) { this.terminative = iV.temp.operating; if (iV.temp.operating) { return } iV._setPlatformPosition(i * iX, e * iX, { initMapOffsetX: T.pl, initMapOffsetY: T.pt }) }, finish: function (iX) { iV.dispatchEvent(new eX("onmoveend")); iV.temp.tlPan = false; if (iV.temp.stopArrow === true) { iV.temp.stopArrow = false; if (iV.temp.arrow !== 0) { iV._arrow() } } } }) }, _startAnimation: function (i) { var iW = this._animationInfo; var T = this; i = i || {}; if (T._ani) { T._ani.stop(!!i.goToEnd, { stopCurrentAnimation: i.stopCurrentAnimation }) } if (T._infiniteAni) { T._infiniteAni.stop(); T._infiniteAni = null } var iX = i.duration || 500; var iY = i.transition || fJ.ease; var e = new eX("onanimation_start"); this.fire(e); if (i.unstopable) { iW = this._animationInfoUnstopable } var iV = new eQ({ duration: iX, transition: iY, render: function (i1, i0) { for (var iZ in iW) { if (!iW.hasOwnProperty(iZ)) { continue } var i3 = iW[iZ].current; var i2 = iW[iZ].diff; T._setValueTick(iZ, i3, i2, i1) } if (i.renderCallback) { i.renderCallback(i1, i0) } }, finish: function (iZ) { T.fire(new eX("onanimation_end")); if (i.unstopable) { T._animationInfoUnstopable = {}; T._unstopableAni = null } else { T._ani = null; T._animationInfo = {} } if (i.mapNeedCbk) { i.mapNeedCbk() } if (i.callback) { i.callback(iZ) } }, onStop: function (iZ) { iZ = iZ || {}; T.fire(new eX("onanimation_end")); if (iZ.stopCurrentAnimation) { T._animationInfo = {} } T._ani = null; if (i.mapNeedCbk) { i.mapNeedCbk() } if (i.callback) { i.callback(null, { stop: true }) } } }); if (i.unstopable) { T._unstopableAni = iV } else { T._ani = iV } }, _startInfiniteZoomAnimation: function (e) { var i = this; if (i._ani) { i._ani.stop(!!e.goToEnd, { stopCurrentAnimation: e.stopCurrentAnimation }) } if (i._infiniteAni) { return } this.fire(new eX("onanimation_start")); i._infiniteAni = new eQ({ duration: 10000, transition: fJ.linear, render: function () { var T = i._animationInfo.zoom; if (Math.abs(T.current - T.target) < 0.001) { i._setValue("zoom", T.target); i._infiniteAni.stop(); return } T.current += (T.target - T.current) * 0.35; i._setValue("zoom", T.current); if (e.renderCallback) { e.renderCallback() } }, finish: function () { i._infiniteAni = null; i._animationInfo = {}; i.fire(new eX("onanimation_end")); if (e.callback) { e.callback() } }, onStop: function () { i._infiniteAni = null; i._animationInfo = {}; i.fire(new eX("onanimation_end")); if (e.callback) { e.callback() } } }) }, _setValue: function (e, T) { if (e === "zoom") { this._preZoomLevel = this.zoomLevel; var i = this._getProperZoom(T); T = i.zoom; if (T !== this.zoomLevel) { this.zoomLevel = T; if (T < 5) { this.restrictCenter(this.centerPoint) } this.fire(new eX("on" + e + "_changed")) } return } else { if (e === "center") { this.centerPoint = T } } this["_" + e] = T; this.fire(new eX("on" + e + "_changed")) }, _setValueTick: function (e, iW, iV, i) { if (e === "center") { var T = new b8(iW.lng + iV.lng * i, iW.lat + iV.lat * i); this._setValue(e, T); return } if (e === "zoom") { this._setValue(e, Math.pow(iW, 1 - i) * Math.pow(iW + iV, i)); return } this._setValue(e, iW + iV * i) }, setHeading: function (iV, i) { i = i || {}; if (iV === this._heading) { i.callback && i.callback(); return } var T = dB(this._heading, 360); var e = dB(iV, 360); if (e === T) { this._heading = iV; i.callback && i.callback(); return } if (i.noAnimation) { this._setValue("heading", iV); i.callback && i.callback(); return } if (i.unstopable) { this._animationInfoUnstopable.heading = { current: this._heading, diff: iV - this._heading } } else { this._animationInfo.heading = { current: this._heading, diff: iV - this._heading } } this._startAnimation(i) }, resetHeading: function (e) { var i = this._heading; while (i < 0) { i += 360 } i = i % 360; if (i > 180) { i -= 360 } this._heading = i; e = e || {}; e.unstopable = true; this.setHeading(0, e) }, getHeading: function () { return this._heading }, setTilt: function (e, i) { i = i || {}; if (e === this._tilt) { i.callback && i.callback(); return } if (e > gL.MAX_TILT) { e = gL.MAX_TILT } if (e < gL.MIN_TILT) { e = gL.MIN_TILT } if (i && i.noAnimation) { this._setValue("tilt", e); i.callback && i.callback(); return } this._animationInfo.tilt = { current: this._tilt, diff: e - this._tilt }; this._startAnimation(i) }, getTilt: function () { return this._tilt }, getCenterIn: function () { return this.centerPoint }, getZoom: function () { return this.zoomLevel }, getCameraPosition: function (T) { T = T || {}; var e = T.center || this.centerPoint; var iV = T.zoom || this.zoomLevel; var iY = typeof T.heading === "number" ? T.heading : this._heading; var i = typeof T.tilt === "number" ? T.tilt : this._tilt; var iX = this._webglMapCamera.generateMVMatrix(e, iV, iY, i); var iW = mat4.create(Float32Array); mat4.invert(iW, iX); return this._webglMapCamera.getPosition(iW) } }); function a6(i) { this._jobQueue = []; this._idleOnlyJobQueue = []; var e = this; this.isIdle = true; i.on("updateframe", function (iV) { var T = 12 - iV.frameTime; T = T < 1 ? 1 : T; e.isIdle = false; if (e.idleWorkTimer) { clearInterval(e.idleWorkTimer); e.idleWorkTimer = null } e.runJobs(T) }); this._idleWorkerTicker = (function (T) { return function () { if (T.isIdle) { T.runJobs(); T.runIdleOnlyJobs() } } })(this); i.on("mapglidle", function () { e.isIdle = true; e.runJobs(); e.runIdleOnlyJobs(); e.idleWorkTimer = setInterval(e._idleWorkerTicker, a6.MAX_IDLE_TIME) }) } a6.MAX_IDLE_TIME = 50; a6.MAX_FRAME_TIME = 6; a6.prototype.runJobs = function (i) { if (this._jobQueue.length === 0) { return } var iV = hb(); var e = 0; i = i || a6.MAX_FRAME_TIME; while (this._jobQueue.length && e < i) { var T = this._jobQueue.shift(); if (T.state !== "invalid") { T.call() } e = hb() - iV } }; a6.prototype.runIdleOnlyJobs = function () { if (this._idleOnlyJobQueue.length === 0) { return } var T = hb(); var e = 0; while (this._idleOnlyJobQueue.length && e < a6.MAX_IDLE_TIME) { var i = this._idleOnlyJobQueue.shift(); if (i.state !== "invalid") { i.call() } e = hb() - T } }; a6.prototype.checkIdleRunning = function () { if (this.isIdle && !this.idleWorkTimer) { this.runJobs(); this.runIdleOnlyJobs(); this.idleWorkTimer = setInterval(this._idleWorkerTicker, 50) } }; a6.prototype.addJob = function (e) { this._jobQueue.push(e); this.checkIdleRunning() }; a6.prototype.clearJobs = function () { this._jobQueue.length = 0; this._idleOnlyJobQueue.length = 0 }; a6.prototype.addIdleOnlyJob = function (e) { this._idleOnlyJobQueue.push(e); this.checkIdleRunning() }; var di = {}; (function (iY) { if (!i2) { var i2 = 0.000001 } if (!i) { var i = (typeof Float32Array !== "undefined") ? Float32Array : Array } if (!iW) { var iW = Math.random } var T = {}; var iX = Math.PI / 180; T.toRadian = function (i3) { return i3 * iX }; var i1 = {}; i1.create = function (i4) { i4 = i4 || i; var i3 = new i4(2); i3[0] = 0; i3[1] = 0; return i3 }; i1.clone = function (i3, i5) { i5 = i5 || i; var i4 = new i5(2); i4[0] = i3[0]; i4[1] = i3[1]; return i4 }; i1.fromValues = function (i3, i6, i5) { i5 = i5 || i; var i4 = new i5(2); i4[0] = i3; i4[1] = i6; return i4 }; i1.copy = function (i4, i3) { i4[0] = i3[0]; i4[1] = i3[1]; return i4 }; i1.set = function (i4, i3, i5) { i4[0] = i3; i4[1] = i5; return i4 }; i1.add = function (i5, i4, i3) { i5[0] = i4[0] + i3[0]; i5[1] = i4[1] + i3[1]; return i5 }; i1.subtract = function (i5, i4, i3) { i5[0] = i4[0] - i3[0]; i5[1] = i4[1] - i3[1]; return i5 }; i1.sub = i1.subtract; i1.multiply = function (i5, i4, i3) { i5[0] = i4[0] * i3[0]; i5[1] = i4[1] * i3[1]; return i5 }; i1.mul = i1.multiply; i1.divide = function (i5, i4, i3) { i5[0] = i4[0] / i3[0]; i5[1] = i4[1] / i3[1]; return i5 }; i1.div = i1.divide; i1.min = function (i5, i4, i3) { i5[0] = Math.min(i4[0], i3[0]); i5[1] = Math.min(i4[1], i3[1]); return i5 }; i1.max = function (i5, i4, i3) { i5[0] = Math.max(i4[0], i3[0]); i5[1] = Math.max(i4[1], i3[1]); return i5 }; i1.scale = function (i5, i4, i3) { i5[0] = i4[0] * i3; i5[1] = i4[1] * i3; return i5 }; i1.scaleAndAdd = function (i5, i4, i3, i6) { i5[0] = i4[0] + (i3[0] * i6); i5[1] = i4[1] + (i3[1] * i6); return i5 }; i1.distance = function (i5, i4) { var i3 = i4[0] - i5[0], i6 = i4[1] - i5[1]; return Math.sqrt(i3 * i3 + i6 * i6) }; i1.dist = i1.distance; i1.squaredDistance = function (i5, i4) { var i3 = i4[0] - i5[0], i6 = i4[1] - i5[1]; return i3 * i3 + i6 * i6 }; i1.sqrDist = i1.squaredDistance; i1.length = function (i4) { var i3 = i4[0], i5 = i4[1]; return Math.sqrt(i3 * i3 + i5 * i5) }; i1.len = i1.length; i1.squaredLength = function (i4) { var i3 = i4[0], i5 = i4[1]; return i3 * i3 + i5 * i5 }; i1.sqrLen = i1.squaredLength; i1.negate = function (i4, i3) { i4[0] = -i3[0]; i4[1] = -i3[1]; return i4 }; i1.normalize = function (i6, i5) { var i4 = i5[0], i7 = i5[1]; var i3 = i4 * i4 + i7 * i7; if (i3 > 0) { i3 = 1 / Math.sqrt(i3); i6[0] = i5[0] * i3; i6[1] = i5[1] * i3 } return i6 }; i1.dot = function (i4, i3) { return i4[0] * i3[0] + i4[1] * i3[1] }; i1.cross = function (i5, i4, i3) { var i6 = i4[0] * i3[1] - i4[1] * i3[0]; i5[0] = i5[1] = 0; i5[2] = i6; return i5 }; i1.lerp = function (i5, i4, i3, i6) { var i8 = i4[0], i7 = i4[1]; i5[0] = i8 + i6 * (i3[0] - i8); i5[1] = i7 + i6 * (i3[1] - i7); return i5 }; i1.random = function (i3, i5) { i5 = i5 || 1; var i4 = iW() * 2 * Math.PI; i3[0] = Math.cos(i4) * i5; i3[1] = Math.sin(i4) * i5; return i3 }; i1.transformMat2 = function (i6, i5, i4) { var i3 = i5[0], i7 = i5[1]; i6[0] = i4[0] * i3 + i4[2] * i7; i6[1] = i4[1] * i3 + i4[3] * i7; return i6 }; i1.transformMat2d = function (i6, i5, i4) { var i3 = i5[0], i7 = i5[1]; i6[0] = i4[0] * i3 + i4[2] * i7 + i4[4]; i6[1] = i4[1] * i3 + i4[3] * i7 + i4[5]; return i6 }; i1.transformMat3 = function (i6, i5, i4) { var i3 = i5[0], i7 = i5[1]; i6[0] = i4[0] * i3 + i4[3] * i7 + i4[6]; i6[1] = i4[1] * i3 + i4[4] * i7 + i4[7]; return i6 }; i1.transformMat4 = function (i6, i5, i4) { var i3 = i5[0], i7 = i5[1]; i6[0] = i4[0] * i3 + i4[4] * i7 + i4[12]; i6[1] = i4[1] * i3 + i4[5] * i7 + i4[13]; return i6 }; i1.rotate = function (i6, i4, i3, ja) { var i9 = i4[0] - i3[0]; var i8 = i4[1] - i3[1]; var i5 = Math.sin(ja); var i7 = Math.cos(ja); i6[0] = i9 * i7 - i8 * i5 + i3[0]; i6[1] = i9 * i5 + i8 * i7 + i3[1]; return i6 }; i1.forEach = (function () { var i3 = i1.create(); return function (i6, ja, jb, i9, i8, i4) { var i7, i5; if (!ja) { ja = 2 } if (!jb) { jb = 0 } if (i9) { i5 = Math.min((i9 * ja) + jb, i6.length) } else { i5 = i6.length } for (i7 = jb; i7 < i5; i7 += ja) { i3[0] = i6[i7]; i3[1] = i6[i7 + 1]; i8(i3, i3, i4); i6[i7] = i3[0]; i6[i7 + 1] = i3[1] } return i6 } })(); i1.str = function (i3) { return "vec2(" + i3[0] + ", " + i3[1] + ")" }; iY.vec2 = i1; var i0 = {}; i0.create = function (i4) { i4 = i4 || i; var i3 = new i4(3); i3[0] = 0; i3[1] = 0; i3[2] = 0; return i3 }; i0.clone = function (i3, i5) { i5 = i5 || i; var i4 = new i5(3); i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; return i4 }; i0.fromValues = function (i3, i7, i5, i6) { i6 = i6 || i; var i4 = new i6(3); i4[0] = i3; i4[1] = i7; i4[2] = i5; return i4 }; i0.copy = function (i4, i3) { i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; return i4 }; i0.set = function (i4, i3, i6, i5) { i4[0] = i3; i4[1] = i6; i4[2] = i5; return i4 }; i0.add = function (i5, i4, i3) { i5[0] = i4[0] + i3[0]; i5[1] = i4[1] + i3[1]; i5[2] = i4[2] + i3[2]; return i5 }; i0.subtract = function (i5, i4, i3) { i5[0] = i4[0] - i3[0]; i5[1] = i4[1] - i3[1]; i5[2] = i4[2] - i3[2]; return i5 }; i0.sub = i0.subtract; i0.multiply = function (i5, i4, i3) { i5[0] = i4[0] * i3[0]; i5[1] = i4[1] * i3[1]; i5[2] = i4[2] * i3[2]; return i5 }; i0.mul = i0.multiply; i0.divide = function (i5, i4, i3) { i5[0] = i4[0] / i3[0]; i5[1] = i4[1] / i3[1]; i5[2] = i4[2] / i3[2]; return i5 }; i0.div = i0.divide; i0.min = function (i5, i4, i3) { i5[0] = Math.min(i4[0], i3[0]); i5[1] = Math.min(i4[1], i3[1]); i5[2] = Math.min(i4[2], i3[2]); return i5 }; i0.max = function (i5, i4, i3) { i5[0] = Math.max(i4[0], i3[0]); i5[1] = Math.max(i4[1], i3[1]); i5[2] = Math.max(i4[2], i3[2]); return i5 }; i0.scale = function (i5, i4, i3) { i5[0] = i4[0] * i3; i5[1] = i4[1] * i3; i5[2] = i4[2] * i3; return i5 }; i0.scaleAndAdd = function (i5, i4, i3, i6) { i5[0] = i4[0] + (i3[0] * i6); i5[1] = i4[1] + (i3[1] * i6); i5[2] = i4[2] + (i3[2] * i6); return i5 }; i0.distance = function (i5, i4) { var i3 = i4[0] - i5[0], i7 = i4[1] - i5[1], i6 = i4[2] - i5[2]; return Math.sqrt(i3 * i3 + i7 * i7 + i6 * i6) }; i0.dist = i0.distance; i0.squaredDistance = function (i5, i4) { var i3 = i4[0] - i5[0], i7 = i4[1] - i5[1], i6 = i4[2] - i5[2]; return i3 * i3 + i7 * i7 + i6 * i6 }; i0.sqrDist = i0.squaredDistance; i0.length = function (i4) { var i3 = i4[0], i6 = i4[1], i5 = i4[2]; return Math.sqrt(i3 * i3 + i6 * i6 + i5 * i5) }; i0.len = i0.length; i0.squaredLength = function (i4) { var i3 = i4[0], i6 = i4[1], i5 = i4[2]; return i3 * i3 + i6 * i6 + i5 * i5 }; i0.sqrLen = i0.squaredLength; i0.negate = function (i4, i3) { i4[0] = -i3[0]; i4[1] = -i3[1]; i4[2] = -i3[2]; return i4 }; i0.normalize = function (i6, i5) { var i4 = i5[0], i8 = i5[1], i7 = i5[2]; var i3 = i4 * i4 + i8 * i8 + i7 * i7; if (i3 > 0) { i3 = 1 / Math.sqrt(i3); i6[0] = i5[0] * i3; i6[1] = i5[1] * i3; i6[2] = i5[2] * i3 } return i6 }; i0.dot = function (i4, i3) { return i4[0] * i3[0] + i4[1] * i3[1] + i4[2] * i3[2] }; i0.cross = function (i4, i9, i8) { var i3 = i9[0], jb = i9[1], ja = i9[2], i7 = i8[0], i6 = i8[1], i5 = i8[2]; i4[0] = jb * i5 - ja * i6; i4[1] = ja * i7 - i3 * i5; i4[2] = i3 * i6 - jb * i7; return i4 }; i0.lerp = function (i5, i4, i3, i6) { var i9 = i4[0], i8 = i4[1], i7 = i4[2]; i5[0] = i9 + i6 * (i3[0] - i9); i5[1] = i8 + i6 * (i3[1] - i8); i5[2] = i7 + i6 * (i3[2] - i7); return i5 }; i0.random = function (i3, i7) { i7 = i7 || 1; var i5 = iW() * 2 * Math.PI; var i6 = (iW() * 2) - 1; var i4 = Math.sqrt(1 - i6 * i6) * i7; i3[0] = Math.cos(i5) * i4; i3[1] = Math.sin(i5) * i4; i3[2] = i6 * i7; return i3 }; i0.transformMat4 = function (i6, i5, i4) { var i3 = i5[0], i8 = i5[1], i7 = i5[2]; i6[0] = i4[0] * i3 + i4[4] * i8 + i4[8] * i7 + i4[12]; i6[1] = i4[1] * i3 + i4[5] * i8 + i4[9] * i7 + i4[13]; i6[2] = i4[2] * i3 + i4[6] * i8 + i4[10] * i7 + i4[14]; return i6 }; i0.transformMat3 = function (i6, i5, i4) { var i3 = i5[0], i8 = i5[1], i7 = i5[2]; i6[0] = i3 * i4[0] + i8 * i4[3] + i7 * i4[6]; i6[1] = i3 * i4[1] + i8 * i4[4] + i7 * i4[7]; i6[2] = i3 * i4[2] + i8 * i4[5] + i7 * i4[8]; return i6 }; i0.transformQuat = function (i9, jf, i3) { var jg = jf[0], je = jf[1], jd = jf[2], jb = i3[0], ja = i3[1], i8 = i3[2], jc = i3[3], i6 = jc * jg + ja * jd - i8 * je, i5 = jc * je + i8 * jg - jb * jd, i4 = jc * jd + jb * je - ja * jg, i7 = -jb * jg - ja * je - i8 * jd; i9[0] = i6 * jc + i7 * -jb + i5 * -i8 - i4 * -ja; i9[1] = i5 * jc + i7 * -ja + i4 * -jb - i6 * -i8; i9[2] = i4 * jc + i7 * -i8 + i6 * -ja - i5 * -jb; return i9 }; i0.rotateX = function (i5, i4, i3, i8) { var i7 = [], i6 = []; i7[0] = i4[0] - i3[0]; i7[1] = i4[1] - i3[1]; i7[2] = i4[2] - i3[2]; i6[0] = i7[0]; i6[1] = i7[1] * Math.cos(i8) - i7[2] * Math.sin(i8); i6[2] = i7[1] * Math.sin(i8) + i7[2] * Math.cos(i8); i5[0] = i6[0] + i3[0]; i5[1] = i6[1] + i3[1]; i5[2] = i6[2] + i3[2]; return i5 }; i0.rotateY = function (i5, i4, i3, i8) { var i7 = [], i6 = []; i7[0] = i4[0] - i3[0]; i7[1] = i4[1] - i3[1]; i7[2] = i4[2] - i3[2]; i6[0] = i7[2] * Math.sin(i8) + i7[0] * Math.cos(i8); i6[1] = i7[1]; i6[2] = i7[2] * Math.cos(i8) - i7[0] * Math.sin(i8); i5[0] = i6[0] + i3[0]; i5[1] = i6[1] + i3[1]; i5[2] = i6[2] + i3[2]; return i5 }; i0.rotateZ = function (i5, i4, i3, i8) { var i7 = [], i6 = []; i7[0] = i4[0] - i3[0]; i7[1] = i4[1] - i3[1]; i7[2] = i4[2] - i3[2]; i6[0] = i7[0] * Math.cos(i8) - i7[1] * Math.sin(i8); i6[1] = i7[0] * Math.sin(i8) + i7[1] * Math.cos(i8); i6[2] = i7[2]; i5[0] = i6[0] + i3[0]; i5[1] = i6[1] + i3[1]; i5[2] = i6[2] + i3[2]; return i5 }; i0.forEach = (function () { var i3 = i0.create(); return function (i6, ja, jb, i9, i8, i4) { var i7, i5; if (!ja) { ja = 3 } if (!jb) { jb = 0 } if (i9) { i5 = Math.min((i9 * ja) + jb, i6.length) } else { i5 = i6.length } for (i7 = jb; i7 < i5; i7 += ja) { i3[0] = i6[i7]; i3[1] = i6[i7 + 1]; i3[2] = i6[i7 + 2]; i8(i3, i3, i4); i6[i7] = i3[0]; i6[i7 + 1] = i3[1]; i6[i7 + 2] = i3[2] } return i6 } })(); i0.str = function (i3) { return "vec3(" + i3[0] + ", " + i3[1] + ", " + i3[2] + ")" }; iY.vec3 = i0; var iZ = {}; iZ.create = function (i4) { i4 = i4 || i; var i3 = new i4(4); i3[0] = 0; i3[1] = 0; i3[2] = 0; i3[3] = 0; return i3 }; iZ.clone = function (i3, i5) { i5 = i5 || i; var i4 = new i5(4); i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; i4[3] = i3[3]; return i4 }; iZ.fromValues = function (i3, i8, i6, i4, i7) { i7 = i7 || i; var i5 = new i7(4); i5[0] = i3; i5[1] = i8; i5[2] = i6; i5[3] = i4; return i5 }; iZ.copy = function (i4, i3) { i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; i4[3] = i3[3]; return i4 }; iZ.set = function (i5, i3, i7, i6, i4) { i5[0] = i3; i5[1] = i7; i5[2] = i6; i5[3] = i4; return i5 }; iZ.add = function (i5, i4, i3) { i5[0] = i4[0] + i3[0]; i5[1] = i4[1] + i3[1]; i5[2] = i4[2] + i3[2]; i5[3] = i4[3] + i3[3]; return i5 }; iZ.subtract = function (i5, i4, i3) { i5[0] = i4[0] - i3[0]; i5[1] = i4[1] - i3[1]; i5[2] = i4[2] - i3[2]; i5[3] = i4[3] - i3[3]; return i5 }; iZ.sub = iZ.subtract; iZ.multiply = function (i5, i4, i3) { i5[0] = i4[0] * i3[0]; i5[1] = i4[1] * i3[1]; i5[2] = i4[2] * i3[2]; i5[3] = i4[3] * i3[3]; return i5 }; iZ.mul = iZ.multiply; iZ.divide = function (i5, i4, i3) { i5[0] = i4[0] / i3[0]; i5[1] = i4[1] / i3[1]; i5[2] = i4[2] / i3[2]; i5[3] = i4[3] / i3[3]; return i5 }; iZ.div = iZ.divide; iZ.min = function (i5, i4, i3) { i5[0] = Math.min(i4[0], i3[0]); i5[1] = Math.min(i4[1], i3[1]); i5[2] = Math.min(i4[2], i3[2]); i5[3] = Math.min(i4[3], i3[3]); return i5 }; iZ.max = function (i5, i4, i3) { i5[0] = Math.max(i4[0], i3[0]); i5[1] = Math.max(i4[1], i3[1]); i5[2] = Math.max(i4[2], i3[2]); i5[3] = Math.max(i4[3], i3[3]); return i5 }; iZ.scale = function (i5, i4, i3) { i5[0] = i4[0] * i3; i5[1] = i4[1] * i3; i5[2] = i4[2] * i3; i5[3] = i4[3] * i3; return i5 }; iZ.scaleAndAdd = function (i5, i4, i3, i6) { i5[0] = i4[0] + (i3[0] * i6); i5[1] = i4[1] + (i3[1] * i6); i5[2] = i4[2] + (i3[2] * i6); i5[3] = i4[3] + (i3[3] * i6); return i5 }; iZ.distance = function (i6, i4) { var i3 = i4[0] - i6[0], i8 = i4[1] - i6[1], i7 = i4[2] - i6[2], i5 = i4[3] - i6[3]; return Math.sqrt(i3 * i3 + i8 * i8 + i7 * i7 + i5 * i5) }; iZ.dist = iZ.distance; iZ.squaredDistance = function (i6, i4) { var i3 = i4[0] - i6[0], i8 = i4[1] - i6[1], i7 = i4[2] - i6[2], i5 = i4[3] - i6[3]; return i3 * i3 + i8 * i8 + i7 * i7 + i5 * i5 }; iZ.sqrDist = iZ.squaredDistance; iZ.length = function (i5) { var i3 = i5[0], i7 = i5[1], i6 = i5[2], i4 = i5[3]; return Math.sqrt(i3 * i3 + i7 * i7 + i6 * i6 + i4 * i4) }; iZ.len = iZ.length; iZ.squaredLength = function (i5) { var i3 = i5[0], i7 = i5[1], i6 = i5[2], i4 = i5[3]; return i3 * i3 + i7 * i7 + i6 * i6 + i4 * i4 }; iZ.sqrLen = iZ.squaredLength; iZ.negate = function (i4, i3) { i4[0] = -i3[0]; i4[1] = -i3[1]; i4[2] = -i3[2]; i4[3] = -i3[3]; return i4 }; iZ.normalize = function (i7, i6) { var i4 = i6[0], i9 = i6[1], i8 = i6[2], i5 = i6[3]; var i3 = i4 * i4 + i9 * i9 + i8 * i8 + i5 * i5; if (i3 > 0) { i3 = 1 / Math.sqrt(i3); i7[0] = i6[0] * i3; i7[1] = i6[1] * i3; i7[2] = i6[2] * i3; i7[3] = i6[3] * i3 } return i7 }; iZ.dot = function (i4, i3) { return i4[0] * i3[0] + i4[1] * i3[1] + i4[2] * i3[2] + i4[3] * i3[3] }; iZ.lerp = function (i5, i4, i3, i6) { var i9 = i4[0], i8 = i4[1], i7 = i4[2], ja = i4[3]; i5[0] = i9 + i6 * (i3[0] - i9); i5[1] = i8 + i6 * (i3[1] - i8); i5[2] = i7 + i6 * (i3[2] - i7); i5[3] = ja + i6 * (i3[3] - ja); return i5 }; iZ.random = function (i3, i4) { i4 = i4 || 1; i3[0] = iW(); i3[1] = iW(); i3[2] = iW(); i3[3] = iW(); iZ.normalize(i3, i3); iZ.scale(i3, i3, i4); return i3 }; iZ.transformMat4 = function (i7, i6, i4) { var i3 = i6[0], i9 = i6[1], i8 = i6[2], i5 = i6[3]; i7[0] = i4[0] * i3 + i4[4] * i9 + i4[8] * i8 + i4[12] * i5; i7[1] = i4[1] * i3 + i4[5] * i9 + i4[9] * i8 + i4[13] * i5; i7[2] = i4[2] * i3 + i4[6] * i9 + i4[10] * i8 + i4[14] * i5; i7[3] = i4[3] * i3 + i4[7] * i9 + i4[11] * i8 + i4[15] * i5; return i7 }; iZ.transformQuat = function (i9, jf, i3) { var jg = jf[0], je = jf[1], jd = jf[2], jb = i3[0], ja = i3[1], i8 = i3[2], jc = i3[3], i6 = jc * jg + ja * jd - i8 * je, i5 = jc * je + i8 * jg - jb * jd, i4 = jc * jd + jb * je - ja * jg, i7 = -jb * jg - ja * je - i8 * jd; i9[0] = i6 * jc + i7 * -jb + i5 * -i8 - i4 * -ja; i9[1] = i5 * jc + i7 * -ja + i4 * -jb - i6 * -i8; i9[2] = i4 * jc + i7 * -i8 + i6 * -ja - i5 * -jb; return i9 }; iZ.forEach = (function () { var i3 = iZ.create(); return function (i6, ja, jb, i9, i8, i4) { var i7, i5; if (!ja) { ja = 4 } if (!jb) { jb = 0 } if (i9) { i5 = Math.min((i9 * ja) + jb, i6.length) } else { i5 = i6.length } for (i7 = jb; i7 < i5; i7 += ja) { i3[0] = i6[i7]; i3[1] = i6[i7 + 1]; i3[2] = i6[i7 + 2]; i3[3] = i6[i7 + 3]; i8(i3, i3, i4); i6[i7] = i3[0]; i6[i7 + 1] = i3[1]; i6[i7 + 2] = i3[2]; i6[i7 + 3] = i3[3] } return i6 } })(); iZ.str = function (i3) { return "vec4(" + i3[0] + ", " + i3[1] + ", " + i3[2] + ", " + i3[3] + ")" }; iY.vec4 = iZ; var iV = {}; iV.create = function (i4) { i4 = i4 || i; var i3 = new i4(4); i3[0] = 1; i3[1] = 0; i3[2] = 0; i3[3] = 1; return i3 }; iV.clone = function (i3, i5) { i5 = i5 || i; var i4 = new i5(4); i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; i4[3] = i3[3]; return i4 }; iV.copy = function (i4, i3) { i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; i4[3] = i3[3]; return i4 }; iV.identity = function (i3) { i3[0] = 1; i3[1] = 0; i3[2] = 0; i3[3] = 1; return i3 }; iV.transpose = function (i5, i4) { if (i5 === i4) { var i3 = i4[1]; i5[1] = i4[2]; i5[2] = i3 } else { i5[0] = i4[0]; i5[1] = i4[2]; i5[2] = i4[1]; i5[3] = i4[3] } return i5 }; iV.invert = function (i7, i5) { var i6 = i5[0], i4 = i5[1], i3 = i5[2], i9 = i5[3], i8 = i6 * i9 - i3 * i4; if (!i8) { return null } i8 = 1 / i8; i7[0] = i9 * i8; i7[1] = -i4 * i8; i7[2] = -i3 * i8; i7[3] = i6 * i8; return i7 }; iV.adjoint = function (i5, i3) { var i4 = i3[0]; i5[0] = i3[3]; i5[1] = -i3[1]; i5[2] = -i3[2]; i5[3] = i4; return i5 }; iV.determinant = function (i3) { return i3[0] * i3[3] - i3[2] * i3[1] }; iV.multiply = function (i7, jc, ja) { var i6 = jc[0], i5 = jc[1], i4 = jc[2], i3 = jc[3]; var jd = ja[0], jb = ja[1], i9 = ja[2], i8 = ja[3]; i7[0] = i6 * jd + i4 * jb; i7[1] = i5 * jd + i3 * jb; i7[2] = i6 * i9 + i4 * i8; i7[3] = i5 * i9 + i3 * i8; return i7 }; iV.mul = iV.multiply; iV.rotate = function (i7, ja, i9) { var i6 = ja[0], i5 = ja[1], i4 = ja[2], i3 = ja[3], jb = Math.sin(i9), i8 = Math.cos(i9); i7[0] = i6 * i8 + i4 * jb; i7[1] = i5 * i8 + i3 * jb; i7[2] = i6 * -jb + i4 * i8; i7[3] = i5 * -jb + i3 * i8; return i7 }; iV.scale = function (i7, i8, ja) { var i6 = i8[0], i5 = i8[1], i4 = i8[2], i3 = i8[3], jb = ja[0], i9 = ja[1]; i7[0] = i6 * jb; i7[1] = i5 * jb; i7[2] = i4 * i9; i7[3] = i3 * i9; return i7 }; iV.str = function (i3) { return "mat2(" + i3[0] + ", " + i3[1] + ", " + i3[2] + ", " + i3[3] + ")" }; iV.frob = function (i3) { return (Math.sqrt(Math.pow(i3[0], 2) + Math.pow(i3[1], 2) + Math.pow(i3[2], 2) + Math.pow(i3[3], 2))) }; iV.LDU = function (i3, i6, i5, i4) { i3[2] = i4[2] / i4[0]; i5[0] = i4[0]; i5[1] = i4[1]; i5[3] = i4[3] - i3[2] * i5[1]; return [i3, i6, i5] }; iY.mat2 = iV; var e = {}; e.create = function (i4) { i4 = i4 || i; var i3 = new i4(16); i3[0] = 1; i3[1] = 0; i3[2] = 0; i3[3] = 0; i3[4] = 0; i3[5] = 1; i3[6] = 0; i3[7] = 0; i3[8] = 0; i3[9] = 0; i3[10] = 1; i3[11] = 0; i3[12] = 0; i3[13] = 0; i3[14] = 0; i3[15] = 1; return i3 }; e.clone = function (i3) { var i4 = new i(16); i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; i4[3] = i3[3]; i4[4] = i3[4]; i4[5] = i3[5]; i4[6] = i3[6]; i4[7] = i3[7]; i4[8] = i3[8]; i4[9] = i3[9]; i4[10] = i3[10]; i4[11] = i3[11]; i4[12] = i3[12]; i4[13] = i3[13]; i4[14] = i3[14]; i4[15] = i3[15]; return i4 }; e.copy = function (i4, i3) { i4[0] = i3[0]; i4[1] = i3[1]; i4[2] = i3[2]; i4[3] = i3[3]; i4[4] = i3[4]; i4[5] = i3[5]; i4[6] = i3[6]; i4[7] = i3[7]; i4[8] = i3[8]; i4[9] = i3[9]; i4[10] = i3[10]; i4[11] = i3[11]; i4[12] = i3[12]; i4[13] = i3[13]; i4[14] = i3[14]; i4[15] = i3[15]; return i4 }; e.identity = function (i3) { i3[0] = 1; i3[1] = 0; i3[2] = 0; i3[3] = 0; i3[4] = 0; i3[5] = 1; i3[6] = 0; i3[7] = 0; i3[8] = 0; i3[9] = 0; i3[10] = 1; i3[11] = 0; i3[12] = 0; i3[13] = 0; i3[14] = 0; i3[15] = 1; return i3 }; e.transpose = function (i6, i5) { if (i6 === i5) { var ja = i5[1], i8 = i5[2], i7 = i5[3], i3 = i5[6], i9 = i5[7], i4 = i5[11]; i6[1] = i5[4]; i6[2] = i5[8]; i6[3] = i5[12]; i6[4] = ja; i6[6] = i5[9]; i6[7] = i5[13]; i6[8] = i8; i6[9] = i3; i6[11] = i5[14]; i6[12] = i7; i6[13] = i9; i6[14] = i4 } else { i6[0] = i5[0]; i6[1] = i5[4]; i6[2] = i5[8]; i6[3] = i5[12]; i6[4] = i5[1]; i6[5] = i5[5]; i6[6] = i5[9]; i6[7] = i5[13]; i6[8] = i5[2]; i6[9] = i5[6]; i6[10] = i5[10]; i6[11] = i5[14]; i6[12] = i5[3]; i6[13] = i5[7]; i6[14] = i5[11]; i6[15] = i5[15] } return i6 }; e.invert = function (jm, jr) { var jv = jr[0], jt = jr[1], js = jr[2], jp = jr[3], i7 = jr[4], i6 = jr[5], i5 = jr[6], i4 = jr[7], jl = jr[8], jk = jr[9], jj = jr[10], ji = jr[11], jx = jr[12], jw = jr[13], ju = jr[14], jq = jr[15], jh = jv * i6 - jt * i7, jg = jv * i5 - js * i7, jf = jv * i4 - jp * i7, je = jt * i5 - js * i6, jd = jt * i4 - jp * i6, jc = js * i4 - jp * i5, jb = jl * jw - jk * jx, ja = jl * ju - jj * jx, i9 = jl * jq - ji * jx, i8 = jk * ju - jj * jw, jo = jk * jq - ji * jw, jn = jj * jq - ji * ju, i3 = jh * jn - jg * jo + jf * i8 + je * i9 - jd * ja + jc * jb; if (!i3) { return null } i3 = 1 / i3; jm[0] = (i6 * jn - i5 * jo + i4 * i8) * i3; jm[1] = (js * jo - jt * jn - jp * i8) * i3; jm[2] = (jw * jc - ju * jd + jq * je) * i3; jm[3] = (jj * jd - jk * jc - ji * je) * i3; jm[4] = (i5 * i9 - i7 * jn - i4 * ja) * i3; jm[5] = (jv * jn - js * i9 + jp * ja) * i3; jm[6] = (ju * jf - jx * jc - jq * jg) * i3; jm[7] = (jl * jc - jj * jf + ji * jg) * i3; jm[8] = (i7 * jo - i6 * i9 + i4 * jb) * i3; jm[9] = (jt * i9 - jv * jo - jp * jb) * i3; jm[10] = (jx * jd - jw * jf + jq * jh) * i3; jm[11] = (jk * jf - jl * jd - ji * jh) * i3; jm[12] = (i6 * ja - i7 * i8 - i5 * jb) * i3; jm[13] = (jv * i8 - jt * ja + js * jb) * i3; jm[14] = (jw * jg - jx * je - ju * jh) * i3; jm[15] = (jl * je - jk * jg + jj * jh) * i3; return jm }; e.adjoint = function (jb, je) { var ji = je[0], jg = je[1], jf = je[2], jc = je[3], i6 = je[4], i5 = je[5], i4 = je[6], i3 = je[7], ja = je[8], i9 = je[9], i8 = je[10], i7 = je[11], jk = je[12], jj = je[13], jh = je[14], jd = je[15]; jb[0] = (i5 * (i8 * jd - i7 * jh) - i9 * (i4 * jd - i3 * jh) + jj * (i4 * i7 - i3 * i8)); jb[1] = -(jg * (i8 * jd - i7 * jh) - i9 * (jf * jd - jc * jh) + jj * (jf * i7 - jc * i8)); jb[2] = (jg * (i4 * jd - i3 * jh) - i5 * (jf * jd - jc * jh) + jj * (jf * i3 - jc * i4)); jb[3] = -(jg * (i4 * i7 - i3 * i8) - i5 * (jf * i7 - jc * i8) + i9 * (jf * i3 - jc * i4)); jb[4] = -(i6 * (i8 * jd - i7 * jh) - ja * (i4 * jd - i3 * jh) + jk * (i4 * i7 - i3 * i8)); jb[5] = (ji * (i8 * jd - i7 * jh) - ja * (jf * jd - jc * jh) + jk * (jf * i7 - jc * i8)); jb[6] = -(ji * (i4 * jd - i3 * jh) - i6 * (jf * jd - jc * jh) + jk * (jf * i3 - jc * i4)); jb[7] = (ji * (i4 * i7 - i3 * i8) - i6 * (jf * i7 - jc * i8) + ja * (jf * i3 - jc * i4)); jb[8] = (i6 * (i9 * jd - i7 * jj) - ja * (i5 * jd - i3 * jj) + jk * (i5 * i7 - i3 * i9)); jb[9] = -(ji * (i9 * jd - i7 * jj) - ja * (jg * jd - jc * jj) + jk * (jg * i7 - jc * i9)); jb[10] = (ji * (i5 * jd - i3 * jj) - i6 * (jg * jd - jc * jj) + jk * (jg * i3 - jc * i5)); jb[11] = -(ji * (i5 * i7 - i3 * i9) - i6 * (jg * i7 - jc * i9) + ja * (jg * i3 - jc * i5)); jb[12] = -(i6 * (i9 * jh - i8 * jj) - ja * (i5 * jh - i4 * jj) + jk * (i5 * i8 - i4 * i9)); jb[13] = (ji * (i9 * jh - i8 * jj) - ja * (jg * jh - jf * jj) + jk * (jg * i8 - jf * i9)); jb[14] = -(ji * (i5 * jh - i4 * jj) - i6 * (jg * jh - jf * jj) + jk * (jg * i4 - jf * i5)); jb[15] = (ji * (i5 * i8 - i4 * i9) - i6 * (jg * i8 - jf * i9) + ja * (jg * i4 - jf * i5)); return jb }; e.determinant = function (jo) { var jt = jo[0], jr = jo[1], jp = jo[2], jn = jo[3], i6 = jo[4], i5 = jo[5], i4 = jo[6], i3 = jo[7], jk = jo[8], jj = jo[9], ji = jo[10], jh = jo[11], jv = jo[12], ju = jo[13], js = jo[14], jq = jo[15], jg = jt * i5 - jr * i6, jf = jt * i4 - jp * i6, je = jt * i3 - jn * i6, jd = jr * i4 - jp * i5, jc = jr * i3 - jn * i5, jb = jp * i3 - jn * i4, ja = jk * ju - jj * jv, i9 = jk * js - ji * jv, i8 = jk * jq - jh * jv, i7 = jj * js - ji * ju, jm = jj * jq - jh * ju, jl = ji * jq - jh * js; return jg * jl - jf * jm + je * i7 + jd * i8 - jc * i9 + jb * ja }; e.multiply = function (jf, jj, jg) { var jn = jj[0], jm = jj[1], jk = jj[2], jh = jj[3], i9 = jj[4], i7 = jj[5], i5 = jj[6], i3 = jj[7], je = jj[8], jd = jj[9], jc = jj[10], jb = jj[11], jp = jj[12], jo = jj[13], jl = jj[14], ji = jj[15]; var ja = jg[0], i8 = jg[1], i6 = jg[2], i4 = jg[3]; jf[0] = ja * jn + i8 * i9 + i6 * je + i4 * jp; jf[1] = ja * jm + i8 * i7 + i6 * jd + i4 * jo; jf[2] = ja * jk + i8 * i5 + i6 * jc + i4 * jl; jf[3] = ja * jh + i8 * i3 + i6 * jb + i4 * ji; ja = jg[4]; i8 = jg[5]; i6 = jg[6]; i4 = jg[7]; jf[4] = ja * jn + i8 * i9 + i6 * je + i4 * jp; jf[5] = ja * jm + i8 * i7 + i6 * jd + i4 * jo; jf[6] = ja * jk + i8 * i5 + i6 * jc + i4 * jl; jf[7] = ja * jh + i8 * i3 + i6 * jb + i4 * ji; ja = jg[8]; i8 = jg[9]; i6 = jg[10]; i4 = jg[11]; jf[8] = ja * jn + i8 * i9 + i6 * je + i4 * jp; jf[9] = ja * jm + i8 * i7 + i6 * jd + i4 * jo; jf[10] = ja * jk + i8 * i5 + i6 * jc + i4 * jl; jf[11] = ja * jh + i8 * i3 + i6 * jb + i4 * ji; ja = jg[12]; i8 = jg[13]; i6 = jg[14]; i4 = jg[15]; jf[12] = ja * jn + i8 * i9 + i6 * je + i4 * jp; jf[13] = ja * jm + i8 * i7 + i6 * jd + i4 * jo; jf[14] = ja * jk + i8 * i5 + i6 * jc + i4 * jl; jf[15] = ja * jh + i8 * i3 + i6 * jb + i4 * ji; return jf }; e.mul = e.multiply; e.translate = function (jf, jh, ja) { var i9 = ja[0], i8 = ja[1], i7 = ja[2], jk, jj, ji, jg, i6, i5, i4, i3, je, jd, jc, jb; if (jh === jf) { jf[12] = jh[0] * i9 + jh[4] * i8 + jh[8] * i7 + jh[12]; jf[13] = jh[1] * i9 + jh[5] * i8 + jh[9] * i7 + jh[13]; jf[14] = jh[2] * i9 + jh[6] * i8 + jh[10] * i7 + jh[14]; jf[15] = jh[3] * i9 + jh[7] * i8 + jh[11] * i7 + jh[15] } else { jk = jh[0]; jj = jh[1]; ji = jh[2]; jg = jh[3]; i6 = jh[4]; i5 = jh[5]; i4 = jh[6]; i3 = jh[7]; je = jh[8]; jd = jh[9]; jc = jh[10]; jb = jh[11]; jf[0] = jk; jf[1] = jj; jf[2] = ji; jf[3] = jg; jf[4] = i6; jf[5] = i5; jf[6] = i4; jf[7] = i3; jf[8] = je; jf[9] = jd; jf[10] = jc; jf[11] = jb; jf[12] = jk * i9 + i6 * i8 + je * i7 + jh[12]; jf[13] = jj * i9 + i5 * i8 + jd * i7 + jh[13]; jf[14] = ji * i9 + i4 * i8 + jc * i7 + jh[14]; jf[15] = jg * i9 + i3 * i8 + jb * i7 + jh[15] } return jf }; e.scale = function (i6, i4, i5) { var i3 = i5[0], i8 = i5[1], i7 = i5[2]; i6[0] = i4[0] * i3; i6[1] = i4[1] * i3; i6[2] = i4[2] * i3; i6[3] = i4[3] * i3; i6[4] = i4[4] * i8; i6[5] = i4[5] * i8; i6[6] = i4[6] * i8; i6[7] = i4[7] * i8; i6[8] = i4[8] * i7; i6[9] = i4[9] * i7; i6[10] = i4[10] * i7; i6[11] = i4[11] * i7; i6[12] = i4[12]; i6[13] = i4[13]; i6[14] = i4[14]; i6[15] = i4[15]; return i6 }; e.rotate = function (jn, ju, jw, i3) { var jd = i3[0], jc = i3[1], jb = i3[2], jo = Math.sqrt(jd * jd + jc * jc + jb * jb), ji, js, jh, jy, jx, jv, jt, ja, i9, i8, i7, jm, jl, jk, jj, jg, jf, je, jr, jq, jp, i6, i5, i4; if (Math.abs(jo) < i2) { return null } jo = 1 / jo; jd *= jo; jc *= jo; jb *= jo; ji = Math.sin(jw); js = Math.cos(jw); jh = 1 - js; jy = ju[0]; jx = ju[1]; jv = ju[2]; jt = ju[3]; ja = ju[4]; i9 = ju[5]; i8 = ju[6]; i7 = ju[7]; jm = ju[8]; jl = ju[9]; jk = ju[10]; jj = ju[11]; jg = jd * jd * jh + js; jf = jc * jd * jh + jb * ji; je = jb * jd * jh - jc * ji; jr = jd * jc * jh - jb * ji; jq = jc * jc * jh + js; jp = jb * jc * jh + jd * ji; i6 = jd * jb * jh + jc * ji; i5 = jc * jb * jh - jd * ji; i4 = jb * jb * jh + js; jn[0] = jy * jg + ja * jf + jm * je; jn[1] = jx * jg + i9 * jf + jl * je; jn[2] = jv * jg + i8 * jf + jk * je; jn[3] = jt * jg + i7 * jf + jj * je; jn[4] = jy * jr + ja * jq + jm * jp; jn[5] = jx * jr + i9 * jq + jl * jp; jn[6] = jv * jr + i8 * jq + jk * jp; jn[7] = jt * jr + i7 * jq + jj * jp; jn[8] = jy * i6 + ja * i5 + jm * i4; jn[9] = jx * i6 + i9 * i5 + jl * i4; jn[10] = jv * i6 + i8 * i5 + jk * i4; jn[11] = jt * i6 + i7 * i5 + jj * i4; if (ju !== jn) { jn[12] = ju[12]; jn[13] = ju[13]; jn[14] = ju[14]; jn[15] = ju[15] } return jn }; e.rotateX = function (i3, ja, i9) { var jf = Math.sin(i9), i8 = Math.cos(i9), je = ja[4], jd = ja[5], jc = ja[6], jb = ja[7], i7 = ja[8], i6 = ja[9], i5 = ja[10], i4 = ja[11]; if (ja !== i3) { i3[0] = ja[0]; i3[1] = ja[1]; i3[2] = ja[2]; i3[3] = ja[3]; i3[12] = ja[12]; i3[13] = ja[13]; i3[14] = ja[14]; i3[15] = ja[15] } i3[4] = je * i8 + i7 * jf; i3[5] = jd * i8 + i6 * jf; i3[6] = jc * i8 + i5 * jf; i3[7] = jb * i8 + i4 * jf; i3[8] = i7 * i8 - je * jf; i3[9] = i6 * i8 - jd * jf; i3[10] = i5 * i8 - jc * jf; i3[11] = i4 * i8 - jb * jf; return i3 }; e.rotateY = function (i7, je, jd) { var jf = Math.sin(jd), jc = Math.cos(jd), i6 = je[0], i5 = je[1], i4 = je[2], i3 = je[3], jb = je[8], ja = je[9], i9 = je[10], i8 = je[11]; if (je !== i7) { i7[4] = je[4]; i7[5] = je[5]; i7[6] = je[6]; i7[7] = je[7]; i7[12] = je[12]; i7[13] = je[13]; i7[14] = je[14]; i7[15] = je[15] } i7[0] = i6 * jc - jb * jf; i7[1] = i5 * jc - ja * jf; i7[2] = i4 * jc - i9 * jf; i7[3] = i3 * jc - i8 * jf; i7[8] = i6 * jf + jb * jc; i7[9] = i5 * jf + ja * jc; i7[10] = i4 * jf + i9 * jc; i7[11] = i3 * jf + i8 * jc; return i7 }; e.rotateZ = function (i7, ja, i9) { var jf = Math.sin(i9), i8 = Math.cos(i9), i6 = ja[0], i5 = ja[1], i4 = ja[2], i3 = ja[3], je = ja[4], jd = ja[5], jc = ja[6], jb = ja[7]; if (ja !== i7) { i7[8] = ja[8]; i7[9] = ja[9]; i7[10] = ja[10]; i7[11] = ja[11]; i7[12] = ja[12]; i7[13] = ja[13]; i7[14] = ja[14]; i7[15] = ja[15] } i7[0] = i6 * i8 + je * jf; i7[1] = i5 * i8 + jd * jf; i7[2] = i4 * i8 + jc * jf; i7[3] = i3 * i8 + jb * jf; i7[4] = je * i8 - i6 * jf; i7[5] = jd * i8 - i5 * jf; i7[6] = jc * i8 - i4 * jf; i7[7] = jb * i8 - i3 * jf; return i7 }; e.fromRotationTranslation = function (jg, je, jc) { var i9 = je[0], i8 = je[1], i7 = je[2], ja = je[3], jh = i9 + i9, i3 = i8 + i8, jb = i7 + i7, i6 = i9 * jh, i5 = i9 * i3, i4 = i9 * jb, jf = i8 * i3, jd = i8 * jb, jk = i7 * jb, jl = ja * jh, jj = ja * i3, ji = ja * jb; jg[0] = 1 - (jf + jk); jg[1] = i5 + ji; jg[2] = i4 - jj; jg[3] = 0; jg[4] = i5 - ji; jg[5] = 1 - (i6 + jk); jg[6] = jd + jl; jg[7] = 0; jg[8] = i4 + jj; jg[9] = jd - jl; jg[10] = 1 - (i6 + jf); jg[11] = 0; jg[12] = jc[0]; jg[13] = jc[1]; jg[14] = jc[2]; jg[15] = 1; return jg }; e.fromQuat = function (jd, ja) { var i7 = ja[0], i6 = ja[1], i5 = ja[2], i8 = ja[3], je = i7 + i7, i3 = i6 + i6, i9 = i5 + i5, i4 = i7 * je, jc = i6 * je, jb = i6 * i3, jk = i5 * je, jj = i5 * i3, jh = i5 * i9, ji = i8 * je, jg = i8 * i3, jf = i8 * i9; jd[0] = 1 - jb - jh; jd[1] = jc + jf; jd[2] = jk - jg; jd[3] = 0; jd[4] = jc - jf; jd[5] = 1 - i4 - jh; jd[6] = jj + ji; jd[7] = 0; jd[8] = jk + jg; jd[9] = jj - ji; jd[10] = 1 - i4 - jb; jd[11] = 0; jd[12] = 0; jd[13] = 0; jd[14] = 0; jd[15] = 1; return jd }; e.frustum = function (i7, i4, jc, i3, jb, i9, i8) { var ja = 1 / (jc - i4), i6 = 1 / (jb - i3), i5 = 1 / (i9 - i8); i7[0] = (i9 * 2) * ja; i7[1] = 0; i7[2] = 0; i7[3] = 0; i7[4] = 0; i7[5] = (i9 * 2) * i6; i7[6] = 0; i7[7] = 0; i7[8] = (jc + i4) * ja; i7[9] = (jb + i3) * i6; i7[10] = (i8 + i9) * i5; i7[11] = -1; i7[12] = 0; i7[13] = 0; i7[14] = (i8 * i9 * 2) * i5; i7[15] = 0; return i7 }; e.perspective = function (i6, i5, i4, i7, i3) { var i9 = 1 / Math.tan(i5 / 2), i8 = 1 / (i7 - i3); i6[0] = i9 / i4; i6[1] = 0; i6[2] = 0; i6[3] = 0; i6[4] = 0; i6[5] = i9; i6[6] = 0; i6[7] = 0; i6[8] = 0; i6[9] = 0; i6[10] = (i3 + i7) * i8; i6[11] = -1; i6[12] = 0; i6[13] = 0; i6[14] = (2 * i3 * i7) * i8; i6[15] = 0; return i6 }; e.ortho = function (i6, i4, jc, i3, ja, i9, i8) { var i7 = 1 / (i4 - jc), jb = 1 / (i3 - ja), i5 = 1 / (i9 - i8); i6[0] = -2 * i7; i6[1] = 0; i6[2] = 0; i6[3] = 0; i6[4] = 0; i6[5] = -2 * jb; i6[6] = 0; i6[7] = 0; i6[8] = 0; i6[9] = 0; i6[10] = 2 * i5; i6[11] = 0; i6[12] = (i4 + jc) * i7; i6[13] = (ja + i3) * jb; i6[14] = (i8 + i9) * i5; i6[15] = 1; return i6 }; e.lookAt = function (jh, jo, jp, i9) { var jn, jm, jk, i5, i4, i3, jc, jb, ja, ji, jl = jo[0], jj = jo[1], jg = jo[2], i8 = i9[0], i7 = i9[1], i6 = i9[2], jf = jp[0], je = jp[1], jd = jp[2]; if (Math.abs(jl - jf) < i2 && Math.abs(jj - je) < i2 && Math.abs(jg - jd) < i2) { return e.identity(jh) } jc = jl - jf; jb = jj - je; ja = jg - jd; ji = 1 / Math.sqrt(jc * jc + jb * jb + ja * ja); jc *= ji; jb *= ji; ja *= ji; jn = i7 * ja - i6 * jb; jm = i6 * jc - i8 * ja; jk = i8 * jb - i7 * jc; ji = Math.sqrt(jn * jn + jm * jm + jk * jk); if (!ji) { jn = 0; jm = 0; jk = 0 } else { ji = 1 / ji; jn *= ji; jm *= ji; jk *= ji } i5 = jb * jk - ja * jm; i4 = ja * jn - jc * jk; i3 = jc * jm - jb * jn; ji = Math.sqrt(i5 * i5 + i4 * i4 + i3 * i3); if (!ji) { i5 = 0; i4 = 0; i3 = 0 } else { ji = 1 / ji; i5 *= ji; i4 *= ji; i3 *= ji } jh[0] = jn; jh[1] = i5; jh[2] = jc; jh[3] = 0; jh[4] = jm; jh[5] = i4; jh[6] = jb; jh[7] = 0; jh[8] = jk; jh[9] = i3; jh[10] = ja; jh[11] = 0; jh[12] = -(jn * jl + jm * jj + jk * jg); jh[13] = -(i5 * jl + i4 * jj + i3 * jg); jh[14] = -(jc * jl + jb * jj + ja * jg); jh[15] = 1; return jh }; e.str = function (i3) { return "mat4(" + i3[0] + ", " + i3[1] + ", " + i3[2] + ", " + i3[3] + ", " + i3[4] + ", " + i3[5] + ", " + i3[6] + ", " + i3[7] + ", " + i3[8] + ", " + i3[9] + ", " + i3[10] + ", " + i3[11] + ", " + i3[12] + ", " + i3[13] + ", " + i3[14] + ", " + i3[15] + ")" }; e.frob = function (i3) { return (Math.sqrt(Math.pow(i3[0], 2) + Math.pow(i3[1], 2) + Math.pow(i3[2], 2) + Math.pow(i3[3], 2) + Math.pow(i3[4], 2) + Math.pow(i3[5], 2) + Math.pow(i3[6], 2) + Math.pow(i3[6], 2) + Math.pow(i3[7], 2) + Math.pow(i3[8], 2) + Math.pow(i3[9], 2) + Math.pow(i3[10], 2) + Math.pow(i3[11], 2) + Math.pow(i3[12], 2) + Math.pow(i3[13], 2) + Math.pow(i3[14], 2) + Math.pow(i3[15], 2))) }; iY.mat4 = e })(window); function bT() { this.result = { bkData: [], eleData: [[], [], [], [], [], [], [], [], []], tileLabels: [] } } ej.extend(bT.prototype, { createLayer: function (T, i) { var e = this.result.bkData; i = i || {}; if (!e[T]) { e[T] = [[], [], []] } e[T].tileTypeName = i.tileTypeName || "na"; e[T].dataType = i.dataType || 2; e[T].png8 = i.png8 || false; e[T].clipTile = i.clipTile || false; e[T].boundary = i.boundary || false }, removeLayer: function (i) { var e = this.result.bkData; e[i] = null }, hasLayerBoundary: function () { var e = this.result.bkData; var T = false; for (var iV = 0; iV < e.length; iV++) { if (e[iV] && e[iV].boundary) { T = true; break } } return T }, getResult: function () { return this.result }, setData: function (iX, iW, iY) { var e = this.result.bkData; var T = e[iW] ? e[iW][iY] : null; if (!T) { return } for (var iV = 0; iV < T.length; iV++) { if (T[iV].key && T[iV].key === iX.key) { T[iV] = iX; return } } T.push(iX) }, setLabelData: function (e) { this.result.tileLabels = e }, getLabelData: function () { return this.result.tileLabels }, setOverlayData: function (i, e) { if (!this.result.eleData[e]) { return } this.result.eleData[e] = i }, clearLabelOverlayData: function () { this.result.eleData[2] = []; this.result.eleData[3] = []; this.result.eleData[4] = [] }, clearData: function (iV) { var e = this.result.bkData; if (typeof iV === "number") { if (e[iV]) { e[iV][0] = []; e[iV][1] = []; e[iV][2] = [] } return } for (var T = 0; T < e.length; T++) { if (!e[T]) { continue } e[T][0] = []; e[T][1] = []; e[T][2] = [] } }, sortThumbData: function (i) { var e = this.result.bkData; var T = e[i]; if (!T) { return } if (T[0] && T[0].length > 0) { T[0].sort(function (iW, iV) { return iW.tileInfo.useZoom - iV.tileInfo.useZoom }) } } }); var fx = (function () { var i5 = new Int8Array(4); var T = new Int32Array(i5.buffer, 0, 1); var i0 = new Float32Array(i5.buffer, 0, 1); function i7(je) { T[0] = je; return i0[0] } function i(je) { i0[0] = je; return T[0] } function i1(je) { var jg = (je[3] << 24 | je[2] << 16 | je[1] << 8 | je[0]); var jf = i7(jg & 4278190079); return jf } var iW = 0; var iZ = 1; var i3 = 2; var jb = 0; var i8 = 1; var i6 = 2; var iX = 9; function i4(je, jf) { var jg; if (jf % 2 === 0) { jg = [-je[1], je[0]] } else { jg = [je[1], -je[0]] } return jg } function e(je, jf, jg) { var jh = i4(je, jf); var ji; if (jg === iZ) { return jh } else { if (jf === 4 || jf === 5) { ji = [jh[0] - je[0], jh[1] - je[1]] } else { ji = [jh[0] + je[0], jh[1] + je[1]] } if (jg === iW) { vec2.normalize(ji, ji) } return ji } } function ja(jf, je) { return Math.sqrt(Math.pow(jf[0] - je[0], 2) + Math.pow(jf[1] - je[1], 2)) } function iV(ji, jh, jg, je) { var jf = vec2.dot(ji, jh); if (jg === i6 || jg === i8) { if ((je === 0 || je === 1) && jf > 0) { return true } else { if ((je === 2 || je === 3) && jf < 0) { return true } } } if ((je === 0 || je === 1) && jf < 0) { return true } else { if ((je === 2 || je === 3) && jf > 0) { return true } } return false } function i2(jf, jk, jm) { var jl = i4(jf, jk); var jh; var jj = jf; var ji = jm; var jo = []; vec2.normalize(jo, [jj[0] + ji[0], jj[1] + ji[1]]); var jn = vec2.dot(jl, [-jo[1], jo[0]]); if (Math.abs(jn) < 0.1) { jn = 1 } var jg = 1 / jn; jh = [-jo[1] * jg, jo[0] * jg]; var je = vec2.dot(jf, jh); if (je < 0) { vec2.negate(jh, jh) } return { cos2: je, offset: jh } } function jd(jf, jk, jm, je) { var jl = i4(jf, jk); var jj; var ji; var jh; if (jk === 0 || jk === 1) { jj = jm; ji = jf } else { jj = jf; ji = jm } if (!jj || !ji) { return jl } var jo = [jj[0] + ji[0], jj[1] + ji[1]]; if (jo[0] === 0 && jo[1] === 0) { vec2.normalize(jo, ji) } else { vec2.normalize(jo, jo) } var jp = iV(jo, jl, je, jk); if (jp) { return jl } var jn = vec2.dot(jl, [-jo[1], jo[0]]); if (Math.abs(jn) < 0.1) { jn = 1 } var jg = 1 / jn; jh = [-jo[1] * jg, jo[0] * jg]; return jh } function jc(jp, jq, jj, ji, jr, jo, jh, jk, jg, jn) { var jm; var jf = 0; var je = false; jm = jo.length / iX - 1; iY(jq[0], jp[0], jj[0], jr, ji, 4, jk, jg, undefined, jo, jn); jm++; jf++; iY(jq[0], jp[0], jj[0], jr, ji, 5, jk, jg, undefined, jo, jn); jm++; jf++; for (var jl = 0; jl < jp.length; jl++) { iY(jq[jl], jp[jl], jj[jl], jr, ji, 0, jk, jg, jp[jl - 1], jo, jn); i9(jh, ++jm, ++jf, je); iY(jq[jl], jp[jl], jj[jl], jr, ji, 1, jk, jg, jp[jl - 1], jo, jn); i9(jh, ++jm, ++jf, je); iY(jq[jl + 1], jp[jl], jj[jl + 1], jr, ji, 2, jk, jg, jp[jl + 1], jo, jn); i9(jh, ++jm, ++jf, je); iY(jq[jl + 1], jp[jl], jj[jl + 1], jr, ji, 3, jk, jg, jp[jl + 1], jo, jn); i9(jh, ++jm, ++jf, je); if (ji === i8 && jl !== jp.length - 1) { iY(jq[jl + 1], jp[jl], jj[jl + 1], jr, ji, 8, jk, jg, jp[jl + 1], jo, jn); i9(jh, ++jm, ++jf, je); je = je ? false : true } } iY(jq[jq.length - 1], jp[jp.length - 1], jj[jq.length - 1], jr, ji, 6, jk, jg, undefined, jo, jn); i9(jh, ++jm, ++jf, je); iY(jq[jq.length - 1], jp[jp.length - 1], jj[jq.length - 1], jr, ji, 7, jk, jg, undefined, jo, jn); i9(jh, ++jm, ++jf, je) } function iY(jr, jh, jl, js, jg, jm, jj, jf, jp, jo, jn) { var jq = jm % 2 === 0 ? 1 : -1; var jk; if (jm === 4 || jm === 5 || jm === 6 || jm === 7) { jk = e(jh, jm, js) } else { if (jm === 0 || jm === 1 || jm === 2 || jm === 3) { jk = jd(jh, jm, jp, jg) } else { if (jm === 8) { var ji = i2(jh, jm, jp); jk = ji.offset; vec2.normalize(jk, jk); var je = ji.cos2; if (je < 0) { jq = -jq } } } } jo[jo.length] = jr[0] * 10; jo[jo.length] = jr[1] * 10; jo[jo.length] = jk[0] * jf * 10; jo[jo.length] = jk[1] * jf * 10; jo[jo.length] = jj; jo[jo.length] = jq; jo[jo.length] = 0; jo[jo.length] = jn || 0; jo[jo.length] = jl } function i9(ji, jg, je, jh) { var jf; if (je % 2 === 0) { if (jh) { ji[ji.length] = jg - 2; ji[ji.length] = jg - 1; ji[ji.length] = jg } else { ji[ji.length] = jg - 1; ji[ji.length] = jg - 2; ji[ji.length] = jg } } else { if (jh) { ji[ji.length] = jg - 1; ji[ji.length] = jg - 2; ji[ji.length] = jg } else { ji[ji.length] = jg - 2; ji[ji.length] = jg - 1; ji[ji.length] = jg } } } return { getVertexCount: function (jf, je) { if (je === i8) { return jf * 5 - 2 } else { return jf * 4 } }, buildData: function (jp, jg, jq, jm, je, jj, jf, jn) { var jo = []; var jl = 0; var ji = [0]; for (var jk = 0; jk < jp.length; jk++) { if (jk > 0) { jl += ja(jp[jk], jp[jk - 1]); ji.push(jl * 10) } if (jk !== jp.length - 1) { var jh = [jp[jk + 1][0] - jp[jk][0], jp[jk + 1][1] - jp[jk][1]]; var jr = []; if (jh[0] === 0 && jh[1] === 0) { jr = [0, 0] } else { vec2.normalize(jr, jh) } jo[jo.length] = [jr[0], jr[1]] } } return jc(jo, jp, ji, jg, jq, jm, je, i1(jj), jf, jn) }, toTileSolidLineVertices: function (ji, jf) { var jg = new Float32Array(ji.length / iX * 5); var je = new Int16Array(jg.buffer); var jk = 0; var jh = 0; for (var jj = 0; jj < ji.length; jj += iX) { je[jk] = ~~ji[jj]; je[jk + 1] = ~~ji[jj + 1]; je[jk + 2] = ~~ji[jj + 2]; je[jk + 3] = ~~ji[jj + 3]; jg[jh + 2] = ji[jj + 4]; je[jk + 6] = ji[jj + 5]; je[jk + 7] = jf ? jf : 0; je[jk + 8] = ji[jj + 7]; je[jk + 9] = 0; jk += 10; jh += 5 } return jg } } })(); var fO = 1; var gJ = 2; var ey = { drawIndex: 0, devicePixelRatio: fp(), zoomState: 1, curViewTilesInfo: null, iconSetImg: null, LAST_CALC_ZOOM: -1, LAST_LOAD_VECTOR_ZOOM_CHANGE: false, lastCollisionTestTime: 0, remove: function () { this.tileCache.clear() }, initDrawData: function () { this.drawIndex = this.zIndex; this.map._featureMgr.createLayer(this.drawIndex, { tileTypeName: this.tileType.getName(), dataType: this.dataType, png8: this.png8, clipTile: this.clipTile, boundary: this.boundary }); this.dispatchEvent(new eX("oninitDrawData")) }, destroyDrawData: function () { this.map._featureMgr.removeLayer(this.drawIndex); var i = new eX("onremoveLayerMask"); i.hasLayerBoundary = this.map._featureMgr.hasLayerBoundary(); this.map.dispatchEvent(i) }, setZIndex: function (iZ) { iZ = Math.abs(Math.floor(iZ)) || 1; if (!iZ || iZ === this.zIndex) { return } var i = this.map._featureMgr.result.bkData; var iV = this.map.tileMgr.tileLayers; function T(i2) { var i1 = null; for (var i0 = 0; i0 < iV.length; i0++) { if (iV[i0].zIndex === i2) { i1 = iV[i0]; break } } return i1 } var e = []; var iY = []; var iX = this.zIndex; if (i[iZ]) { e.push(T(iZ)); iY.push(i[iZ]); this.setTargetZIndex(iZ); i[iZ] = i[iX]; i[iX] = null } else { this.setTargetZIndex(iZ); i[iZ] = i[iX]; i[iX] = null; this.map.dispatchEvent(new eX("onrefresh")); return } var iW = iZ + 1; while (iW) { if (i[iW]) { e.push(T(iW)); iY.push(i[iW]); e.shift().setTargetZIndex(iW); i[iW] = iY.shift(); iW += 1 } else { e.shift().setTargetZIndex(iW); i[iW] = iY.shift(); iW = 0 } } this.map.dispatchEvent(new eX("onrefresh")) }, setZIndexTop: function () { var e = this.map._featureMgr.result.bkData; e[e.length] = e[this.zIndex]; e[this.zIndex] = null; this.setTargetZIndex(e.length - 1); this.map.dispatchEvent(new eX("onrefresh")) }, getTileKey: function (e, iV) { iV = iV || {}; var i = typeof iV.useZoom === "number" ? iV.useZoom : e.useZoom; var T = e.style || this.mapStyleId || "default"; return this.mapType + "_" + T + "_" + e.col + "_" + e.row + "_" + e.zoom + "_" + i }, getTileRenderDataKey: function (i) { var T = i.col; var iV = i.zoom; var e = i.baseTileSize; T = em.calcLoopParam(T, iV, e).col; return this.mapType + "_" + T + "_" + i.row + "_" + iV + "_" + i.useZoom }, getTileUnits: function (e) { var iV = this.map; var T = dG[iV.getMapType()]; var i = T.baseUnits * Math.pow(2, T.zoomLevelBase - e); return i }, getTilesUrl: function (iW, i5, i6) { var i = iW.x; var i7 = iW.y; var i2 = iB("ditu", "normal"); var iY = i2.ver; var iZ = i2.udt; i = em.calcLoopParam(i, i5, i6).col; var i4 = dG.B_NORMAL_MAP.vectorTileUrls; var iX = Math.abs(i + i7) % i4.length; var i3 = i4[iX]; if (window.offLineIPAddress) { i4 = [window.offLineIPAddress + "pvd/"]; i3 = i4[0] } var T = "x=" + i + "&y=" + i7 + "&z=" + Math.floor(i5); var i1 = this.devicePixelRatio > 1 ? "&scaler=2" : ""; var i0 = "&textimg=1"; if (this.map.config.textRenderType === "canvas") { i0 = "&textimg=0" } var iV = this.map.config.style; if (typeof iV === "string" && iV !== "default") { T += "&styleId=" + u.mapStyleNameIdPair[iV] } T += "&styles=pl" + i0 + i1 + "&v=" + iY + "&udt=" + iZ + "&json=0"; var e = i3 + "?qt=vtile&param=" + window.encodeURIComponent(ef(T)); return e }, getRasterTilesUrl: function (T, iX, iV) { var iW = dG[this.map.mapType]; var i = this.map.config.style; var e = iW.tileUrls[Math.abs(iX + T) % iW.tileUrls.length] + "?qt=tile&x=" + T + "&y=" + iX + "&z=" + iV + ((i === "default" || typeof i !== "string") ? "" : ("&styleId=" + u.mapStyleNameIdPair[i])) + "&styles=pl&udt=" + this.normalUdt + "&scaler=" + this.scaler + "&p=1"; e = e.replace(/-(\d+)/gi, "M$1"); return e }, getZoomState: function () { var T = this.map; var i = T.getZoom(); var e = i - this.lastZoom; if (e > 0) { this.zoomState = 1 } else { if (e < 0) { this.zoomState = -1 } } this.lastZoom = i; return this.zoomState }, releaseOutViewTileData: function (e) { var iW = this.map._workerMgr.releasePendingData(e); for (var iV = 0, T = iW.length; iV < T; iV++) { var iX = this.getTileKey(iW[iV]); this.tileCache.removeData(iX) } }, loadLayerData: function (e, iV, i) { this.hasZoomChange = i; this.curViewTilesInfo = e; this.mapStyleId = this.map.getMapStyleId(); this.releaseOutViewTileData(e); var T = this.getZoomState(); if (this.dataType === gJ) { if (iV) { this.getVectorLayerDataFromCache(e, T) } else { this.loadVectorLayerData(e) } } else { this.loadRasterLayerData(e, iV) } }, getVectorLayerDataFromCache: function (i0, ja) { this.map.temp.isPermitSpotOver = false; this.tileLabels = []; if (this.baseLayer === true) { var i4 = this.map._customLabelMgr.virtualTile; if (i4 && i4.label) { this.tileLabels.push(i4.label) } } this.thumbCache = {}; var jb = -1; for (var i7 = 0, i5 = i0.length; i7 < i5; i7++) { var i8 = i0[i7]; var iW = i8.col; var iX = i8.row; var T = i8.zoom; var i6 = this._getTileTexImgKey(i8); var iV = i8.useZoom; jb = T; var iY = this.getTileKey(i8); var jd = this.tileCache.getData(iY); if (jd && jd.status === "ready") { var je = jd; this.map._featureMgr.setData(jd, this.drawIndex, 2); if (jd.label) { if (jd.label.status === "ready") { jd.label.tileInfo = jd.tileInfo; this.tileLabels.push(jd.label); if (jd.label.textureSources && jd.label.textureSources[iV] && this.map._webglMapScene) { var jc = this.map._webglMapScene._painter; if (!jc._labelTextureAtlasOffset[i6]) { jc._addToAsyncJob(jd.label.textureSources[iV]) } } } else { if (jd.label.status !== "processing") { this.processLabelData(jd) } } } } else { var i9 = { tileInfo: i8, dataType: gJ, key: iY }; this.map._featureMgr.setData(i9, this.drawIndex, 2); if (this.useThumbData) { this.setThumbData(iW, iX, T, iV, ja) } } } this.tileLabels.labelZoom = jb; this.updateLabels(ja); var i1 = this.map.getZoom(); var iZ = Math.floor(i1); var i3 = i1 - iZ; var i2 = Math.floor(this.LAST_CALC_ZOOM); var e = this.LAST_CALC_ZOOM - i2; var jf = false; if (this.hasZoomChange) { if (Math.abs(i1 - this.LAST_CALC_ZOOM) >= 0.5) { jf = true } else { if (i3 < 0.5 && e >= 0.5) { jf = true } else { if (i3 >= 0.5 && e < 0.5) { jf = true } } } if (jf) { this.cacheDataCollideLabels(0) } this.LAST_CALC_ZOOM = i1 } else { if (this.tileLabels.length > 0) { this.cacheDataCollideLabels(ej.Browser.ie ? 50 : 30) } } }, loadVectorLayerData: function (i1) { this.map.temp.isPermitSpotOver = false; var i0 = this; function iZ(i, i2) { var i4 = i0.tileCache.getData(i2); if (!i4) { return } if (!i || i.error) { i.event && bk.fetchDebug && bk.fetchDebug.sendError({ title: i.event.title, msg: i.event.msg, category: bk.fetchDebug.category.AJAX, level: bk.fetchDebug.levels.ERROR, url: i.event.title }); var i3 = new eX("ontileloaderror"); i = i || {}; i3.error = i.error || ""; i3.message = i.message || ""; i0.map.fire(i3); i4.status = "init"; i4.reloadTimer = setTimeout(function () { if (i4.retry < 3) { i4.retry++; i4.status = "loading"; i0.loadVectorTileData(i.tileInfo, iZ) } else { i0.tileCache.removeData(i2) } }, 4000); i0.map._featureMgr.clearData(i0.drawIndex); i0._checkTilesLoaded(); i0.getVectorLayerDataFromCache(i0.curViewTilesInfo, i0.getZoomState()); return } if (i4.reloadTimer) { clearTimeout(i4.reloadTimer); i4.reloadTimer = null } i0.callbackDataQueue.push([i, i2]); if (i0.processDataTimer) { return } i0.processDataTimer = setTimeout(function () { while (i0.callbackDataQueue.length > 0) { var i6 = i0.callbackDataQueue.shift(); i0.vectorTileDataCbk(i6[0], i6[1]); i0._checkTilesLoaded() } i0.map._featureMgr.clearData(i0.drawIndex); i0.getVectorLayerDataFromCache(i0.curViewTilesInfo, i0.getZoomState()); var i5 = new eX("onrefresh"); i5.source = "webgllayer"; i0.map.dispatchEvent(i5); i0.processDataTimer = null }, 200) } for (var iY = 0, iW = i1.length; iY < iW; iY++) { var T = i1[iY]; var iX = this.getTileKey(T); var e = this.tileCache.getData(iX); if (!e) { e = { status: "init", tileInfo: T, dataType: gJ, key: iX, retry: 0 } } if (e.status !== "ready" && e.status !== "loading") { this.numLoading++; e.status = "loading"; this.tileCache.setData(iX, e); var iV = this.getProcessedLabelZoom(T); if (iV) { T.processedLabelZooms = iV } this.loadVectorTileData(T, iZ) } } }, setThumbData: function (i, iW, iV, e, T) { if (T === 1) { if (this._findParentZoomTile(i, iW, iV, e, 8) === false) { this._findChildZoomTile(i, iW, iV, e, 3) } } else { if (T === -1) { if (this._findChildZoomTile(i, iW, iV, e, 3) === false) { this._findParentZoomTile(i, iW, iV, e, 8) } } } this.map._featureMgr.sortThumbData(this.drawIndex) }, _findParentZoomTile: function (iY, i7, i6, iW, i1) { var iX = dG[this.getMapType()]; var T = iX.minDataZoom; var e = iY; var i4 = i7; var i2 = i6; var i3 = iW; for (var i0 = 1; i0 <= i1; i0++) { var iV = this.tileType.getParentTile(e, i4, i2, i3, T); if (iV === null) { continue } var i5 = this.getTileKey(iV); var iZ = this.tileCache.getData(i5); if (iZ && iZ.status === "ready") { if (this.thumbCache[i5]) { continue } this.map._featureMgr.setData(iZ, this.drawIndex, 0); this.thumbCache[i5] = true; return true } e = iV.col; i4 = iV.row; i2 = iV.zoom; i3 = iV.useZoom } return false }, _findChildZoomTile: function (iZ, i1, e, iW, ja) { var i8 = dG[this.getMapType()]; var i4 = i8.maxDataZoom; var iY = iZ; var i0 = i1; var i2 = e; var iV = iW; var iX = true; for (var i7 = 1; i7 <= ja; i7++) { var i5 = false; var T = this.tileType.getChildTiles(iY, i0, i2, iV, i4, i7); if (!T) { continue } for (var i6 = 0; i6 < T.length; i6++) { var i3 = this.getTileKey(T[i6]); var i9 = this.tileCache.getData(i3); if (i9 && i9.status === "ready") { if (!this.thumbCache[i3]) { this.map._featureMgr.setData(i9, this.drawIndex, 1); this.thumbCache[i3] = true } i5 = true } else { iX = false } } if (i5) { break } } return iX }, loadVectorTileData: function (i7, i8) { var iW = i7.col; var iX = i7.row; var e = i7.zoom; var i5 = i7.baseTileSize; var iV = this.getTilesUrl(new eB(iW, iX), e, i5); var iY = this.map.getPrivateRegions(); if (!this.processData && this.map.getPrivateStatus() && iY) { var i3 = i7.useZoom; var i2 = this.tileType.getMercatorSize(i3); var i1 = iW * i2; var i0 = iX * i2; var i4 = new b8(i1 + i2 / 2, i0 + i2 / 2); var iZ = new g0(new b8(i1, i0), new b8(i1 + i2, i0 + i2)); for (var i6 = 0; i6 < iY.length; i6++) { if (iY[i6] instanceof ck) { if (iY[i6].crossPoint(i4, iZ, i3)) { var i9 = { x: iW, y: iX, z: e, mapZoom: i3 }; var T = iY[i6].tileUrlFunction(iV, i9); if (T && T.url) { iV = T.url; T.header && (i7.header = T.header) } break } } } } if (!iV) { return } var jb = this.getTileKey(i7); gl(this.map); if (!this.processData) { this.map._workerMgr.loadTileData(iV, i7, jb, i8); return } var i8 = "cbk" + jb.replace(/-/g, "_"); var ja = this; bk[i8] = function (i) { var jc = (function (jd) { return function () { jd.tileInfo = i7; var jj = ja.processData(jd); if (!jj.road) { return } var jg = { tileInfo: i7, renderData: { base: [] }, status: "ready", key: jb, mapType: ja.mapType }; var jm = []; var jp = []; for (var ji = 0; ji < jj.road.length; ji++) { var jl = jj.road[ji]; var jk = -1; for (var jh = 0; jh < jl.length; jh++) { var jn = jl[jh]; var jo = []; if (jm.length / 7 + jn[0].length / 2 > 65536) { jg.renderData.base.push({ type: "line", data: [fx.toTileSolidLineVertices(jm, 4000), new Uint16Array(jp)] }); jm = []; jp = [] } for (var jf = 0; jf < jn[0].length; jf += 2) { jo[jo.length] = [jn[0][jf], jn[0][jf + 1]] } var je = jn[3]; fx.buildData(jo, jn[1], jn[2], jm, jp, je, jn[4], ji + 20, false) } jg.renderData.base.push({ type: "line", data: [fx.toTileSolidLineVertices(jm, 4000), new Uint16Array(jp)] }) } ja.tileCache.setData(jb, jg); ja.map._featureMgr.clearData(ja.drawIndex); ja.getVectorLayerDataFromCache(ja.curViewTilesInfo, ja.getZoomState()); ja.map.dispatchEvent(new eX("onrefresh")) } })(i); ja.map.jobScheduler.addJob(jc); delete bk[i8] }; iV += "&fn=" + encodeURIComponent(eL + "." + i8); fV.load(iV) }, vectorTileDataCbk: function (iV, iW) { var i0 = new eX("ontileloaded"); i0.perfStat = iV.perfStat || []; var e = this.map; e.fire(i0); var i = iV.tileInfo; var T = i.col; var i4 = i.row; var i3 = i.zoom; var i2 = i.baseTileSize; var iY = this.tileCache.getData(iW); if (!iY) { return } if (!this.showLabel) { iV.label = null } iY.renderData = iV; iY.tileInfo = i; var iX = em.calcLoopParam(T, i3, i2); var i1 = iX.geoOffsetX; iY.tileInfo.loopOffsetX = i1; iY.status = "ready"; iY.mapType = this.mapType; this.tileCache.setData(iW, iY); iY.label = iV.label; iV.label = null; if (iV.indoorData && e._indoorMgr) { e._indoorMgr.setData(iV.indoorData) } var iZ = "id_" + T + "_" + i4 + "_" + i3; if (!this.curViewTilesInfo[iZ]) { e.fire(new eX("ontilenotinview")); return } this.processLabelData(iY); if (iV.indoorData && e._indoorMgr && e._indoorMgr.currentUid) { this._refreshIndoorData(e._indoorMgr.currentUid, e._indoorMgr.currentFloor) } }, _refreshIndoorData: function (i3, i2) { var i5 = this.map._indoorMgr.getIndoorData(i3); var i8 = i5.tileKeys; var i6 = Math.floor(this.map.getZoom()); for (var i0 = 0; i0 < i8.length; i0++) { var iX = i8[i0]; var iZ = this.tileCache.getData(iX); if (!iZ) { continue } var i7 = iZ.renderData; i7.indoorBase = []; i7.indoorBaseContour = []; i7.indoorBorder3D = []; i7.indoorArea3D = []; iZ.label.indoorLabel = []; this.labelProcessor.clearCollisionCache(iZ.label); for (var i1 in i7.indoorData) { if (i1 === "tileInfo") { continue } var e = i7.indoorData[i1]; var iW = e.defaultFloor; if (i1 === i3) { iW = i2; e.currentFloor = i2 } if (e.floors[iW]) { if (e.floors[iW].base) { for (var iY = 0; iY < e.floors[iW].base.length; iY++) { i7.indoorBase.push(e.floors[iW].base[iY]) } } if (e.floors[iW].contour) { for (var iY = 0; iY < e.floors[iW].contour.length; iY++) { i7.indoorBaseContour.push(e.floors[iW].contour[iY]) } } if (e.floors[iW].indoorBorder3D) { i7.indoorBorder3D.push(e.floors[iW].indoorBorder3D) } if (e.floors[iW].area3D) { i7.indoorArea3D.push(e.floors[iW].area3D) } if (e.floors[iW].pois) { iZ.label.indoorLabel = iZ.label.indoorLabel.concat(e.floors[iW].pois) } } } this.updateAllIconsTextureCoords(iZ); var i4 = this; this.labelProcessor.loadIconImages(iZ, function (i) { i4.updateAllIconsTextureCoords(i) }); var iV = iX.split("_"); var T = parseInt(iV[iV.length - 1], 10); if (T !== i6) { continue } i4.map._featureMgr.setData(iZ, this.drawIndex, 2) } this.dataBackCollideLabels(); this.map.dispatchEvent(new eX("onrefresh")) }, _removeIndoorData: function (i) { if (!i.indoorData) { return } for (var e in i.indoorData) { if (e === "tileInfo") { continue } this.map._indoorMgr.removeData(e, i.key) } }, getProcessedLabelZoom: function (iV) { var iW = iQ.baseZoomInfo[iV.zoom]; if (!iW) { return false } var T = []; for (var iX = 0; iX < iW.length; iX++) { var iY = this.getTileKey(iV, { useZoom: iW[iX] }); var e = this.tileCache.getData(iY); if (e && e.status === "ready" && e.label && e.label.status === "ready") { T.push(iW[iX]) } } if (T.length) { return T } else { return false } }, getSameZoomDataFromCache: function (T) { var iV = iQ.baseZoomInfo[T.zoom]; for (var iW = 0; iW < iV.length; iW++) { var iX = this.getTileKey(T, { useZoom: iV[iW] }); if (T.useZoom === iV[iW]) { continue } var e = this.tileCache.getData(iX); if (e && e.status === "ready" && e.label && e.label.status === "ready") { return e } } return false }, hasSameLabelData: function (iV, T) { for (var e = 0; e < T.length; e++) { if (T[e].key === iV) { return true } } return false }, getDataByFloorName: function (T, iV) { for (var e = 0; e < T.length; e++) { if (T[e].floorName === iV) { return T[e] } } return null }, mergeIndoorLabelData: function (i0, e) { for (var iY in i0) { if (iY === "tileInfo") { continue } if (e[iY]) { var T = i0[iY].floors; var i1 = e[iY].floors; for (var iW = 0; iW < T.length; iW++) { var iV = T[iW]; var iZ = iV.floorName; var iX = this.getDataByFloorName(i1, iZ); if (iX) { if (iX.pois) { iX.pois = iX.pois.concat(iV.pois); iV.pois = iX.pois } else { iX.pois = iV.pois } } } } } }, mergeSameZoomLabelData: function (iY) { var iW = iY.label; if (!iW) { return } var e = iY.tileInfo; var iX = this.getSameZoomDataFromCache(e); if (!iX) { return } var iV = iX.label; if (!iV) { return } for (var T = 0; T < iW.fixedLabel.length; T++) { if (!this.hasSameLabelData(iW.fixedLabel[T].key, iV.fixedLabel)) { iV.hasNewData = true; iV.fixedLabel.push(iW.fixedLabel[T]) } } for (var T = 0; T < iW.lineLabel.length; T++) { if (!this.hasSameLabelData(iW.lineLabel[T].key, iV.lineLabel)) { iV.hasNewData = true; iV.lineLabel.push(iW.lineLabel[T]) } } for (var T = 0; T < iW.indoorLabel.length; T++) { if (!this.hasSameLabelData(iW.indoorLabel[T].key, iV.indoorLabel)) { iV.hasNewData = true; iV.indoorLabel.push(iW.indoorLabel[T]) } } iY.label = iV; if (iX.renderData.indoorData && iY.renderData.indoorData) { this.mergeIndoorLabelData(iY.renderData.indoorData, iX.renderData.indoorData) } }, processLabelData: function (iX) { if (!iX.label) { return } if (iX.label.status === "processing") { return } iX.label.status = "processing"; var iV = this; iV.updateAllIconsTextureCoords(iX); this.labelProcessor.loadIconImages(iX, function (iY) { iV.updateAllIconsTextureCoords(iY) }); if (this.map.config.textRenderType === "canvas") { var e = this.labelProcessor.drawLabelsOnCanvas(iX, function (i0, i2) { var iZ = iX.tileInfo; var i1 = iV.map.config.mapStyleId; if (!bk["customStyleInfo_" + i1]) { iV.mergeSameZoomLabelData(iX) } if (i0) { if (!iX.label.textureHeights) { iX.label.textureHeights = [] } iX.label.textureHeights[iZ.useZoom] = i0.height } if (i2) { if (!iX.label.indoorTextureHeights) { iX.label.indoorTextureHeights = [] } iX.label.indoorTextureHeights[iZ.useZoom] = i2.height } var iY = iV._getTileTexImgKey(iZ); iV._doWorkAfterLabelImageLoad(iX, i0, i2, iY) }); return } var T = iX.label.textImageBitmap || iX.label.textImgStr; var iW = iX.label.indoorTextImageBitmap || iX.label.indoorTextImgStr; this.labelProcessor.loadImgByStr(T, iW, function i(i3, i1) { var i0 = iX.label.textureHeight; var i4 = iX.label.indoorTextureHeight; iX.label.textureHeight = undefined; iX.label.indoorTextureHeight = undefined; var iZ = iX.tileInfo; iV.mergeSameZoomLabelData(iX); var i2 = iX.label; i2.textImgStr = ""; i2.indoorTextImgStr && (i2.indoorTextImgStr = ""); if (!i2.textureHeights) { i2.textureHeights = [] } i2.textureHeights[iZ.useZoom] = i0; if (!i2.indoorTextureHeights) { i2.indoorTextureHeights = [] } i2.indoorTextureHeights[iZ.useZoom] = i4; var iY = iV._getTileTexImgKey(iZ); iV._doWorkAfterLabelImageLoad(iX, i3, i1, iY) }) }, _getTileTexImgKey: function (i) { var T = i.style || this.mapStyleId || "default"; var e = T + "_" + i.col + "_" + i.row + "_" + i.zoom; if (this.map.config.textRenderType === "canvas") { e += "_" + i.useZoom } return e }, _doWorkAfterLabelImageLoad: function (iZ, iX, iV, i) { var iY = this; var iW = iZ.label; iW.tileInfo = iZ.tileInfo; iW.status = "ready"; if (iX || iV) { var e = iW.tileInfo; if (iX) { iX.id = i; if (!iW.textureSources) { iW.textureSources = [] } iW.textureSources[e.useZoom] = iX } if (iV) { iV.id = i + "_indoor"; if (!iW.indoorTextureSources) { iW.indoorTextureSources = [] } iW.indoorTextureSources[e.useZoom] = iV } if (iY.map._webglMapScene) { var T = iY.map._webglMapScene._painter; if (iX) { T._addToAsyncJob(iW.textureSources[e.useZoom]) } } } if (iZ.custom !== true) { iY.tileLabels.push(iW) } if (iY.collisionTimer) { return } iY.collisionTimer = setTimeout(function () { iY.dataBackCollideLabels(); iY.collisionTimer = null }, 300) }, _updateIconTextureCoords: function (iZ, T) { if (!iZ) { return } var iY = this.map; for (var iV = 0; iV < iZ.length; iV++) { var iX = iZ[iV]; if (!iX.iconPos) { continue } if (iY._webglMapScene) { var e = iY._webglMapScene._painter; var iW = T + "_" + iX.iconPos.iconType; iX.iconPos.texcoord = e._iconTextureAtlasCoords[iW] || null } } }, updateAllIconsTextureCoords: function (iW) { if (this.map.viewAnimationTime) { return } if (iW) { if (iW.label) { var i = iW.tileInfo.style; this._updateIconTextureCoords(iW.label.fixedLabel, i); this._updateIconTextureCoords(iW.label.indoorLabel, i) } } else { var iV = this.tileCache.getAllData(); for (var T in iV) { var e = iV[T].data; if (e.status === "ready" && e.label) { var i = e.tileInfo.style; this._updateIconTextureCoords(e.label.fixedLabel, i); this._updateIconTextureCoords(e.label.indoorLabel, i) } } } this.updateLabels(); this.map.dispatchEvent(new eX("onrefresh")) }, cacheDataCollideLabels: function (T) { var iW = this; var i = this.map._featureMgr; function iV() { iW.cacheLabelTimer = null; var iX; var iY = iW.map.getTilt(); var iZ = iW.map.getHeading() % 360; if (iW.tileLabels.length === 0 || (iW.tileLabels.length === 1 && iW.tileLabels[0].tileInfo.zoom === 0)) { iX = i.getLabelData(); if (iX.length > 0) { iX = iW.labelProcessor.collisionTest(iX, -1) } } else { if (iY || iZ) { if (this._collisionTimer) { if (!iY) { clearTimeout(this._collisionTimer) } else { if (Date.now() - iW.lastCollisionTestTime > 500) { iW.lastCollisionTestTime = Date.now() } else { clearTimeout(this._collisionTimer) } } } this._collisionTimer = setTimeout(function () { iX = iW.labelProcessor.collisionTest(iW.tileLabels); if (iX) { i.setLabelData(iX) } iW.updateLabels(); iW.map.dispatchEvent(new eX("onrefresh")); iW._collisionTimer = null }, 60); return } else { iX = iW.labelProcessor.getCachedLabels(iW.tileLabels) } } if (iX) { i.setLabelData(iX) } iW.updateLabels(); iW.map.dispatchEvent(new eX("onrefresh")) } if (!T) { clearTimeout(iW.cacheLabelTimer); iV() } else { if (iW.cacheLabelTimer) { return } iW.cacheLabelTimer = setTimeout(function e() { iV() }, T) } }, dataBackCollideLabels: function () { var i = this; if ((i.tileLabels && i.tileLabels.length === 0)) { return } var e; i.labelProcessor.calcLabelsCollision(i.tileLabels); e = i.labelProcessor.getCachedLabels(i.tileLabels); if (e) { i.map._featureMgr.setLabelData(e) } i.updateLabels(); i.map.dispatchEvent(new eX("onrefresh")); if (bF()) { this.labelProcessor._refreshSpotData() } }, updateLabels: function (iW) { var iX = this.map; var i = iX._featureMgr; var T = i.getLabelData(); if (T.length > 0) { var iV = iX.getZoom(); if (T.labelZoom - iV < 3) { this.labelProcessor.updateLabels(T); var e = this.labelProcessor.fixDataFormat(T); i.setOverlayData(e[0], 2); i.setOverlayData(e[1], 3); i.setOverlayData(e[2], 4) } else { i.clearLabelOverlayData() } iX.temp.isPermitSpotOver = false; this.labelProcessor.curSpotAdded = false } }, loadRasterLayerData: function (i0, iV) { this.thumbCache = {}; var i1 = this.getZoomState(); if (iV) { for (var iY = 0, iW = i0.length; iY < iW; iY++) { var T = i0[iY]; var iX = this.getTileKey(T); var e = this.tileCache.getData(iX); if (e && e.status === "ready") { if (T.tileTypeName === "xyz") { e.tileInfo = T } this.map._featureMgr.setData(e, this.drawIndex, 2) } else { if (this.useThumbData) { this.setThumbData(T.col, T.row, T.zoom, T.useZoom, i1) } } } return } for (var iY = 0, iW = i0.length; iY < iW; iY++) { var T = i0[iY]; var iX = this.getTileKey(T); var e = this.tileCache.getData(iX); if (!e) { this.tileCache.setData(iX, {}); var iZ = this; this.loadRasterTileData(T, function (i, i2) { iZ.rasterTileDataCbk(i, i2) }) } } }, loadRasterTileData: function (i, e) { var T = new Image(); var iW = i.col; var iZ = i.row; var iX = i.zoom; var iV = this.getTilesUrl(new eB(iW, iZ), iX, i); if (!iV) { return } var iY = this.getTileKey(i); if (i.combine) { T = iV; T.tileInfo = i; if (T) { e && e(T, iY) } else { e && e(null, iY) } } else { T = this.loadTileImage(iV, iY, e) } T.tileInfo = i }, loadTileImage: function (iV, T, e) { var i = new Image(); i.crossOrigin = "anonymous"; i.onload = function () { e && e(this, T) }; i.onerror = function () { bk.fetchDebug && bk.fetchDebug.sendError({ title: iV, msg: iV, category: bk.fetchDebug.category.RESOURCE, level: bk.fetchDebug.levels.ERROR, url: iV }); e && e(null, T) }; i.src = iV; return i }, rasterTileDataCbk: function (iX, iV) { if (!iX || typeof iX === "string") { this.tileCache.removeData(iV); return } var i = iX.tileInfo; var T = i.col; var i3 = i.row; var i2 = i.zoom; var e = this.tileCache.getData(iV); if (!e) { return } var iY = "id_" + T + "_" + i3 + "_" + i2; var i1 = this; e.dataType = fO; e.tileInfo = i; if (i.tileTypeName === "xyz") { var i0 = i.tileSize; e.textureSource = iX; e.renderData = { vertexAll: [0, 0, 0, 0, 0, i0, 0, 0, 1, 0, i0, i0, 0, 1, 1, 0, 0, 0, 0, 0, i0, i0, 0, 1, 1, 0, i0, 0, 0, 1] }; i1.setRasterTileData(iV, e, iY) } else { e.textureSource = iX; var iW = em.calcLoopParam(T, i2); var iZ = iW.geoOffsetX; iX.tileInfo.loopOffsetX = iZ; e.renderData = { vertexAll: [0, 0, 0, 0, 0, 256, 0, 0, 1, 0, 256, 256, 0, 1, 1, 0, 0, 0, 0, 0, 256, 256, 0, 1, 1, 0, 256, 0, 0, 1] }; this.setRasterTileData(iV, e, iY) } }, setRasterTileData: function (iW, e, iV) { e.status = "ready"; this.tileCache.setData(iW, e); var T = false; if (this.curViewTilesInfo[iV]) { e.dataType = fO; e.png8 = this.png8 || false; this.map._featureMgr.setData(e, this.drawIndex, 2); T = true } if (T) { var i = new eX("onrefresh"); i.source = "webgllayer"; this.map.dispatchEvent(i) } }, _checkTilesLoaded: function () { this.numLoading--; if (this.map.firstTileLoad === false) { this.map.dispatchEvent(new eX("onfirsttilesloaded")); this.map.firstTileLoad = true } var e = this; if (this.numLoading === 0) { if (this._checkLoadedTimer) { clearTimeout(this._checkLoadedTimer); this._checkLoadedTimer = null } this._checkLoadedTimer = setTimeout(function () { if (e.numLoading === 0) { e.map.dispatchEvent(new eX("ontilesloaded")) } e._checkLoadedTimer = null }, 60) } }, isClickableLabel: function (e) { if (e.isDel) { return false } if (e.zoom > 9 && !e.guid) { return false } if (e.zoom <= 9 && !e.name && !e.guid) { return false } return true } }; var aF = 5; var hW = 4; var fH = 3; var F = 2; var dM = 1; var gx = 0; function al(e) { this._ratio = fp(); this._iconCache = {}; this._map = e; this._drawingCanvasPool = []; this._drawingCanvasHeight = 4096 } ej.extend(al.prototype, { _loadIcons: function (i, iZ) { var iX = 0; var iW = this; var T = this._map.config.style; for (var iY in i) { iX++; var e = new Image(); e.id = iY; e.crossOrigin = "anonymous"; e.onload = function () { iW._iconCache[this.id].loaded = true; iX--; if (iX === 0) { iZ() } this.onload = null }; e.onerror = function () { iW._iconCache[this.id] = null; iX--; if (iX === 0) { iZ() } this.onerror = null }; var iV = u.getIconSetPath(T) + iY + ".png"; e.src = iV; this._iconCache[iY] = { loaded: false, image: e } } }, _getEmptyDrawingCanvas: function () { for (var T = 0; T < this._drawingCanvasPool.length; T++) { if (this._drawingCanvasPool[T]._free === true) { this._drawingCanvasPool[T]._free = false; return this._drawingCanvasPool[T] } } var e = this._createNewDrawingCanvas(); this._drawingCanvasPool.push(e); e._free = false; return e }, _createNewDrawingCanvas: function () { var e = bG("canvas"); e.width = 512; e.height = this._drawingCanvasHeight; e._free = true; e._id = bk.getGUID(); var i = e.getContext("2d"); i.textBaseline = "bottom"; i.lineJoin = "round"; return e }, drawLabelsOnCanvas: function (jd, iV) { var i3 = jd.label.fixedLabel.slice(0); var i9 = jd.label.lineLabel.slice(0); var T = jd.label.indoorLabel.slice(0); if (i3.length === 0 && i9.length === 0 && T.length === 0) { iV(); return } var iY = function (ji, i) { return ji.styleId - i.styleId }; i3.sort(iY); i9.sort(iY); T.sort(iY); var jc = {}; var e = this._getEmptyDrawingCanvas(); var i8 = e.getContext("2d"); i8.clearRect(0, 0, e.width, e.height); var jg = 0; var i4 = null; var iX = 0; if (i3.length > 0) { while (iX < i3.length && !i3[iX].styleText[0]) { iX++ } if (i3[iX] && i3[iX].styleText[0]) { i4 = i3[iX].styleText[0].fontSize + i3[iX].styleText[0].haloSize * 2 } } if (i4 === null && T.length > 0) { iX = 0; while (iX < T.length && !T[iX].styleText[0]) { iX++ } if (T[iX] && T[iX].styleText[0]) { i4 = T[iX].styleText[0].fontSize + T[iX].styleText[0].haloSize * 2 } } if (i4 === null && i9.length > 0) { iX = 0; while (iX < i9.length && !i9[iX].styleText[0]) { iX++ } if (i9[iX] && i9[iX].styleText[0]) { i4 = i9[iX].styleText[0].fontSize + i9[iX].styleText[0].haloSize * 2 } } if (i4 === null || isNaN(i4)) { iV(); return } var i0 = 0; var iZ = i4; var i6 = {}; var jh = 0; var i7 = []; for (var jb = 0; jb < i3.length; jb++) { var i2 = i3[jb]; var i5 = i2.name; var ja = i2.styleText; if (!i5 || ja.length === 0) { continue } var iW = i2.icon; if (i2.textOnIcon && (!this._iconCache[iW] || this._iconCache[iW].loaded === false)) { i7.push(i2); jh++; if (!i6[iW]) { i6[iW] = true } continue } var je = this._drawEachText(i8, i2, jg, i0, iZ, i4, jc); if (!je) { continue } i0 = je.curX; iZ = je.curY; i4 = je.curLineHeight; jg = je.styleId } var je = this._drawEachTypeOfLabels(i8, T, jg, i0, iZ, i4, jc); jg = je.curStyleId; i0 = je.curX; iZ = je.curY; i4 = je.curLineHeight; var je = this._drawEachTypeOfLabels(i8, i9, jg, i0, iZ, i4, jc); jg = je.curStyleId; i0 = je.curX; iZ = je.curY; i4 = je.curLineHeight; if (jh > 0) { var jf = this; this._loadIcons(i6, function () { je = jf._drawEachTypeOfLabels(i8, i7, jg, i0, iZ, i4, jc); jg = je.curStyleId; i0 = je.curX; iZ = je.curY; i4 = je.curLineHeight; var i = jf._generateEachLabelCanvas(e, iZ, i3, i9, T, jd); iV(i[0], i[1]) }); return } var i1 = this._generateEachLabelCanvas(e, iZ, i3, i9, T, jd); iV(i1[0], i1[1]) }, drawCustomLabelsOnCanvas: function (iY, i4) { if (iY.length === 0) { i4(); return } var T = 0; var e = (iY[0].style.fontSize + (iY[0].style.haloSize || 0) * 2) || 0; var iV = e; var i0 = this._getEmptyDrawingCanvas(); var i5 = i0.getContext("2d"); i5.clearRect(0, 0, i0.width, i0.height); var i1 = {}; var i3 = -1; for (var iW = 0; iW < iY.length; iW++) { if (!iY[iW].name) { continue } var i2 = this._drawEachText(i5, iY[iW], i3, T, e, iV, i1); if (!i2) { continue } T = i2.curX; e = i2.curY; iV = i2.curLineHeight; i3 = i2.styleId } var iX = e; var iZ = this._copyToNewCanvas(i0, iX); for (var iW = 0; iW < iY.length; iW++) { if (!iY[iW].name && iY[iW].style.iconSize) { this._addFixedLabelBounds(iY[iW]); continue } if (!iY[iW].textSize) { continue } this._updateFixedLabelCoords(iY[iW], iX); this._addFixedLabelBounds(iY[iW]) } i4(iZ) }, _drawEachTypeOfLabels: function (i4, iY, i2, iV, T, iW, i0) { for (var iX = 0; iX < iY.length; iX++) { var iZ = iY[iX]; var i3 = iZ.name; var e = iZ.styleText; if (!i3 || e.length === 0) { continue } var i1 = this._drawEachText(i4, iZ, i2, iV, T, iW, i0); if (!i1) { continue } iV = i1.curX; T = i1.curY; iW = i1.curLineHeight; i2 = i1.styleId; if (i1.curY > this._drawingCanvasHeight) { return { curX: iV, curY: T, curLineHeight: iW, curStyleId: i2 } } } return { curX: iV, curY: T, curLineHeight: iW, curStyleId: i2 } }, _drawIndoorTextLabelOnCanvas: function (iW) { var e = this._getEmptyDrawingCanvas(); var i3 = e.getContext("2d"); i3.clearRect(0, 0, e.width, e.height); var jb = 0; var i2 = null; var i1 = 0; var iZ; var i8 = {}; var i7 = []; for (var iX in iW) { if (iX === "tileInfo") { continue } var iV = iW[iX]; var i6 = iV.defaultFloor; var i0 = iV.floors; for (var i5 = 0; i5 < i0.length; i5++) { if (i5 === i6) { continue } var i9 = i0[i5]; if (!i9.pois) { continue } var iY = i9.pois; for (var i4 = 0; i4 < iY.length; i4++) { if (i2 === null && iY[i4].styleText[0]) { i2 = iY[i4].styleText[0].fontSize + iY[i4].styleText[0].haloSize * 2; iZ = i2 } i7.push(iY[i4]) } } } if (i2 === null) { return null } i7.sort(function (jc, i) { return i.rank - jc.rank || jc.styleId - i.styleId }); var ja = this._drawEachTypeOfLabels(i3, i7, jb, i1, iZ, i2, i8); jb = ja.curStyleId; i1 = ja.curX; iZ = ja.curY; i2 = ja.curLineHeight; var T = this._copyToNewCanvas(e, iZ); return T }, _updateIndoorLabelsCoords: function (i2, i3) { for (var i1 in i2) { if (i1 === "tileInfo") { continue } var e = i2[i1]; var iX = e.defaultFloor; var iY = e.floors; for (var iZ = 0; iZ < iY.length; iZ++) { if (iZ === iX) { continue } var T = iY[iZ]; if (!T.pois) { continue } var iW = T.pois; for (var iV = 0; iV < iW.length; iV++) { var i0 = iW[iV]; if (i0.name && (!i0.textSize || i0.textSize.length === 0)) { iW.splice(iV, 1); iV--; continue } this._updateFixedLabelCoords(i0, i3); this._addFixedLabelBounds(i0) } } } }, _generateEachLabelCanvas: function (iY, iX, iZ, e, i1, T) { iX = Math.min(iX, this._drawingCanvasHeight); var i0 = this._copyToNewCanvas(iY, iX); var iV = null; if (T.renderData.indoorData) { iV = this._drawIndoorTextLabelOnCanvas(T.renderData.indoorData); if (iV) { this._updateIndoorLabelsCoords(T.renderData.indoorData, iV.height) } } for (var iW = 0; iW < iZ.length; iW++) { if (!iZ[iW].textSize) { continue } this._updateFixedLabelCoords(iZ[iW], iX); this._addFixedLabelBounds(iZ[iW]) } for (var iW = 0; iW < i1.length; iW++) { if (!i1[iW].textSize) { continue } this._updateFixedLabelCoords(i1[iW], iX); this._addFixedLabelBounds(i1[iW]) } for (var iW = 0; iW < e.length; iW++) { this._updateLineLabelCoords(e[iW], iX) } return [i0, iV] }, _copyToNewCanvas: function (T, i) { if (i === 0) { return null } var iV = bG("canvas"); iV.width = T.width; iV.height = i; var e = iV.getContext("2d"); e.drawImage(T, 0, 0, 512, i, 0, 0, 512, i); iV._id = T._id; T._free = true; return iV }, _drawEachText: function (jd, iZ, T, jf, je, jm, iW) { var jl = iZ.name; var i4 = iZ.styleText ? iZ.styleText[0] : iZ.style; if (!i4) { return null } var i7 = i4.fontSize; var jq = i4.fontWeight; var jD = i4.haloSize || 0; if (!i8) { } if (i4.fontRgba) { var jJ = i4.fontRgba[3] / 255; var i3 = []; i3[3] = jJ; for (var jI = 0; jI < 3; jI++) { i3[jI] = i4.fontRgba[jI] } } if (i4.haloRgba) { var jJ = i4.haloRgba[3] / 255; var ja = []; ja[3] = jJ; for (var jI = 0; jI < 3; jI++) { ja[jI] = i4.haloRgba[jI] } } var jx = i3 ? "rgba(" + i3.join(",") + ")" : i4.color; var iY = ja ? "rgba(" + ja.join(",") + ")" : i4.strokeColor; var jF = iZ.styleId || 0; if (jD > 4) { jD = 4 } var jn = []; var jc = []; var jj = 0; if (iW && !iW[jF]) { iW[jF] = {} } var i6 = i7 + jD * 2; var jo = i6; if (iZ.containDescendings) { jo += 4 } if (jD === 0) { jo += 2 } if (iZ.textOnIcon) { jo = Math.max(jo, iZ.iconSize[1]) } if (jF !== T || jo > jm) { T = jF; if (jq >= 10 && jq % 10 === 0) { jd.font = jq * 10 + " " + i7 + "px sans-serif" } else { jd.font = i7 + "px sans-serif" } if (jo > jm) { var jk = jo - jm; jm += jk; je += jk } if (jD > 0) { jd.lineWidth = jD * 2; jd.strokeStyle = iY } jd.fillStyle = jx } if (iZ.type === "line") { var i1 = jl.split(""); for (var jG = 0; jG < i1.length; jG++) { var jz = i1[jG]; var jg; var jr; if (iW[jF][jz]) { var i8 = iW[jF][jz]; jg = i8.displaySize; jr = i8.curWordPosition } else { var iV = Math.ceil(jd.measureText(jz).width); if (jf + iV > 512) { jf = 0; je += jo; jm = jo } if (je > this._drawingCanvasHeight) { return { curX: jf, curY: je, curLineHeight: jm, styleId: jF } } var jA = jf; if (jD > 0) { iV += jD; jA -= Math.round(jD / 2); jd.strokeText(jz, jf, je) } jd.fillText(jz, jf, je); var jw = [iV, jo]; jg = [Math.round(jw[0] / 2), Math.round(jw[1] / 2)]; jr = [jA, je - jo]; iW[jF][jz] = { displaySize: jg, curWordPosition: jr, totalHeight: jj }; jf += iV + 2 } jn.push(jg); jc.push(jr) } jj = Math.round(jn[0][1]) } else { if (iW[jF][jl]) { var i8 = iW[jF][jl]; jn = i8.textSize; jc = i8.labelImagePosition; jj = i8.totalHeight } else { var i9 = jl.split("\\"); if (i9.length > 1 && iZ.textOnIcon) { var jH = 0; var jE = 0; var jK = []; var jh = 8; for (var jG = 0; jG < i9.length; jG++) { var jl = i9[jG]; var i5 = Math.ceil(jd.measureText(jl).width); if (i5 > jH) { jH = i5 } jK.push(Math.round(i5 / 2)); jE += jo } var i2 = jH + 2 * jh; var jC = jE + 2 * jh; if (jf + i2 > 512) { jf = 0; je += jm } je += jE - jo + 2 * jh; var jv = jf; var ji = je - jC; var e = Math.round(i2 / 2); var jb = this._iconCache[iZ.icon].image; this.drawStretchedIcon(jd, jb, [jv, ji], jh, jH, jE); for (var jG = 0; jG < i9.length; jG++) { var jl = i9[jG]; var jB = jv + (e - jK[jG]); var jy = ji + 4 + (jG + 1) * jo; jd.fillText(jl, jB, jy) } jn.push([Math.round(i2 / 2), Math.round(jC / 2)]); jc.push([jv, ji]); jf += i2; jm = jC; jj = Math.round(jC / 2) } else { for (var jG = 0; jG < i9.length; jG++) { var jl = i9[jG]; var i5 = Math.ceil(jd.measureText(jl).width); var i2 = i5; var iX = 0; if (iZ.textOnIcon) { iX = 10; i2 += iX * 2; if (iZ.styleId === 519) { i2 = iZ.iconSize[0]; iX = Math.round((i2 - i5) / 2) } } if (jf + i2 > 512) { jf = 0; je += jo; jm = jo } if (je > this._drawingCanvasHeight) { return { curX: jf, curY: je, curLineHeight: jm, styleId: jF } } var jv = jf; var ji = je - jo; var ju = jf; var jt = je; if (iZ.containDescendings) { jt -= 4 } if (iZ.textOnIcon) { var jp = false; var jb = this._iconCache[iZ.icon].image; var js = iZ.iconSize.concat([]); if (i6 > js[1]) { js[1] = i6; jp = true } if (i5 > js[0]) { js[0] = i5; jp = true } if (iZ.styleId === 519) { jd.drawImage(jb, 0, 0, js[0], js[1], jv, ji, js[0], js[1]) } else { if (jp) { this.drawStretchedIcon(jd, jb, [jv, ji], iX, i5, js[1]) } else { this.draw3StretchedIcon(jd, jb, [jv, ji], iX, i5, js[1]) } } ju += iX; if (iZ.iconSize[1] > i6) { jt -= (iZ.iconSize[1] - i6) / 2 - 1 } i2 += 1 } if (jD > 0) { i2 += jD; jv -= Math.round(jD / 2); ji += Math.round(jD / 2); if (jF === 71028) { jo -= 2 } if (jF === 32) { jo -= 2 } jd.strokeText(jl, ju, jt) } jd.fillText(jl, ju, jt); var i0 = [i2, jo]; var jg = [Math.round(i0[0] / 2), Math.round(i0[1] / 2)]; jn.push(jg); jc.push([jv, ji]); jj += Math.round(jg[1]); jf += i2 } } iW[jF][jl] = { textSize: jn, labelImagePosition: jc, totalHeight: jj } } } iZ.textSize = jn; iZ.labelImagePosition = jc; iZ.totalHeight = jj; return { curX: jf, curY: je, curLineHeight: jm, styleId: jF } }, drawStretchedIcon: function (e, T, iV, iY, iZ, i) { var iX = iV[0]; var iW = iV[1]; e.drawImage(T, 0, 0, iY, iY, iX, iW, iY, iY); e.drawImage(T, iY, 0, 1, iY, iX + iY, iW, iZ, iY); e.drawImage(T, T.width - iY, 0, iY, iY, iX + iZ + iY, iW, iY, iY); e.drawImage(T, 0, iY, iY, 1, iX, iW + iY, iY, i); e.drawImage(T, iY, iY, 1, 1, iX + iY, iW + iY, iZ, i); e.drawImage(T, T.width - iY, iY, iY, 1, iX + iZ + iY, iW + iY, iY, i); e.drawImage(T, 0, T.height - iY, iY, iY, iX, iW + i + iY, iY, iY); e.drawImage(T, iY, T.height - iY, 1, iY, iX + iY, iW + i + iY, iZ, iY); e.drawImage(T, T.width - iY, T.height - iY, iY, iY, iX + iZ + iY, iW + i + iY, iY, iY) }, draw3StretchedIcon: function (e, i, T, iX, iZ, iY) { var iW = T[0]; var iV = T[1]; e.drawImage(i, 0, 0, iX, i.height, iW, iV, iX, i.height); e.drawImage(i, iX, 0, 1, i.height, iW + iX, iV, iZ, i.height); e.drawImage(i, i.width - iX, 0, iX, i.height, iW + iX + iZ, iV, iX, i.height) }, _updateFixedLabelCoords: function (iW, jb) { if (jb === 0) { return } var i6 = []; var ji = []; var jj = 0; var i9 = iW.totalHeight; var jr = iW.textSize.length; var iX = iW.direction; if (typeof iX !== "number") { iX = 0 } for (var jk = 0; jk < jr; jk++) { var jc = iW.labelImagePosition[jk]; var ja = iW.textSize[jk]; var i8 = jc[0]; var iV = jc[1]; var iY = ja[0]; var i3 = ja[1]; var i5 = 0; var jh = 0; if (typeof iW.textMargin === "number") { jh = iW.textMargin } var i4; var e; var i0 = 0; var i7 = 0; if (!iW.iconPos) { if (!iW.custom) { iX = hW } } else { i0 = iW.iconPos.width; i7 = iW.iconPos.height } switch (iX) { case fH: var T = i9 / 2 - i3 + i5 * (jr - 1) / 2; i4 = Math.round(-i0 / 2 - iY - jh); e = Math.round(T - jj - i5 * jk); break; case dM: var T = i9 / 2 - i3 + i5 * (jr - 1) / 2; i4 = Math.round(i0 / 2 + jh); e = Math.round(T - jj - i5 * jk); break; case F: var T = i7 / 2 + i9 - i3 + i5 * jr; i4 = Math.round(-iY / 2); e = Math.round(T - jj - i5 * jk); break; case gx: var T = -i7 / 2 - i5 - i3; i4 = Math.round(-iY / 2); e = Math.round(T - jj - i5 * jk); break; case hW: var T = -i9 / 2 - i5 * (jr - 1) / 2; i4 = Math.round(-iY / 2); e = Math.round(T - jj - i5 * jk); break }jj += i3; var i2 = i4 + iY; var js = e; var i1 = i2; var jq = js + i3; var iZ = i4; var jp = jq; i6.push(i4, e, i2, js, i1, jq, i4, e, i1, jq, iZ, jp); var jo = i8 / 512; var jg = (jb - iV - i3 * 2) / jb; var jn = (i8 + iY * 2) / 512; var jf = jg; var jm = jn; var je = (jb - iV) / jb; var jl = jo; var jd = je; ji.push(jo, jg, jn, jf, jm, je, jo, jg, jm, je, jl, jd) } if (!iW.textPos) { iW.textPos = {} } iW.textPos.vertex = i6; iW.textPos.texcoord = ji }, _addFixedLabelBounds: function (i1) { var iX = 1000; var iV = 1000; var T = -1000; var e = -1000; if (i1.iconPos) { var iZ = i1.iconPos["vertex"]; for (var i0 = 0, iW = iZ.length; i0 < iW; i0 += 2) { var i5 = iZ[i0]; var i3 = iZ[i0 + 1]; if (i5 < iX) { iX = i5 } if (i5 > T) { T = i5 } if (i3 < iV) { iV = i3 } if (i3 > e) { e = i3 } } } if (i1.custom && i1.style.iconSize && !i1.name) { var i2 = i1.style.iconSize; var i4 = i1.direction; switch (i4) { case hW: iX = -Math.round(i2[0] / 2); iV = -Math.round(i2[1] / 2); T = Math.round(i2[0] / 2); e = Math.round(i2[1] / 2); break; case F: iX = -Math.round(i2[0] / 2); iV = 0; T = Math.round(i2[0] / 2); e = i2[1]; break } } if (i1.textPos) { var iY = i1.textPos["vertex"]; for (var i0 = 0, iW = iY.length; i0 < iW; i0 += 2) { var i5 = iY[i0]; var i3 = iY[i0 + 1]; if (i5 < iX) { iX = i5 } if (i5 > T) { T = i5 } if (i3 < iV) { iV = i3 } if (i3 > e) { e = i3 } } } i1.bds = [iX, iV, T, e] }, _updateLineLabelCoords: function (jc, i2) { if (i2 === 0) { return } var iV = jc.wordsInfo; var i9 = jc.wordCount; if (!jc.labelImagePosition) { return } var i4 = jc.labelImagePosition.slice(0); if (jc.reverse) { i4.reverse() } var jl = 1000; var ji = 1000; var jj = -1000; var jh = -1000; for (var jd = 0; jd < i9; jd++) { var jm = i4[jd]; var jk = jm[0]; var ja = jm[1]; var i8 = jc.textSize[jd]; var i1 = i8[0]; var e = i8[1]; var i0 = jk / 512; var i7 = (i2 - ja - e * 2) / i2; var iY = (jk + i1 * 2) / 512; var i6 = i7; var iW = iY; var i5 = (i2 - ja) / i2; var T = i0; var i3 = i5; iV[jd].size = [i1, e]; iV[jd].texcoord = [i0, i7, iY, i6, iW, i5, i0, i7, iW, i5, T, i3]; var jg = iV[jd].offset[0]; var jf = iV[jd].offset[1]; var je = jg - i1 / 2; var iZ = jf + e / 2; var iX = jf - e / 2; var jb = jg + i1 / 2; if (je < jl) { jl = je } if (jb > jj) { jj = jb } if (iX < ji) { ji = iX } if (iZ > jh) { jh = iZ } } jc.bds = [jl, ji, jj, jh] } }); var ff = { 0: "00000000", 16: "00010000", 32: "00100000", 48: "00110000", 64: "01000000", 96: "01100000" }; function dE(T, iV, iW) { var e = T.bds; if (!e) { return false } var i = T.tracer; var iZ; if (i) { if (!ff[i]) { iZ = i.toString(2); if (iZ.length < 8) { iZ = new Array(8 - iZ.length + 1).join("0") + iZ } ff[i] = iZ } iZ = ff[i]; var iY = iQ.mapZoomStartZoomMapping[iV]; return iZ[iV - iY] === "1" } var iX = T.displayRange; if (iW >= iX[0] && iW <= iX[1]) { return true } return false } function h1(i, e) { this.map = i.map; this.layer = i; e = e || []; this.allLabels = []; this._spotData = []; this._strategyInfo = null; this.RANK1 = 1000000; this.RANK2 = 2000000; this.RANK3 = 3000000; this.RANK4 = 4000000; this.RANK5 = 5000000; this._ratio = fp(); this._useRound = true; this._sharpenRender = false; if (this._ratio > gL.HIGH_RES_MIN_RATIO) { this._useRound = false; this._sharpenRender = true } this._mapIsMoving = false; this._onMapIdleCallback = e.onMapIdleCallback; this.map.temp.isPermitSpotOver = true; this.currentSelectedLabel = null; this.map._labelProcessor = this; this.iconCache = {}; this.fixedLabelData = []; this.lineLabelData = []; this.highlightLabelData = []; this._iconLoadTimer = null; this._labelTextCanvas = null; if (this.map.config.textRenderType === "canvas") { this._labelTextCanvas = this.map.tileMgr.getLabelTextCanvas() } this.bind() } ej.extend(h1.prototype, { bind: function () { var T = this.map; var i = this; T.addEventListener("mapstatusbusy_inner", function (iV) { i._mapIsMoving = true; if (i._ratio > gL.HIGH_RES_MIN_RATIO) { i._sharpenRender = false } else { i._useRound = false } }); T.addEventListener("mapstatusidle_inner", function (iV) { if (i._ratio > gL.HIGH_RES_MIN_RATIO) { i._sharpenRender = true } else { i._useRound = true } i._mapIsMoving = false }); T.addEventListener("onspotmouseover", function (iX) { if (!this.temp.isPermitSpotOver) { return } if (iX.spots.length > 0) { var iW = iX.spots[0].userdata.uid; var iY = iX.spots[0].userdata.tilePosStr; var iV = i.getLabelByUid(iW, iY); iV && iV.formatedData && i._toHighlightColor(iV.formatedData) } }); T.addEventListener("onspotmouseout", function (iX) { if (!this.temp.isPermitSpotOver) { return } if (iX.spots.length > 0) { var iW = iX.spots[0].userdata.uid; var iY = iX.spots[0].userdata.tilePosStr; var iV = i.getLabelByUid(iW, iY); iV && iV.formatedData && i._toDefaultColor(iV.formatedData) } }); T.addEventListener("spotclick", function (iX) { if (iX.spots && iX.spots.length > 0) { if (iX.spots[0].userdata.zoom < 10) { return } var iW = iX.spots[0].userdata.uid; var iY = iX.spots[0].userdata.tilePosStr; if (i.currentSelectedLabel && (i.currentSelectedLabel.uid !== iW || i.currentSelectedLabel.tilePosStr !== iY)) { i._recoverNormalState() } var iV = i.getLabelByUid(iW, iY); iV && i._changeBaseMapState(iV) } else { i._recoverNormalState() } }); T.on("spot_status_reset", function () { i._recoverNormalState() }); T.on("spot_highlight", function (iW) { var iV = i.getLabelByUid(iW.uid, iW.tilePosStr); iV && iV.formatedData && i._toHighlightColor(iV.formatedData) }); T.addEventListener("mousemove", function (iV) { if (i.curSpotAdded) { return } if (this.currentOperation !== dA.idle || i._mapIsMoving === true) { return } i._refreshSpotData(); this.temp.isPermitSpotOver = true; i.curSpotAdded = true }); if (bF()) { function e() { i._refreshSpotData() } T.addEventListener("mapstatusidle_inner", e) } T.on("style_loaded", function () { if (i.map.config.textRenderType === "canvas" && !i._labelTextCanvas) { i._labelTextCanvas = i.map.tileMgr.getLabelTextCanvas() } }) }, getLabelByUid: function (iZ, i0) { var e = this.map._featureMgr.getResult().tileLabels; for (var iY = 0; iY < e.length; iY++) { var iV = e[iY].fixedLabel; for (var iX = 0; iX < iV.length; iX++) { if (e[iY].fixedLabel[iX].guid === iZ && e[iY].fixedLabel[iX].tilePosStr === i0) { return e[iY].fixedLabel[iX] } } var iW = e[iY].indoorLabel; for (var T = 0; T < iW.length; T++) { if (e[iY].indoorLabel[T].guid === iZ && e[iY].indoorLabel[T].tilePosStr === i0) { return e[iY].indoorLabel[T] } } } return null }, getTileByLabelUid: function (iZ) { var e = this.map._featureMgr.getResult().tileLabels; for (var iY = 0; iY < e.length; iY++) { var iV = e[iY].fixedLabel; for (var iX = 0; iX < iV.length; iX++) { if (e[iY].fixedLabel[iX].guid === iZ) { return e[iY] } } var iW = e[iY].indoorLabel; for (var T = 0; T < iW.length; T++) { if (e[iY].indoorLabel[T].guid === iZ) { return e[iY] } } } return null }, _toHighlightColor: function (T) { if (T.tempRank && T.tempRank === this.RANK5) { return } var e = this.map._featureMgr.getResult().eleData[4] || []; var iW = false; for (var iV = 0; iV < e.length; iV++) { if (e[iV] === T || (e[iV].guid === T.guid && e[iV].tilePosStr === T.tilePosStr && e[iV].zoom === T.zoom)) { iW = true; break } } if (iW) { return } e.push(T); this.map._featureMgr.setOverlayData(e, 4); this.map.dispatchEvent(new eX("onrefresh")) }, _toDefaultColor: function (T) { if (T.tempRank && T.tempRank === this.RANK5) { return } var e = this.map._featureMgr.getResult().eleData[4] || []; for (var iV = 0; iV < e.length; iV++) { if (T === e[iV] || (T.guid === e[iV].guid && T.tilePosStr === e[iV].tilePosStr && T.zoom === e[iV].zoom)) { e.splice(iV, 1); break } } this.map._featureMgr.setOverlayData(e, 4); this.map.dispatchEvent(new eX("onrefresh")) }, _changeBaseMapState: function (i) { var iW = i.guid; var i0 = i.formatedData.guidExt; var i1 = { guid: iW, tilePosStr: i.tilePosStr, guidExt: i0 }; this._strategyInfo = i1; this.currentSelectedLabel = i; var iV = this.map._featureMgr; var e = iV.getLabelData(); e = this.collisionTest(e); this.updateLabels(e); var i2 = this.fixDataFormat(e); iV.setOverlayData(i2[0], 2); iV.setOverlayData(i2[1], 3); iV.setOverlayData(i2[2], 4); var T = this.getTileByLabelUid(iW); this.currentSelectedLabel.tileInfo = T.tileInfo; var iZ = this.layer.tileCache.getAllData(); for (var iY in iZ) { var iX = iZ[iY].data; if (!iX.label) { continue } this.clearCollisionCache(iX.label) } this.map.dispatchEvent(new eX("onrefresh")) }, _recoverNormalState: function () { this._strategyInfo = null; var iZ = false; var iX = this.map._featureMgr.getLabelData(); if (this.currentSelectedLabel) { var T = this.currentSelectedLabel.guid; this.clearCollisionCache(this.getTileByLabelUid(T)); var iW = this.layer.tileCache.getAllData(); for (var iV in iW) { if (Object.prototype.hasOwnProperty.call(iW, iV)) { var iY = iW[iV].data; if (!iY.label) { continue } this.clearCollisionCache(iY.label) } } this.currentSelectedLabel.tempRank = null; this.currentSelectedLabel = null; iZ = true } iX = this.collisionTest(iX); this.updateLabels(iX); var e = this.fixDataFormat(iX); var i = this.map._featureMgr; i.setOverlayData(e[0], 2); i.setOverlayData(e[1], 3); i.setOverlayData([], 4); this.map.dispatchEvent(new eX("onrefresh")); if (iZ) { this.curSpotAdded = false; this._refreshSpotData() } }, loadIconImages: function (iW, i7) { var iZ = iW.label; var iX = iW.tileInfo.style; var T = iZ.fixedLabel; var i4 = iZ.indoorLabel; var i8 = T.length + i4.length; var i1 = this; var iV = 0; var i6 = 200; for (var iY = 0; iY < i8; iY++) { var i0; if (iY < T.length) { i0 = T[iY] } else { i0 = i4[iY - T.length] } if (!i0.iconPos) { continue } var i3 = i0.iconPos.iconType; var i5 = iX + "_" + i3; iV++; if (this.iconCache[i5]) { if (this.iconCache[i5].loaded) { i7(iW) } continue } var e = u.getIconSetPath(this.map.config.style) + i3 + ".png"; var i2 = new Image(); i2.id = i5; i2.iconUrl = e; i2.crossOrigin = "anonymous"; i2.onload = function () { i1.iconCache[this.id].loaded = true; i1._addToIconTexture(this); if (i1._iconLoadTimer === null) { i1._iconLoadTimer = setTimeout(function () { i7(); i1._iconLoadTimer = null }, i6) } this.onload = null }; i2.onerror = function () { if (!i1._iconLoadTimer) { i1._iconLoadTimer = setTimeout(function () { i7(); i1._iconLoadTimer = null }, i6) } i1.iconCache[this.id] = null; this.onerror = null; bk.fetchDebug && bk.fetchDebug.sendError({ title: this.iconUrl, msg: this.iconUrl, category: bk.fetchDebug.category.RESOURCE, level: bk.fetchDebug.levels.ERROR, url: this.iconUrl }) }; i2.src = e; this.iconCache[i5] = { loaded: false, image: i2 } } return iV }, _addToIconTexture: function (iX) { if (!this.map._webglMapScene) { return } var iZ = this.map._webglMapScene._painter; var e = iZ._iconTextureAtlas.addTexture(iX); iZ._iconTextureAtlasOffset[iX.id] = e; var i2 = 0 * iX.width / 1024 + e.width; var iW = 0 * iX.height / 1024 + e.height; var i1 = iX.width / 1024 + e.width; var iV = iW; var i0 = i1; var T = iX.height / 1024 + e.height; var iY = i2; var i = T; iZ._iconTextureAtlasCoords[iX.id] = [i2, iW, i1, iV, i0, T, i2, iW, i0, T, iY, i] }, loadImgByStr: function (iV, iW, iX) { if (!iV && !iW) { iX && iX(null, null); return } if (typeof iV === "object" && typeof iW === "object") { iX(iV, iW); return } var i = 0; var T = null; var e = null; if (iV) { i++; T = new Image(); T.onload = function () { i--; if (i === 0) { iX && iX(this, e) } this.onload = null }; T.src = iV } if (iW) { i++; e = new Image(); e.onload = function () { i--; if (i === 0) { iX && iX(T, this) } this.onload = null }; e.src = iW } }, collisionTest: function (jd, j3, jy) { if (this.map.viewAnimationTime) { return [] } if (!jd) { return [] } var jo = this.map; var jH = jo.getHeading(); jH = this.calcLoopHeading(jH); var jR = jo.height; var jN = this.allLabels; jN.length = 0; jd.sort(function (i4, i) { var j1 = i4.tileInfo; var i5 = i.tileInfo; if (j1.col * j1.row < i5.col * i5.row) { return -1 } else { return 1 } }); var jp = jo.getTilt(); var jf = jo.getZoom(); var jM; if (jy) { jM = jy } else { jM = this.getZoomStep() } for (var jX = 0, jS = jd.length; jX < jS; jX++) { var jt = jd[jX]; var jb = jt.tileInfo; var i3 = jb.zoom; var jL = jb.loopOffsetX / Math.pow(2, 18 - i3); if (!jH && !jp) { if (jt.unnecessaryCollisionTest && jt.unnecessaryCollisionTest[jy]) { continue } } var jD = jt.fixedLabel || []; for (var jV = 0, jv = jD.length; jV < jv; jV++) { var i8 = jD[jV]; i8.zoom = i3; if (j3 === -1 && i8.isDel) { continue } if (!dE(i8, jb.useZoom, jf)) { i8.isDel = true; continue } this.calcCollisionBounds(i8, jM, jL, jR); jN.push(i8) } var jB = jt.indoorLabel || []; for (var jT = 0, iY = jB.length; jT < iY; jT++) { var jq = jB[jT]; jq.zoom = i3; if (j3 === -1 && jq.isDel) { continue } if (!dE(jq, jb.useZoom)) { jq.isDel = true; continue } this.calcCollisionBounds(jq, jM, jL, jR); jN.push(jq) } var ja = jt.lineLabel || []; for (var jY = 0, jj = ja.length; jY < jj; jY++) { var iV = ja[jY]; if (j3 === -1 && iV.isDel) { continue } if (!dE(iV, jb.useZoom)) { iV.isDel = true; continue } var j5 = iV.pt; var jx = jo.pointToPixelIn(j5, { zoom: jM, useRound: this._useRound }); var ju = jx.x + jL; var js = jR - jx.y; var jA = iV.bds; var jQ = jA[0]; var jO = jA[1]; var jm = jA[2]; var jl = jA[3]; var jI = jQ; var jG = jO; var ji = jm; var jh = jl; if ((jH >= 0 && jH < 45) || (jH >= 315 && jH < 360)) { jI = jQ; jG = jO; ji = jm; jh = jl } else { if (jH >= 45 && jH < 135) { jI = jO; jG = -jm; ji = jl; jh = -jQ } else { if (jH >= 135 && jH < 225) { jI = -jm; jG = -jl; ji = -jQ; jh = -jO } else { if (jH >= 225 && jH < 315) { jI = -jl; jG = jQ; ji = -jO; jh = jm } } } } iV._tempBds = [ju + jI, js + jG, ju + ji, js + jh]; var jc = jo.pixelToPointIn(new eB(iV._tempBds[0], jx.y + jG), { zoom: jM }); var iX = jo.pixelToPointIn(new eB(iV._tempBds[2], jx.y + jh), { zoom: jM }); iV._mcBds = [jc, iX]; jN.push(iV) } } var jK = this._strategyInfo; if (jK) { var jg = jK.guid; var jr = jK.guidExt; var iW = false; for (var jw = 0, i9 = jN.length; jw < i9; jw++) { var jP = jN[jw]; delete jP.tempRank; if (!this.layer.isClickableLabel(jP) || (jr === 1 && !jP.guidExt)) { continue } if (jg === jP.guid && jK.tilePosStr === jP.tilePosStr) { jP.tempRank = this.RANK5; iW = true } } if (!iW && this.currentSelectedLabel) { this.currentSelectedLabel.tempRank = this.RANK5; var jz = this.currentSelectedLabel.tileInfo; var T = jz.zoom; var jJ = jz.loopOffsetX / Math.pow(2, 18 - T); this.calcCollisionBounds(this.currentSelectedLabel, jM, jJ, jR); jN.push(this.currentSelectedLabel) } } else { for (var jk = 0, i7 = jN.length; jk < i7; jk++) { var j4 = jN[jk]; if (j4.type === "line" || !j4.iconPos) { continue } delete j4.tempRank } } jN.sort(function (i5, i4) { var j1 = i5.tempRank ? i5.tempRank : i5.rank; var i = i4.tempRank ? i4.tempRank : i4.rank; return i - j1 || i5.startZoom - i4.startZoom || i4.pt.lng - i5.pt.lng || i4.pt.lat - i5.pt.lat }); var iZ = 0; if (jp > 0) { iZ = 6 } jf = jo.getZoom(); if (jf >= 8 && jf < 9) { jf < 8.5 ? (iZ = 6) : (iZ = 3) } if (jo._displayOptions.labelMargin > 0) { iZ = jo._displayOptions.labelMargin } var e = 2; if (jf < 6 && jf >= 5) { e = -1 } for (var i6 = 0, i2 = jN.length; i6 < i2; i6++) { var jF = jN[i6]; var je = jF._tempBds; jF.isDel = false; jF._intersectIdx = []; for (var jW = i6 + 1; jW < i2; jW++) { var jn = jN[jW]; var j0 = jn._tempBds; if (!(je[2] + iZ + e < j0[0] - iZ || je[0] - iZ > j0[2] + iZ + e || je[3] + iZ + e < j0[1] - iZ || je[1] - iZ > j0[3] + iZ + e)) { jF._intersectIdx.push(jW) } } } for (var i1 = 0, i0 = jN.length; i1 < i0; i1++) { var jZ = jN[i1]; if (jZ.isDel === false) { var jE = jZ._intersectIdx; for (var jU = 0, jC = jE.length; jU < jC; jU++) { jN[jE[jU]].isDel = true } } } return jd }, calcCollisionBounds: function (i1, iZ, i, i0) { var iX = i1.ptFix || i1.pt; var iV = this.map; var iW = iV.pointToPixelIn(iX, { zoom: iZ, useRound: this._useRound }); var T = iW.x + i; var i3 = i0 - iW.y; var e = i1.bds; i1._tempBds = [T + e[0], i3 + e[1], T + e[2], i3 + e[3]]; var iY = iV.pixelToPointIn(new eB(i1._tempBds[0], iW.y + e[1]), { zoom: iZ }); var i2 = iV.pixelToPointIn(new eB(i1._tempBds[2], iW.y + e[3]), { zoom: iZ }); i1._mcBds = [iY, i2] }, getZoomStep: function () { var T = this.map.getZoom(); var e = Math.floor(T); var i = T - e >= 0.5 ? e + 0.5 : e; return i }, clearCollisionCache: function (e) { if (!e) { return } e.cacheState = null; e.unnecessaryCollisionTest = null }, getCachedLabels: function (e) { e = e || []; var T = this.getZoomStep(); var iX = false; for (var iV = 0; iV < e.length; iV++) { var iW = e[iV]; if (!iW.cacheState || !iW.cacheState[T]) { iX = true; break } if (iW.hasNewData) { iX = true; break } } if (iX) { this.calcLabelsCollision(e) } return e }, calcLabelsCollision: function (T) { var iW = this.getZoomStep(); var iX = {}; var i6; var iV; var i8; var ja; var i9; var i7; T = this.collisionTest(T, undefined, iW); aJ.addLabelIntoAreaSpots(T); for (var i1 = 0; i1 < T.length; i1++) { i6 = T[i1]; iV = i6.tileInfo; ja = iV.col + "," + iV.row; iX[ja] = 1 } var e = {}; for (var iZ = 0; iZ < T.length; iZ++) { i6 = T[iZ]; if (!i6.cacheState) { i6.cacheState = {} } iV = i6.tileInfo; i9 = iV.col; i7 = iV.row; ja = i9 + "," + i7; if (i6.cacheState[iW] === "stable") { e[ja] = 1; if (!i6.hasNewData) { continue } } for (var i0 = 0; i0 < i6.fixedLabel.length; i0++) { i8 = i6.fixedLabel[i0]; if (!i8.cachedIsDel) { i8.cachedIsDel = {} } i8.cachedIsDel[iW] = i8.isDel } for (var i5 = 0; i5 < i6.indoorLabel.length; i5++) { i8 = i6.indoorLabel[i5]; if (!i8.cachedIsDel) { i8.cachedIsDel = {} } i8.cachedIsDel[iW] = i8.isDel } for (var i4 = 0; i4 < i6.lineLabel.length; i4++) { i8 = i6.lineLabel[i4]; if (!i8.cachedIsDel) { i8.cachedIsDel = {} } i8.cachedIsDel[iW] = i8.isDel } if (iX[(i9 - 1) + "," + (i7 - 1)] && iX[(i9 - 1) + "," + i7] && iX[(i9 - 1) + "," + (i7 + 1)] && iX[i9 + "," + (i7 - 1)] && iX[i9 + "," + (i7 + 1)] && iX[(i9 + 1) + "," + (i7 - 1)] && iX[(i9 + 1) + "," + i7] && iX[(i9 + 1) + "," + (i7 + 1)]) { i6.cacheState[iW] = "stable"; e[ja] = 1 } else { if (!i6.cacheState[iW]) { i6.cacheState[iW] = "unstable" } } } for (var iY = 0; iY < T.length; iY++) { i6 = T[iY]; iV = i6.tileInfo; ja = iV.col + "," + iV.row; i9 = +iV.col; i7 = +iV.row; if (e[(i9 - 1) + "," + (i7 - 1)] && e[(i9 - 1) + "," + i7] && e[(i9 - 1) + "," + (i7 + 1)] && e[i9 + "," + (i7 - 1)] && e[i9 + "," + (i7 + 1)] && e[(i9 + 1) + "," + (i7 - 1)] && e[(i9 + 1) + "," + i7] && e[(i9 + 1) + "," + (i7 + 1)]) { if (!i6.unnecessaryCollisionTest) { i6.unnecessaryCollisionTest = {} } i6.unnecessaryCollisionTest[iW] = 1 } } T.hasNewData = false }, updateLabels: function (iW) { var T = this.map; var i2 = T.getZoom(); var i4 = T.getHeading(); i4 = this.calcLoopHeading(i4); var i3 = T.getTilt(); var iX = this.getZoomStep(); for (var i1 = 0, iY = iW.length; i1 < iY; i1++) { var i0 = iW[i1]; var iV = i0.tileInfo; var iZ = iV.loopOffsetX || 0; var e = { zoom: i2, mcOffsetX: iZ }; this.updateFixedLabel(i0.fixedLabel, i3, i4, i0, iX, e); e = { zoom: i2, mcOffsetX: 0 }; this.updateFixedLabel(i0.indoorLabel, i3, i4, i0, iX, e); this.updateLineLabel(i0.lineLabel, i3, i4, i0, iX) } }, updateFixedLabel: function (i0, i3, i, i6, iW, i1) { if (i0.length === 1) { } var e = i1.zoom; var iV = i1.mcOffsetX; var jb; for (var i7 = 0, iY = i0.length; i7 < iY; i7++) { var i2 = i0[i7]; if (!i2.cachedIsDel) { continue } if (!i3 && !i && i6.cacheState && i6.cacheState[iW]) { i2.isDel = i2.cachedIsDel[iW]; if (typeof i2.isDel === "undefined") { i2.isDel = i2.cachedIsDel[iW] = true } } if (i2.startScale > e) { i2.isDel = true } if (i2.isDel) { continue } var i9 = i2.pt; var T = i2.iconPos; if (T && T.texcoord) { if (!T.rtVertex) { T.rtVertex = []; jb = T.vertex; var iZ = hD(i9.lng); var i8 = hD(i9.lat); T.rtVertex = [iZ[0], i8[0], iZ[1], i8[1], 0, jb[0], jb[1], 0, 0, T.texcoord[0], T.texcoord[1], iZ[0], i8[0], iZ[1], i8[1], 0, jb[2], jb[3], 0, 0, T.texcoord[2], T.texcoord[3], iZ[0], i8[0], iZ[1], i8[1], 0, jb[4], jb[5], 0, 0, T.texcoord[4], T.texcoord[5], iZ[0], i8[0], iZ[1], i8[1], 0, jb[6], jb[7], 0, 0, T.texcoord[6], T.texcoord[7], iZ[0], i8[0], iZ[1], i8[1], 0, jb[8], jb[9], 0, 0, T.texcoord[8], T.texcoord[9], iZ[0], i8[0], iZ[1], i8[1], 0, jb[10], jb[11], 0, 0, T.texcoord[10], T.texcoord[11]] } } var ja = i2.textPos; if (ja) { if (!ja.rtVertex) { ja.rtVertex = []; jb = ja.vertex; var iX = ja.rtVertex; var i5 = hD(i9.lng); var je = hD(i9.lat); var jd = hD(iV); for (var i4 = 0, jc = jb.length; i4 < jc; i4 += 12) { iX.push(i5[0], je[0], i5[1], je[1], 0, jb[i4], jb[i4 + 1], jd[0], jd[1], ja.texcoord[0], ja.texcoord[1]); iX.push(i5[0], je[0], i5[1], je[1], 0, jb[i4 + 2], jb[i4 + 3], jd[0], jd[1], ja.texcoord[2], ja.texcoord[3]); iX.push(i5[0], je[0], i5[1], je[1], 0, jb[i4 + 4], jb[i4 + 5], jd[0], jd[1], ja.texcoord[4], ja.texcoord[5]); iX.push(i5[0], je[0], i5[1], je[1], 0, jb[i4 + 6], jb[i4 + 7], jd[0], jd[1], ja.texcoord[6], ja.texcoord[7]); iX.push(i5[0], je[0], i5[1], je[1], 0, jb[i4 + 8], jb[i4 + 9], jd[0], jd[1], ja.texcoord[8], ja.texcoord[9]); iX.push(i5[0], je[0], i5[1], je[1], 0, jb[i4 + 10], jb[i4 + 11], jd[0], jd[1], ja.texcoord[10], ja.texcoord[11]) } } } } }, updateLineLabel: function (i0, jt, jj, je, jf) { i0 = i0 || []; var i9 = this.map; var i3 = i9.getZoomUnits(); for (var js = 0, jq = i0.length; js < jq; js++) { var iZ = i0[js]; if (!iZ.cachedIsDel) { continue } if (!jt && !jj && je.cacheState && je.cacheState[jf]) { iZ.isDel = iZ.cachedIsDel[jf]; if (typeof iZ.isDel === "undefined") { iZ.isDel = iZ.cachedIsDel[jf] = true } } if (iZ.isDel) { continue } if (!iZ.styleText || iZ.styleText.length === 0) { continue } var i1 = iZ.mcInTile; var jm = i1.x; var jk = i1.y; var jd = iZ.wordsInfo; var jb = iZ.labelAngle; var i7 = false; var jl = 0; if (jj !== 0) { var i8 = jd[0].angle; var jp = this.calcLoopHeading(i8 - jj); if (jp > 45 && jp < 315) { if (jp > 45 && jp <= 135) { jl = 270 } else { if (jp > 135 && jp <= 225) { jl = 180 } else { if (jp > 225 && jp < 315) { jl = 90 } } } if (jb > 225 && jb <= 315 && jl <= 180) { i7 = true } else { if ((jb >= 0 && jb <= 45 || jb >= 315 && jb < 360) && jl >= 180) { i7 = true } } } } for (var jr = 0, i4 = jd.length; jr < i4; jr++) { var jo = jd[jr]; var i6 = jo.calcInfo; var ji = jo.offset[0]; var jg = jo.offset[1]; if (!jo.size) { continue } var e = jo.size[0]; var T = jo.size[1]; var i5 = jo.angle; if (!i6) { i6 = {} } if (jj !== i6.mapHeading || i3 !== i6.zoomUnits) { i6.mapHeading = jj; i6.zoomUnits = i3; if (i7) { var ja = jd[i4 - 1 - jr]; ji = ja.offset[0]; jg = ja.offset[1]; i5 = ja.angle } var iW = jm + ji * i3; var iV = jk + jg * i3; i6.rotationCenter = { lng: iW, lat: iV }; i6.calcHeading = jl; i6.angle = i5; i6.offsetX = ji; i6.offsetY = jg; jo.calcInfo = i6 } if (!jo.rtVertex) { jo.rtVertex = [] } jo.rtVertex.length = 0; var jc = i6.calcHeading + i6.angle; var iX = i6.rotationCenter; ji = i6.offsetX; jg = i6.offsetY; var iY = Math.round(ji - e / 2); var jn = Math.round(ji + e / 2); var jh = Math.round(jg + T / 2); var i2 = Math.round(jg - T / 2); jo.rtVertex.push(jm, jk, jo.z, iY, i2, iX.lng, iX.lat, jc, jo.texcoord[0], jo.texcoord[1], jm, jk, jo.z, jn, i2, iX.lng, iX.lat, jc, jo.texcoord[2], jo.texcoord[3], jm, jk, jo.z, jn, jh, iX.lng, iX.lat, jc, jo.texcoord[4], jo.texcoord[5], jm, jk, jo.z, iY, i2, iX.lng, iX.lat, jc, jo.texcoord[6], jo.texcoord[7], jm, jk, jo.z, jn, jh, iX.lng, iX.lat, jc, jo.texcoord[8], jo.texcoord[9], jm, jk, jo.z, iY, jh, iX.lng, iX.lat, jc, jo.texcoord[10], jo.texcoord[11]) } } }, calcLoopHeading: function (e) { while (e >= 360) { e -= 360 } while (e < 0) { e += 360 } return e }, fixDataFormat: function (i3) { var iV = this.fixedLabelData; var e = this.lineLabelData; var T = this.highlightLabelData; var jb = 0; var iZ = 0; var i8 = 0; var i9; if (this.currentSelectedLabel) { var iY = this.getLabelByUid(this.currentSelectedLabel.guid, this.currentSelectedLabel.tilePosStr); if (!iY || iY.isDel) { iV[jb] = this.currentSelectedLabel.formatedData; jb++; T[i8] = this.currentSelectedLabel.formatedData; i8++ } } for (var i7 = 0; i7 < i3.length; i7++) { var i1 = i3[i7]; var i0 = i1.fixedLabel; var iW = i1.indoorLabel; var i6 = i1.lineLabel; var ja = { highlightLabelData: T, highlightLabelDataLen: i8 }; i9 = this.fixFixedLabelDataFormat(i0, i1, iV, jb, ja); jb = i9[0]; i8 = i9[1]; i9 = this.fixFixedLabelDataFormat(iW, i1, iV, jb, ja, true); jb = i9[0]; i8 = i9[1]; e[iZ] = { tileInfo: i1.tileInfo, lineLabels: [] }; for (var i5 = 0; i5 < i6.length; i5++) { if (i6[i5].isDel) { continue } var i2 = i6[i5].wordsInfo; if (i2) { for (var i4 = 0; i4 < i2.length; i4++) { if (!i2[i4].rtVertex) { continue } var iX = i2[i4].formatedData; if (!iX) { iX = { textureSource: i1.textureSources[i6[i5].processedInZoom], textureHeight: i1.textureHeights[i6[i5].processedInZoom], renderData: { vertex: i2[i4].rtVertex, textureCoord: i2[i4].texcoord } }; i2[i4].formatedData = iX } e[iZ].lineLabels.push(iX) } } } iZ++ } iV.length = jb; e.length = iZ; T.length = i8; return [e, iV, T] }, fixFixedLabelDataFormat: function (iZ, i2, i3, i0, T, i1) { var iX = T.highlightLabelData; var e = T.highlightLabelDataLen; for (var i = 0; i < iZ.length; i++) { if (iZ[i].isDel) { continue } var iY = iZ[i].textPos; var iW = iZ[i].iconPos; var iV = null; if (iY && iY.rtVertex) { if (!iZ[i].formatedData) { iV = { guid: iZ[i].guid, guidExt: iZ[i].guidExt, tilePosStr: iZ[i].tilePosStr, zoom: iZ[i].zoom, tempRank: iZ[i].tempRank, textureSource: i2.textureSources[iZ[i].processedInZoom], textureHeight: i2.textureHeights[iZ[i].processedInZoom], renderData: { vertex: iY.rtVertex, textureCoord: iY.texcoord } }; if (i1 && iZ[i].onDefaultFloor === false) { iV.textureSource = i2.indoorTextureSources[iZ[i].processedInZoom]; iV.textureHeight = i2.indoorTextureHeights[iZ[i].processedInZoom] } iZ[i].formatedData = iV } else { iV = iZ[i].formatedData; iV.tempRank = iZ[i].tempRank } if (this.currentSelectedLabel && iV.guid === this.currentSelectedLabel.guid && iV.tilePosStr === this.currentSelectedLabel.tilePosStr) { iX[e] = iV; e++ } } if (iW && iW.rtVertex) { if (iV) { if (!iV.iconRenderData) { iV.iconRenderData = { vertex: iW.rtVertex, textureCoord: iW.texcoord } } } else { iV = { guid: iZ[i].guid, guidExt: iZ[i].guidExt, zoom: iZ[i].zoom, tempRank: iZ[i].tempRank, iconRenderData: { vertex: iW.rtVertex, textureCoord: iW.texcoord } }; iZ[i].formatedData = iV } } i3[i0] = iV; i0++ } return [i0, e] }, _refreshSpotData: function () { this._spotData.length = 0; var i0 = this.map; var iY = Math.floor(i0.getZoom()); var T = this.map._featureMgr.getLabelData(); if (T) { for (var iW = 0, iV = T.length; iW < iV; iW++) { this._addFixedSpotData(T[iW].fixedLabel, iY); this._addFixedSpotData(T[iW].indoorLabel, iY) } } var i1 = this.currentSelectedLabel; if (i1 && !this.getTileByLabelUid(i1.guid, i1.tilePosStr)) { var iX = this._getSpotDataFromLabel(this.currentSelectedLabel); if (iX) { this._spotData.push(iX) } } var iZ = new eX("onspotsdataready"); iZ.spots = this._spotData; i0._spotDataOnCanvas = this._spotData; i0.dispatchEvent(iZ) }, _addFixedSpotData: function (iW, iV) { for (var e = 0; e < iW.length; e++) { var T = iW[e]; if (!this.layer.isClickableLabel(T) || (T.guidExt === 1 && T.startScale > iV)) { continue } var i = iW[e].spot || this._getSpotDataFromLabel(iW[e]); if (i) { this._spotData.push(i) } } }, _getSpotDataFromLabel: function (T) { var iX = this.map; if (!T.bds) { return null } var e = T.bds.slice(0); var iV = null; if (T.iconPos) { iV = new b8(T.pt.lng, T.pt.lat) } var i = T.name ? T.name.replace("\\\\", "<br>") : ""; if (T.iconPos && T.iconPos.iconType.indexOf("ditie") > -1 && iX.getZoom() > 14) { i = "" } var iW = { n: i, pt: new b8(T.pt.lng, T.pt.lat), userdata: { iconPoint: iV, uid: T.guid, name: i, mapPoi: true, type: T.iconPos ? T.iconPos.iconType : "", rank: T.rank, zoom: T.zoom, tilePosStr: T.tilePosStr }, bd: e, tag: "MAP_SPOT_INFO" }; T.spot = iW; return iW }, drawLabelsOnCanvas: function (i, e) { if (this._labelTextCanvas) { this._labelTextCanvas.drawLabelsOnCanvas(i, e) } } }); function hV(e) { this._map = e; this.virtualTile = { custom: true, label: { fixedLabel: [], indoorLabel: [], lineLabel: [], textureHeights: [], status: "ready" }, tileInfo: { col: 0, row: 0, zoom: 0, useZoom: 0, loopOffsetX: 0 }, status: "ready" }; this.virtualTile.label.tileInfo = this.virtualTile.tileInfo; this.init() } hV.prototype.init = function () { var T = this._map; var i = this; function e() { i.updateLabels() } T.addEventListener("add_tile_labels", e); T.addEventListener("onremove_tile_labels", e); T.addEventListener("onclear_labels", e) }; hV.prototype.updateLabels = function () { var i = this._map.tileMgr.getLabelTextCanvas(); var T = this._map; var e = this; i.drawCustomLabelsOnCanvas(T._customTileLabels, function (iW) { var iV = e.virtualTile; if (iW) { iV.label.textureHeights[0] = [iW.height] } iV.label.fixedLabel = T._customTileLabels; var iX = new eX("oncustom_labels_ready"); iX.virtualTile = iV; iX.labelCanvas = iW; iX.imgKey = bk.getGUID("custom_labels_"); T.dispatchEvent(iX) }) }; bk.register(function (e) { e._customLabelMgr = new hV(e) }); var fg = function (i8, i7) { var i6 = { "\x63\x65\x68\x61\x68": function (je, T) { return je < T }, "\x68\x6c\x6d\x78\x63": function (je, T) { return je(T) }, "\x63\x63\x63\x63\x78": function (je, T) { return je + T }, "\x61\x65\x68\x63\x64": function (T, je) { return T(je) }, "\x64\x65\x61\x78\x6d": "\x31\x2e\x31\x2e\x32", "\x64\x61\x78\x65\x78": "\x43\x68\x61\x72", "\x65\x68\x64\x69\x61": function (je, T, jf) { return je(T, jf) }, "\x63\x63\x78\x64\x65": function (jf, je, T) { return jf(je, T) } }; var i5 = i6["\x64\x65\x61\x78\x6d"]; function i4(jg, jf) { var je = jg["\x6c\x65\x6e\x67\x74\x68"]; var T = []; for (var ji = 0; i6["\x63\x65\x68\x61\x68"](ji, je); ji++) { var jh = i6["\x68\x6c\x6d\x78\x63"](jf, jg[ji]); T["\x70\x75\x73\x68"](jh) } return T } var i3, i2, i1, i0, iZ, iY = decodeURIComponent, iX = i6["\x64\x61\x78\x65\x78"], iW = ""; var iV = [fg]; i3 = "\x64\x65"; i2 = "\x66\x72"; i1 = "\x6f"; iZ = i6["\x63\x63\x63\x63\x78"](i6["\x63\x63\x63\x63\x78"](i2, i1), "\x6d"); i0 = i6["\x63\x63\x63\x63\x78"]("\x43\x6f", i3); var i = function (T) { return (T + iW)["\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72"][i6["\x63\x63\x63\x63\x78"](iZ + iX, i0)](T) }; var e = function (je) { var T = { "\x78\x61\x68\x61\x69": function (jf, jg) { return i6["\x61\x65\x68\x63\x64"](jf, jg) } }; return i4(je, function (jf) { return T["\x78\x61\x68\x61\x69"](i, jf) }) }; var jc = e["\x63\x61\x6c\x6c"](i, [39, 34, 37, 96, 60, 120, 97, 65, 98, 66, 99, 67, 100, 68, 101, 69, 102, 70, 103, 110, 109, 111, 112, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57]); var jb = i6["\x65\x68\x64\x69\x61"](i4, [28782, 27702, 26416, 25167, 24183], function (T) { return iY(T) }); var ja = e["\x63\x61\x6c\x6c"](jb, [22354, 22749, 24415, 23346, 22257, 22688, 24306, 25174, 23595, 25547, 22984, 25690, 22212, 27547, 21594, 27210, 23090, 29193, 22394, 29368, 29532, 29459, 29530, 24146, 24500, 26352, 27441, 28788, 29370, 27673, 26925, 25249, 24430]), i9 = {}; jb = e(jb); var jd = new RegExp(jb["\x6a\x6f\x69\x6e"]("\x7c")); for (var i3 = 0; i3 < jc["\x6c\x65\x6e\x67\x74\x68"]; i3++) { i9[ja[i3]] = jc[i3] } i7 = i4(i7["\x73\x70\x6c\x69\x74"](iW), function (T) { return i9[T] || T })["\x6a\x6f\x69\x6e"](iW); return i6["\x63\x63\x78\x64\x65"](i4, i7["\x73\x70\x6c\x69\x74"](jd), function (T) { return i6["\x61\x65\x68\x63\x64"](iY, T) }) }(this, "\x69\u72b8\u56c4\u7313\u7313\x72\x53\x74\x79\x6c\u545a\u706e\x68\u735c\u58a0\u5e77\u59c8\u5ef2\u545a\u59c8\u56c4\u6c36\u58a0\x6c\u545a\u58a0\u735c\u624f\u735c\x6c\x6c\x68\u59c8\u706e\u56c4\u5ef2\u545a\u735c\u59c8\u6730\u545a\u5ef2\u545a\u5ef2\u735c\u624f\u5ef2\u58a0\u59c8\u706e\u56c4\u5ef2\x68\u5ef2\u5ef2\u6c36\x69\u72b8\u56c4\u545a\u58a0\x4f\u5a32\u624f\x68\x69\u735c\u5ef2\u545a\u706e\u735c\u5ef2\u56c4\u6730\u5ef2\u5ef2\u735c\u5ef2\x68\u6c36\u735a\u7313\x73\x74\x4d\u545a\x73\x73\u5ef2\u577a\u545a\u6c36\u5ef2\u735c\x69\u6c36\u5ef2\u545a\x68\u735c\x68\u6730\u577a\u545a\x74\x4d\u5ef2\u735a\x53\x74\x79\x6c\u545a\x49\u56c4\u624f\x73\x74\x72\x69\u72b8\u577a\x69\u5a32\x79\u5e77\x68\u5ef2\x69\u735c\u56c4\u5e77\u545a\u58a0\x74\u545a\u72b8\u56c4\u6730\u56c4\x68\x68\u6c36\u545a\x69\x68\u545a\u6730\u59c8\x6c\u545a\u5e77\u735c\u545a\u735c\u5e77\u58a0\u5ef2\u545a\u6c36\u58a0\u58a0\u5ef2\u56c4\u735c\u6c36\u58a0\u5ef2\x68\x68\u624f\u5ef2\u59c8\x69\u5e77\x68\u5ef2\x6c\u56c4\x68\u5e77\u735c\u58a0\x68\x68\u735c\u6730\u545a\x6c\u58a0\u5ef2\x68\u6c36\u735c\u545a\u545a\u545a\x68\u5e77\u545a\u545a\u59c8\u58a0\u58a0\u6c36\x6c\x68\x6c\u735c\x6c\u5e77\u59c8\u5ef2\u59c8\u6730\u735a\x72\u545a\x76\u545a\u72b8\x74\u6b9b\u545a\u5a32\u5ef2\x75\x6c\x74\u6730\u5ef2\u58a0\u5ef2\u5ef2\u5ef2\u6c36\u735c\u545a\u5ef2\u624f\u545a\u56c4\u59c8\u545a\u624f\u59c8\u5ef2\x6c\u6730\x69\u735c\u735a\u7313\x72\x74\x53\u59c8\x72\x69\u735a\x74\x73\x28\u5f5f\u66f0\u66f0\u706e\u5ef2\u5ef2\x6c\u59c8\u6730\u5ef2\x68\u56c4\u6c36\u545a\u545a\u545a\u624f\u545a\u5ef2\x6c\u545a\x69\u5e77\x69\x68\x6c\u5e77\x55\x52\x4c\u6730\x77\u545a\u5c2b\x6b\x69\x74\x55\x52\x4c\u5e77\u56c4\u5ef2\u5ef2\u624f\u5ef2\u735c\u59c8\x68\u545a\u6c36\u58a0\u5ef2\u58a0\u58a0\u735c\u6c36\u5ef2\u735a\u735a\x6c\x69\u59c8\u5ef2\x74\x69\u7313\u72b8\u5f5f\u66f0\u7209\x6a\u5ef2\x76\u5ef2\x73\u59c8\x72\x69\u735a\x74\u5e77\u735c\x69\x6c\u6730\u63cb\x6c\u7313\u5c2b\u63cb\x75\x69\x6c\u56c4\u545a\x72\u706e\x57\u545a\u5c2b\x4b\x69\x74\u63cb\x6c\u7313\u5c2b\u63cb\x75\x69\x6c\u56c4\u545a\x72\u6730\x4d\u7313\x7a\u63cb\x6c\u7313\u5c2b\u63cb\x75\x69\x6c\u56c4\u545a\x72\u6730\x68\u545a\u56c4\u58a0\u735c\u624f\u5ef2\x69\u58a0\u545a\u545a\u6c36\u577a\u545a\x74\u63cb\x6c\u7313\u5c2b\u624f\x6c\u545a\x69\u735c\u545a\u6c36\x68\x6c\u545a\u706e\u5ef2\u735a\u735a\u545a\u72b8\u56c4\u6730\u58a0\x69\u5ef2\x68\x68\u6730\u5f5f\u66f0\u66f0\x29\u5f5f\u6b31\u63cb\u6c36\x69\u72b8\x69\x74\u6c36\u58a0\x68\x68\u6730\x6c\u5ef2\u545a\u6730\u5ef2\x6c\x6c\u6c36\u735c\u58a0\u545a\u6c36\x68\x6c\u59c8\u6730\u545a\u735c\u58a0\u6730\u5ef2\u5ef2\x68\u6730\u5ef2\x6c\u58a0\u735c\u6c36\u545a\x69\u5ef2\u6c36\x6c\x6c\u545a\u706e\u5ef2\u5ef2\u56c4\u706e\u5ef2\u56c4\u59c8\u706e\u59c8\x69\u58a0\u6c36\u5ef2\u56c4\u5ef2\u6c36\u735c\u5ef2\u545a\x6c\u706e\u59c8\u545a\x69\u6730\u735c\u58a0\x69\u6730\u56c4\u59c8\u735c\u6730\x73\x74\x72\x69\u72b8\u577a\u5e77\x68\u5ef2\u5ef2\u5e77\u5ef2\u58a0\x6c\u6c36\x68\x68\u58a0\u706e\u545a\u56c4\x69\u5e77\u7313\u72b8\x73\x74\x79\x6c\u545a\x7a\u7313\u7313\u735c\x75\u735a\u56c4\u5ef2\x74\u545a\u6c36\x6c\u735c\u735c\u6730\x6c\u58a0\u5ef2\u624f\u735c\u56c4\u59c8\u5e77\u545a\u5ef2\u5ef2\u6730\u545a\u58a0\u5ef2\u5e77\x68\x69\u58a0\u5ef2\u545a\u5e77\u5ef2\x72\x72\x57\u7313\x72\x6b\u545a\x72\u6c36\u5ef2\x6c\u59c8\u6730\u545a\x69\u545a\u545a\u5ef2\u706e\u58a0\u545a\u59c8\u56c4\u545a\u6c36\x73\x74\x72\x69\u72b8\u577a\x69\u5a32\x69\u545a\u56c4\u645a\x75\x73\x74\u7313\u735c\x53\x74\x79\x6c\u545a\x49\u72b8\u5a32\u7313\u6c36\x72\u5ef2\x74\x69\u7313\u706e\u735c\u56c4\u5ef2\u5ef2\x6c\u5e77\u59c8\u7313\u72b8\u5a32\x69\u577a\u706e\x73\x74\x79\x6c\u545a\u6c36\u5ef2\u545a\u545a\u735c\u5ef2\u6c36\u58a0\u56c4\x68\u735c\u545a\u5e77\x73\x74\x72\x69\u72b8\u577a\x69\u5a32\x69\u545a\u56c4\u645a\x75\x73\x74\u7313\u735c\x53\x74\x79\x6c\u545a\x49\u72b8\u5a32\u7313\x5a\u7313\u7313\u735c\u706e\u5ef2\x72\x72\x50\u545a\u72b8\u56c4\x69\u72b8\u577a\u6b9b\u5ef2\x74\u5ef2\u6c36\u545a\u59c8\u56c4\u545a\u5ef2\u624f\u545a\x68\u5ef2\u56c4\u58a0\u5e77\u545a\u56c4\u545a\u624f\u735c\u5ef2\u5ef2\u58a0\u5ef2\u6c36\u545a\u59c8\u5ef2\u6730\u56c4\u545a\x73\x74\x72\u7313\x79\u6c36\x6c\u545a\u72b8\u577a\x74\x68\u624f\x74\u545a\x72\u735c\x69\u72b8\u5ef2\x74\u545a\u6730\u7313\u72b8\x73\x74\x79\x6c\u545a\x5f\x6c\u7313\u5ef2\u56c4\u545a\u56c4\u624f\x6c\u56c4\u545a\u58a0\x6c\u706e\u545a\u735c\x69\u545a\x69\u6730\u545a\u5ef2\u545a\u59c8\u706e\x69\u58a0\u59c8\x6c\x68\u6730\x69\x73\x53\u545a\u72b8\u56c4\u7209\x53\u6730\u545a\u5ef2\u56c4\u545a\u56c4\u706e\x69\u56c4\u59c8\u5ef2\u545a\u5e77\u5ef2\u59c8\u5ef2\u56c4\u545a\u6c36\u735c\u5ef2\u59c8\u56c4\u5ef2\u6c36\u5ef2\u5ef2\u735c\x68\x68\u5e77\x68\u545a\u5ef2\u56c4\u735c\u706e\u59c8\u545a\u59c8\u59c8\u58a0\u706e\u545a\u545a\x69\u59c8\u735c\u6c36\u59c8\u58a0\u5ef2\u706e\u59c8\u735c\u59c8\u5ef2\u706e\u545a\x68\x6c\u56c4\u5ef2\u6c36\u59c8\u545a\u545a\u735c\u545a\u6c36\u5ef2\x68\u59c8\x68\u545a\u624f\u63cb\x72\u7313\x77\x73\u545a\x72\u6c36\u5ef2\u735c\u5ef2\u5ef2\u735c\u706e\u545a\x69\u545a\x69\u58a0\u6c36\u5ef2\x6c\u735c\u5e77\x68\u5ef2\u5ef2\x69\u6c36\u5ef2\u5ef2\x6c\x69\u58a0\u6c36\u58a0\u5ef2\u56c4\u56c4\x68\u6730\u545a\u59c8\u56c4\u58a0\x69\u706e\x69\u735c\u735c\u624f\x68\u735c\x6c\u56c4\u5ef2\u706e\u735c\x69\u72b8\u624f\x6c\u7313\u5ef2\u56c4\x54\x69\x6c\u545a\u6b9b\u5ef2\x74\u5ef2\u6730\x75\x72\x6c\u5e77\x74\x69\x6c\u545a\x49\u72b8\u5a32\u7313\u6730\u59c8\u59c8\u545a\u5ef2\u545a\u5e77\u56c4\u58a0\u59c8\u735c\u59c8\u6c36\u5ef2\u59c8\u545a\u706e\u59c8\u58a0\u58a0\u545a\u545a\u6c36\x68\u59c8\u5ef2\u5ef2\u5ef2\u706e\u7313\u72b8\u735c\u545a\x73\x73\u5ef2\u577a\u545a\u6c36\u56c4\u5ef2\x74\u5ef2\u706e\x5f\u59c8\u5c2b\x6b\u5e77\x5f\u735a\u5ef2\x72\x73\x69\u72b8\u577a\x54\x69\x6c\u545a\x4b\u545a\x79\u6c36\x5f\x69\x73\u63cb\x75\x73\x79\u706e\x5f\u735a\u5ef2\x72\x73\x69\u72b8\u577a\x54\x69\x6c\u545a\x49\u72b8\u5a32\u7313\u6730\x69\u735c\u735c\u545a\u545a\u624f\u56c4\u5ef2\u58a0\u59c8\u545a\u706e\x74\x69\x6c\u545a\x4b\u545a\x79\u5e77\x68\u56c4\x68\u545a\u56c4\u706e\u59c8\u5c2b\x6b\u706e\u5ef2\u545a\x68\u545a\x6c\u6730\x73\x68\x69\u5a32\x74\u5e77\u7313\u72b8\x72\u545a\u5a32\x72\u545a\x73\x68\u5e77\u58a0\x68\u545a\u59c8\u5ef2\u6c36\u5a32\x69\x72\u545a\u624f\u735a\x75\x73\x68\u6c36\u735c\u5ef2\u735a\u6c36\u735c\u5ef2\u56c4\u545a\x6c\u6730\u59c8\x68\u735c\u624f\x69\u56c4\x5f\u706e\u5ef2\u545a\x69\u545a\u59c8\u6c36\u735c\u735c\x6c\x68\x68\u5e77\x74\x69\x6c\u545a\x54\x79\u735a\u545a\x4e\u5ef2\u735c\u545a\u6c36\u545a\u5ef2\u59c8\u59c8\u56c4\u706e\x69\x6c\u545a\u735c\u545a\u5e77\x68\u58a0\u545a\u735c\u56c4\u624f\u59c8\u7313\x6c\u624f\x7a\u7313\u7313\u735c\u5e77\x73\u735a\x6c\x69\u59c8\u545a\u5e77\x68\x68\u545a\u59c8\u6730\u735c\x69\u5ef2\u5e77\x73\x74\x72\x69\u72b8\u577a\x69\u5a32\x69\u545a\u56c4\u7209\u545a\u5ef2\x74\x75\x72\u545a\x53\x74\x79\x6c\u545a\u624f\u735c\x69\u545a\u5e77\u59c8\x69\x6c\u706e\u545a\x68\x68\u5e77\x68\x69\x6c\u706e\u545a\u58a0\u545a\u706e\u5ef2\x6c\u56c4\u706e\x68\u59c8\u735c\u5e77\x69\x69\u56c4\u5e77\x69\u545a\x68\u706e\u59c8\x75\x73\x74\u7313\u735c\x53\x74\x79\x6c\u545a\x49\u72b8\u5a32\u7313\x5f\u5e77\x69\u545a\u735c\u624f\u58a0\u545a\x69\u6c36\u7209\u545a\u5ef2\x74\x75\x72\u545a\x53\x74\x79\x6c\u545a\u624f\u56c4\x69\u545a\u6730\u545a\u545a\u5ef2\u6730\u59c8\x75\x73\x74\u7313\u735c\u5e77\u56c4\u735c\u545a\u5e77\u58a0\u545a\u5ef2\u5e77\u59c8\u56c4\u5ef2\u706e\u577a\u545a\x74\x49\u56c4\x6c\u545a\x57\u7313\x72\x6b\u545a\x72\u624f\u735a\u7313\x69\x54\u545a\u58a0\x74\u706e\u545a\u59c8\x68\u59c8\x69\u6730\x6c\u56c4\u58a0\u545a\u545a\u624f\u645a\x75\x73\x74\u7313\u735c\u6c36\x68\u545a\u56c4\u545a\u56c4\u5e77\u5a32\u545a\u5ef2\x74\x75\x72\u545a\x53\x74\x79\x6c\u545a\u706e\u58a0\u735c\u545a\u5ef2\u545a\u624f\u735c\u5ef2\u56c4\x6c\u59c8\u6730\x73\x74\x72\x69\u72b8\u577a\x69\u5a32\x69\u545a\u56c4\x49\u72b8\u56c4\u7313\u7313\x72\x53\x74\x79\x6c\u545a\u5e77\u5ef2\u735c\x68\u5e77\x69\u59c8\u7313\u72b8\x53\u545a\x74\x49\u72b8\u5a32\u7313\u6c36\x73\x74\x72\x69\u72b8\u577a\x69\u5a32\x69\u545a\u56c4\x49\u59c8\u7313\u72b8\x53\u545a\x74\x49\u72b8\u5a32\u7313\u6730\u5ef2\u5ef2\u58a0\u59c8\u56c4\u5e77\u545a\u545a\x68\u624f\u5ef2\x68\x68\u6730\u5ef2\u59c8\u5ef2\u6c36\u59c8\x75\x73\x74\u7313\u735c\x4d\u5ef2\u735a\x53\x74\x79\x6c\u545a\u706e\u735c\u5ef2\u735a\x53\x74\x79\x6c\u545a\x49\u56c4\u6730\u5ef2\u735c\u545a\x69\u58a0\u6c36\u735c\u545a\x69\u735c\u56c4\u5e77\u56c4\u545a\u545a\u56c4\x6c\u624f\u5ef2\u545a\u56c4\x69\u545a\u6730\u545a\u545a\u5ef2\u58a0\u56c4\u706e\x69\u56c4\u5ef2\x6c\u5ef2\u6c36\u56c4\u59c8\u5ef2\u545a\x69\u6730\x69\u59c8\u7313\u72b8\x49\u72b8\u5a32\u7313\u706e\x74\u545a\u58a0\x74\x53\x69\x7a\u545a\x52\u5ef2\x74\x69\u7313\u5e77\x69\u59c8\u56c4\u6730\u59c8\u58a0\x69\u59c8\u735c\u5e77\x68\u545a\x6c\u5ef2\x6c\u6730\u5ef2\u735c\u59c8\u545a\u735c\u624f\u5ef2\u545a\u58a0\u59c8\x6c"); (function (i, e) { var T = function (iV) { while (--iV) { i.push(i.shift()) } }; T(++e) }(fg, 498)); var fe = function (i, e) { i = i - 0; var T = fg[i]; return T }; function ix(T) { var i = { "\x78\x78\x61\x64\x6d": function (iZ, iY) { return iZ !== iY }, "\x68\x61\x6c\x64\x68": fe("0x0"), "\x6d\x78\x68\x68\x6d": function (iZ, iY) { return iZ !== iY }, "\x65\x6c\x78\x61\x68": fe("0x1"), "\x6d\x65\x65\x65\x68": fe("0x2"), "\x65\x65\x63\x78\x78": fe("0x3"), "\x6c\x68\x6c\x6d\x6c": "\x63\x61\x63", "\x61\x78\x61\x61\x61": fe("0x4") }; var iX = "\x6d\x65\x61"; while (i[fe("0x5")](iX, fe("0x6"))) { switch (iX) { case fe("0x7"): try { var iW = i[fe("0x8")]; while (i[fe("0x9")](iW, i[fe("0xa")])) { switch (iW) { case i[fe("0xb")]: e = fG(T); iW = fe("0x1"); break; case fe("0x0"): iW = aw["\x69\x6e\x4d\x61\x70\x48\x6f\x73\x74"] ? i["\x65\x65\x63\x78\x78"] : i["\x6d\x65\x65\x65\x68"]; break; case i[fe("0xc")]: e = new Worker(T); iW = i[fe("0xd")]; break; case fe("0xe"): e["\x6f\x6e\x65\x72\x72\x6f\x72"] = function (iY) { iY[fe("0xf")](); e = fG(T) }; iW = i[fe("0xa")]; break } } } catch (iV) { e = fG(T) } iX = fe("0x4"); break; case i[fe("0x10")]: return e; case fe("0x11"): var e = null; iX = "\x61\x63\x69"; break } } } function fG(iX) { var iV = { "\x65\x61\x6c\x65\x69": "\x65\x6c\x6d", "\x6c\x61\x61\x78\x65": fe("0x12"), "\x78\x61\x6d\x65\x69": fe("0x13"), "\x61\x6d\x63\x68\x65": function (i3, i4) { return i3 + i4 }, "\x78\x69\x61\x68\x68": fe("0x14"), "\x78\x61\x78\x78\x6d": "\x22\x29\x3b", "\x6c\x65\x69\x6d\x65": fe("0x15"), "\x68\x65\x64\x78\x6d": "\x68\x6c\x65", "\x61\x69\x78\x65\x65": fe("0x16") }; var i = null; try { var e = fe("0x17"); while (e !== "\x65\x64\x63\x65") { switch (e) { case iV[fe("0x18")]: i = new Worker(i2); e = iV["\x6c\x61\x61\x78\x65"]; break; case iV["\x78\x61\x6d\x65\x69"]: var i2 = i1["\x63\x72\x65\x61\x74\x65\x4f\x62\x6a\x65\x63\x74\x55\x52\x4c"](i0); e = iV[fe("0x18")]; break; case fe("0x19"): var i1 = window[fe("0x1a")] || window[fe("0x1b")]; e = fe("0x13"); break; case fe("0x17"): var i0; e = fe("0x1c"); break; case "\x64\x61\x61": try { i0 = new Blob([iV[fe("0x1d")](iV["\x78\x69\x61\x68\x68"] + iX, iV[fe("0x1e")])], { type: fe("0x1f") }) } catch (iZ) { var iY = fe("0x20"); while (iY !== iV["\x6c\x65\x69\x6d\x65"]) { switch (iY) { case fe("0x20"): var iW = new (window[(fe("0x21"))] || window[(fe("0x22"))] || window[(fe("0x23"))])(); iY = iV[fe("0x24")]; break; case iV[fe("0x25")]: i0 = iW[fe("0x26")](fe("0x1f")); iY = iV[fe("0x27")]; break; case fe("0x28"): iW[fe("0x29")](iV[fe("0x2a")] + iX + fe("0x2b")); iY = iV[fe("0x25")]; break } } } e = fe("0x19"); break } } } catch (T) { } return i } function ig(e) { this[fe("0x2c")](e) } var gb = { "\x69\x6e\x69\x74": function (iV) { var i = { "\x6c\x64\x65\x78\x6c": fe("0x2d"), "\x65\x6d\x69\x65\x69": function (iY, iX) { return iY !== iX }, "\x69\x78\x63\x6c\x68": function (iY, iX) { return iY < iX }, "\x65\x61\x64\x65\x64": fe("0x2e"), "\x69\x64\x63\x61\x65": fe("0x2f"), "\x61\x63\x61\x64\x65": fe("0x30"), "\x68\x65\x61\x64\x6d": fe("0x31"), "\x78\x65\x68\x78\x69": function (iY, iX) { return iY !== iX }, "\x63\x65\x63\x63\x78": "\x63\x6d\x63\x61", "\x65\x65\x69\x63\x6d": fe("0x32"), "\x65\x68\x6c\x64\x61": "\x63\x78\x61", "\x63\x65\x65\x6d\x65": fe("0x33"), "\x61\x6d\x61\x61\x6d": function (iY, iX) { return iY > iX }, "\x69\x6d\x6d\x65\x65": "\x6c\x65\x61", "\x64\x61\x78\x63\x65": fe("0x34"), "\x68\x64\x68\x65\x64": fe("0x35"), "\x61\x65\x68\x65\x6c": fe("0x36"), "\x78\x68\x65\x63\x61": "\x77\x6f\x72\x6b\x65\x72\x6d\x67\x72", "\x61\x61\x6c\x69\x78": fe("0x37"), "\x78\x61\x64\x64\x68": fe("0x38"), "\x65\x63\x64\x78\x69": "\x61\x6c\x6d", "\x68\x6d\x6c\x64\x61": function (iY, iX) { return iY < iX }, "\x63\x63\x65\x61\x65": "\x68\x61\x61\x69", "\x64\x78\x63\x6d\x63": "\x69\x6d\x6d", "\x65\x65\x6c\x78\x61": fe("0x39"), "\x6d\x68\x78\x63\x6d": (window.location.protocol === "http:" ? "http:" : "https:") + "//api.map.baidu.com/res/webgl/10/worker_wasm_4i3lbq.js", "\x63\x78\x78\x65\x65": fe("0x3a"), "\x68\x63\x61\x61\x61": function (iY, iX) { return iY(iX) }, "\x68\x69\x78\x61\x65": fe("0x3b"), "\x65\x69\x65\x65\x61": fe("0x3c"), "\x78\x65\x63\x64\x65": "\x68\x6c\x6d", "\x78\x64\x68\x6d\x65": fe("0x3d"), "\x63\x63\x69\x61\x64": "\x61\x6c\x63", "\x6d\x64\x61\x61\x6c": fe("0x3e"), "\x78\x61\x61\x78\x68": fe("0x3f"), "\x61\x65\x65\x6d\x61": fe("0x40"), "\x65\x63\x64\x65\x61": fe("0x41"), "\x65\x68\x61\x64\x78": fe("0x11"), "\x6d\x61\x61\x78\x61": fe("0x42"), "\x6d\x61\x63\x64\x61": fe("0x43"), "\x61\x61\x6d\x68\x68": fe("0x44"), "\x61\x68\x63\x68\x65": function (iX) { return iX() }, "\x65\x69\x65\x69\x78": fe("0x45"), "\x6d\x63\x65\x61\x6d": "\x63\x68\x6d", "\x68\x6d\x68\x65\x6d": fe("0x46"), "\x61\x65\x6d\x78\x65": fe("0x47"), "\x6d\x61\x64\x65\x6c": fe("0x48") }; var e = fe("0x49"); while (e !== i[fe("0x4a")]) { switch (e) { case "\x65\x6d\x78": this[fe("0x4b")] = []; e = fe("0x4c"); break; case fe("0x49"): var iW = this; e = i[fe("0x4d")]; break; case fe("0x45"): T = 2; e = i["\x65\x65\x69\x63\x6d"]; break; case i[fe("0x4e")]: this[fe("0x4f")] = null; e = i["\x78\x64\x68\x6d\x65"]; break; case i["\x63\x63\x69\x61\x64"]: this[fe("0x50")] = fp(); e = i[fe("0x51")]; break; case fe("0x42"): if (typeof this["\x6d\x61\x70"][fe("0x52")][fe("0x53")] === i["\x78\x61\x61\x78\x68"]) { e = i[fe("0x4e")]; break } e = i[fe("0x54")]; break; case i[fe("0x55")]: this[fe("0x56")] = []; e = fe("0x40"); break; case "\x6d\x64\x63": this[fe("0x57")] = []; e = i[fe("0x58")]; break; case fe("0x41"): var T = navigator["\x68\x61\x72\x64\x77\x61\x72\x65\x43\x6f\x6e\x63\x75\x72\x72\x65\x6e\x63\x79"] || 4; e = i[fe("0x59")]; break; case fe("0x5a"): this["\x74\x65\x78\x74\x53\x69\x7a\x65\x52\x61\x74\x69\x6f"] = 1; e = i[fe("0x5b")]; break; case fe("0x5c"): iV["\x6f\x6e"](fe("0x5d"), function () { for (var iX = 0; iX < iW[fe("0x4b")][fe("0x5e")]; iX++) { if (iW[fe("0x4b")][iX]) { iW[fe("0x4b")][iX][fe("0x5f")]() } } iW[fe("0x4b")][fe("0x5e")] = 0 }); e = i[fe("0x4a")]; break; case fe("0x46"): iV["\x6f\x6e"](fe("0x60"), function () { var iZ = i[fe("0x61")]; while (i[fe("0x62")](iZ, fe("0x63"))) { switch (iZ) { case "\x6c\x61\x65": if (typeof this[fe("0x52")]["\x73\x74\x79\x6c\x65"] !== fe("0x3f")) { iZ = fe("0x2f"); break } iZ = fe("0x63"); break; case fe("0x2d"): for (var iY = 0, iX = iW[fe("0x4b")][fe("0x5e")]; i[fe("0x64")](iY, iX); iY++) { iW[fe("0x4b")][iY][fe("0x65")] = ![] } iZ = i[fe("0x66")]; break; case i[fe("0x67")]: iW[fe("0x4f")] = null; iZ = fe("0x30"); break; case i[fe("0x68")]: iW[fe("0x56")] = []; iZ = fe("0x63"); break } } }); e = i[fe("0x69")]; break; case i[fe("0x51")]: this["\x77\x6f\x72\x64\x53\x70\x61\x63\x65\x52\x61\x74\x69\x6f"] = this[fe("0x50")]; e = fe("0x48"); break; case fe("0x43"): iV["\x6f\x6e"](i[fe("0x6a")], function () { var iX = i[fe("0x6b")]; while (i["\x78\x65\x68\x78\x69"](iX, i[fe("0x6c")])) { switch (iX) { case i[fe("0x6d")]: if (typeof this[fe("0x52")][fe("0x53")] !== fe("0x3f")) { iX = fe("0x6e"); break } iX = fe("0x6f"); break; case fe("0x33"): iW["\x73\x74\x72\x69\x6e\x67\x69\x66\x69\x65\x64\x43\x75\x73\x74\x6f\x6d\x53\x74\x79\x6c\x65\x49\x6e\x66\x6f\x5a\x6f\x6f\x6d"] = []; iX = fe("0x6f"); break; case "\x68\x6c\x63": for (var iZ = 0, iY = iW[fe("0x4b")][fe("0x5e")]; i[fe("0x64")](iZ, iY); iZ++) { iW[fe("0x4b")][iZ][fe("0x65")] = ![] } iX = i[fe("0x6d")]; break; case i[fe("0x70")]: iW["\x73\x74\x72\x69\x6e\x67\x69\x66\x69\x65\x64\x43\x75\x73\x74\x6f\x6d\x53\x74\x79\x6c\x65\x49\x6e\x66\x6f"] = null; iX = i[fe("0x71")]; break } } }); e = "\x65\x63\x61"; break; case i[fe("0x59")]: if ((i[fe("0x72")](bF) || ej[fe("0x73")]["\x69\x65"]) && i[fe("0x74")](T, 2)) { e = i[fe("0x75")]; break } e = i[fe("0x6d")]; break; case i["\x6d\x63\x65\x61\x6d"]: this["\x74\x65\x78\x74\x53\x69\x7a\x65\x52\x61\x74\x69\x6f"] = 2; e = i[fe("0x5b")]; break; case i[fe("0x54")]: eM["\x63\x61\x6e\x55\x73\x65\x57\x65\x62\x41\x73\x73\x65\x6d\x62\x6c\x79"](function (i4) { var i3 = fe("0x76"); while (i3 !== fe("0x77")) { switch (i3) { case i[fe("0x78")]: i2 = (window.location.protocol === "http:" ? "http:" : "https:") + "//api.map.baidu.com/res/webgl/10/worker_asm_0nl4rd.js"; i3 = i[fe("0x79")]; break; case i[fe("0x7a")]: var i2; i3 = fe("0x7b"); break; case fe("0x3a"): for (var i1 = 0; i[fe("0x7c")](i1, Math[fe("0x7d")](iW[fe("0x57")][fe("0x5e")], T)); i1++) { var iZ = iW[fe("0x57")]["\x73\x68\x69\x66\x74"](); iW[fe("0x7e")](iZ[fe("0x7f")], iZ[fe("0x80")], iZ["\x74\x69\x6c\x65\x4b\x65\x79"], iZ["\x63\x62\x6b"]) } i3 = i[fe("0x81")]; break; case i[fe("0x82")]: i3 = i4 ? fe("0x39") : i[fe("0x78")]; break; case i["\x65\x65\x6c\x78\x61"]: i2 = i["\x6d\x68\x78\x63\x6d"]; i3 = fe("0x38"); break; case fe("0x83"): if (i[fe("0x74")](iW[fe("0x57")][fe("0x5e")], 0)) { i3 = i[fe("0x84")]; break } i3 = fe("0x77"); break; case fe("0x38"): for (var iY = 0; i[fe("0x7c")](iY, T); iY++) { var iX = i[fe("0x85")](ix, i2); iX[fe("0x86")] = function i0(i9) { if (i9[fe("0x87")]) { this[fe("0x88")] && this[fe("0x88")](i9[fe("0x87")], this[fe("0x89")]) } else { this[fe("0x88")] && this["\x5f\x63\x62\x6b"](null, this["\x5f\x70\x61\x72\x73\x69\x6e\x67\x54\x69\x6c\x65\x4b\x65\x79"]) } this[fe("0x8a")] = ![]; this[fe("0x88")] = null; this[fe("0x8b")] = null; this["\x5f\x70\x61\x72\x73\x69\x6e\x67\x54\x69\x6c\x65\x4b\x65\x79"] = null; if (i["\x61\x6d\x61\x61\x6d"](iW[fe("0x57")][fe("0x5e")], 0)) { var i8 = i[fe("0x8c")]; while (i8 !== i[fe("0x8d")]) { switch (i8) { case "\x6c\x6c\x65": iW[fe("0x7e")](i5["\x75\x72\x6c"], i5["\x74\x69\x6c\x65\x49\x6e\x66\x6f"], i5[fe("0x8e")], i7); i8 = fe("0x34"); break; case i[fe("0x8f")]: var i7 = i5[fe("0x90")]; i8 = i[fe("0x91")]; break; case i["\x69\x6d\x6d\x65\x65"]: var i5 = iW["\x61\x72\x72\x50\x65\x6e\x64\x69\x6e\x67\x44\x61\x74\x61"][fe("0x92")](); i8 = i[fe("0x8f")]; break } } } var i6 = new eX(fe("0x93")); i6["\x73\x6f\x75\x72\x63\x65"] = i[fe("0x94")]; iV[fe("0x95")](i6) }; iW[fe("0x4b")][fe("0x96")](iX) } i3 = fe("0x83"); break } } }); e = i["\x68\x6d\x68\x65\x6d"]; break; case i[fe("0x4d")]: this[fe("0x97")] = iV; e = i["\x61\x65\x6d\x78\x65"]; break; case i[fe("0x98")]: e = this[fe("0x50")] > 1 ? fe("0x99") : fe("0x5a"); break } } }, "\x67\x65\x74\x49\x64\x6c\x65\x57\x6f\x72\x6b\x65\x72": function () { for (var T = 0, i = this["\x61\x72\x72\x57\x6f\x72\x6b\x65\x72"]["\x6c\x65\x6e\x67\x74\x68"]; T < i; T++) { var e = this[fe("0x4b")][T]; if (!e[fe("0x8a")]) { e[fe("0x8a")] = !![]; return e } } return null }, "\x72\x65\x6c\x65\x61\x73\x65\x50\x65\x6e\x64\x69\x6e\x67\x44\x61\x74\x61": function (iW) { var T = { "\x61\x65\x69\x65\x63": function (i0, i1) { return i0 - i1 }, "\x6d\x6d\x6c\x68\x68": function (i1, i0) { return i1 >= i0 }, "\x65\x61\x63\x63\x64": function (i1, i0) { return i1 + i0 }, "\x68\x6c\x63\x65\x78": function (i0, i1) { return i0 + i1 }, "\x69\x6c\x65\x6d\x65": function (i1, i0) { return i1 + i0 }, "\x68\x78\x65\x6d\x64": fe("0x9a") }; var iY = []; var iX = this[fe("0x57")]; for (var iV = T[fe("0x9b")](iX["\x6c\x65\x6e\x67\x74\x68"], 1); T[fe("0x9c")](iV, 0); iV--) { var i = iX[iV]; var e = i[fe("0x80")]; if (iW[fe("0x9d")] !== e[fe("0x9d")]) { continue } var iZ = T[fe("0x9e")](T["\x68\x6c\x63\x65\x78"](T["\x69\x6c\x65\x6d\x65"](T[fe("0x9f")](T[fe("0xa0")] + e[fe("0xa1")], "\x5f"), e["\x72\x6f\x77"]), "\x5f"), e[fe("0xa2")]); if (!iW[iZ]) { iX[fe("0xa3")](iV, 1); iY[fe("0x96")](e) } } return iY }, "\x6c\x6f\x61\x64\x54\x69\x6c\x65\x44\x61\x74\x61": function (e, i5, i4, i3) { var i2 = { "\x65\x63\x68\x63\x69": function (i7, i6) { return i7 !== i6 }, "\x6c\x64\x78\x65\x65": fe("0xa4"), "\x68\x65\x64\x65\x64": fe("0xa5"), "\x64\x63\x61\x65\x69": fe("0xa6"), "\x78\x6d\x65\x61\x65": fe("0xa7"), "\x6d\x61\x64\x6c\x63": fe("0xa8"), "\x61\x61\x78\x63\x64": fe("0xa9"), "\x6d\x78\x61\x68\x65": fe("0xaa"), "\x61\x6d\x65\x69\x78": fe("0xab"), "\x6d\x65\x69\x6d\x64": fe("0xac"), "\x64\x65\x65\x64\x6c": fe("0xad"), "\x61\x65\x64\x69\x65": fe("0xae"), "\x65\x65\x61\x78\x64": function (i7, i6) { return i7 + i6 }, "\x69\x64\x61\x6c\x61": fe("0xaf"), "\x69\x6d\x64\x68\x6d": fe("0x2"), "\x63\x78\x69\x63\x6d": "\x61\x6c\x63", "\x61\x6d\x63\x65\x6d": function (i6, i7) { return i6 + i7 }, "\x68\x65\x6c\x61\x6c": fe("0xb0"), "\x61\x65\x78\x63\x6c": fe("0xb1"), "\x63\x61\x65\x63\x64": fe("0xb2"), "\x78\x6c\x65\x78\x6d": function (i7, i6) { return i7 + i6 }, "\x6d\x6c\x6c\x68\x63": fe("0xb3"), "\x64\x61\x65\x6d\x63": fe("0xb4"), "\x65\x61\x65\x61\x6d": fe("0xb5"), "\x6c\x65\x61\x6d\x61": "\x69\x63\x6f\x6e\x53\x65\x74\x49\x6e\x66\x6f", "\x64\x61\x68\x61\x61": function (i7, i6) { return i7 === i6 }, "\x68\x69\x6d\x61\x65": fe("0xb6"), "\x61\x61\x6d\x61\x68": fe("0xb7"), "\x61\x65\x68\x6d\x68": fe("0xb8"), "\x68\x61\x69\x6d\x64": fe("0xb9") }; var T = this[fe("0xba")](); var i = this[fe("0x97")]["\x5f\x64\x69\x73\x70\x6c\x61\x79\x4f\x70\x74\x69\x6f\x6e\x73"]["\x70\x6f\x69"]; var i1 = i ? this[fe("0x97")]["\x5f\x64\x69\x73\x70\x6c\x61\x79\x4f\x70\x74\x69\x6f\x6e\x73"][fe("0xbb")] : ![]; if (T) { var i0 = "\x61\x68\x68"; while (i2[fe("0xbc")](i0, i2[fe("0xbd")])) { switch (i0) { case fe("0xac"): iY = fe("0xbe"); i0 = fe("0xad"); break; case i2[fe("0xbf")]: iZ[fe("0xc0")] = this[i2["\x64\x63\x61\x65\x69"] + iW]; i0 = i2[fe("0xc1")]; break; case "\x68\x63\x6d": if (!T[fe("0x65")]) { i0 = fe("0xb2"); break } i0 = fe("0xb8"); break; case i2[fe("0xc2")]: if (!this[fe("0xc3")]) { i0 = fe("0xc4"); break } i0 = fe("0xb9"); break; case i2[fe("0xc1")]: iZ[fe("0xc5")] = this[fe("0xc6") + iY]; i0 = i2[fe("0xc7")]; break; case fe("0xc8"): T[fe("0x8b")] = i5; i0 = fe("0x48"); break; case fe("0xc9"): T[fe("0x88")] = i3; i0 = fe("0xc8"); break; case fe("0xca"): iZ[fe("0xcb")] = this[fe("0x4f")]; i0 = fe("0x2"); break; case i2["\x6d\x78\x61\x68\x65"]: iZ[fe("0xcc")] = iW; i0 = "\x61\x6d\x69"; break; case i2[fe("0xcd")]: if (iX) { i0 = i2[fe("0xce")]; break } i0 = i2[fe("0xcf")]; break; case i2[fe("0xd0")]: this[fe("0x4f")] = JSON["\x73\x74\x72\x69\x6e\x67\x69\x66\x79"](bk[i2[fe("0xd1")](fe("0xb0"), iW)]); i0 = fe("0xaf"); break; case i2[fe("0xd2")]: if (this[i2[fe("0xd3")] + iW]) { i0 = fe("0xa5"); break } i0 = fe("0xa7"); break; case i2["\x69\x6d\x64\x68\x6d"]: iZ[fe("0xd4")] = { "\x77\x6f\x72\x64\x53\x70\x61\x63\x65\x52\x61\x74\x69\x6f": this["\x77\x6f\x72\x64\x53\x70\x61\x63\x65\x52\x61\x74\x69\x6f"], "\x74\x65\x78\x74\x53\x69\x7a\x65\x52\x61\x74\x69\x6f": this[fe("0xd5")] }; i0 = fe("0xaa"); break; case fe("0x48"): T[fe("0x89")] = i4; i0 = fe("0xd6"); break; case fe("0xd6"): var iZ = { "\x61\x63\x74\x69\x6f\x6e": fe("0x7e"), "\x75\x72\x6c": e, "\x74\x69\x6c\x65\x49\x6e\x66\x6f": i5, "\x74\x69\x6c\x65\x4b\x65\x79": i4, "\x69\x73\x54\x65\x78\x74": i1, "\x69\x73\x50\x6f\x69": i }; i0 = i2[fe("0xd7")]; break; case fe("0xb9"): if (iX && bk[i2["\x61\x6d\x63\x65\x6d"](i2[fe("0xd8")], iW)]) { i0 = fe("0xb7"); break } i0 = fe("0xaf"); break; case fe("0xb4"): this[i2[fe("0xd9")](i2[fe("0xd3")], iW)] = JSON["\x73\x74\x72\x69\x6e\x67\x69\x66\x79"](bk[i2[fe("0xd9")](fe("0xb3"), iW)]); i0 = "\x65\x65\x61"; break; case fe("0xb5"): if (!this[fe("0xc6") + iY]) { i0 = i2[fe("0xda")]; break } i0 = i2[fe("0xc2")]; break; case "\x65\x68\x68": iZ[fe("0xdb")] = this[fe("0xc3")]; i0 = fe("0xdc"); break; case "\x6d\x61\x64": var iY = iW; i0 = fe("0xab"); break; case i2[fe("0xdd")]: if (!this[i2[fe("0xde")](fe("0xa6"), iW)] && bk[i2[fe("0xdf")] + iW]) { i0 = i2[fe("0xe0")]; break } i0 = i2[fe("0xe1")]; break; case i2["\x61\x65\x78\x63\x6c"]: this[i2[fe("0xde")](fe("0xc6"), iY)] = JSON["\x73\x74\x72\x69\x6e\x67\x69\x66\x79"](bk[i2["\x6c\x65\x61\x6d\x61"] + iY]); i0 = i2["\x6d\x61\x64\x6c\x63"]; break; case fe("0xdc"): if (iX && this["\x73\x74\x72\x69\x6e\x67\x69\x66\x69\x65\x64\x43\x75\x73\x74\x6f\x6d\x53\x74\x79\x6c\x65\x49\x6e\x66\x6f"]) { i0 = fe("0xca"); break } i0 = fe("0x2"); break; case fe("0xe2"): var iX = !!i2[fe("0xe3")](iW[fe("0xe4")](i2[fe("0xe5")]), 0); i0 = fe("0xe6"); break; case i2[fe("0xe7")]: if (!this[fe("0x4f")]) { i0 = i2["\x61\x65\x64\x69\x65"]; break } i0 = fe("0xaf"); break; case i2["\x61\x65\x68\x6d\x68"]: T[fe("0xe8")](iZ); i0 = fe("0xa4"); break; case fe("0xe9"): T[fe("0x65")] = !![]; i0 = i2[fe("0xea")]; break; case fe("0x4c"): var iW = this[fe("0x97")][fe("0xeb")](); i0 = fe("0xe2"); break; case fe("0xc4"): this[fe("0xc3")] = JSON[fe("0xec")](bk[fe("0xdb")]); i0 = i2[fe("0xed")]; break } } } else { var iV = { "\x75\x72\x6c": e, "\x74\x69\x6c\x65\x49\x6e\x66\x6f": i5, "\x74\x69\x6c\x65\x4b\x65\x79": i4, "\x63\x62\x6b": i3 }; this["\x61\x72\x72\x50\x65\x6e\x64\x69\x6e\x67\x44\x61\x74\x61"][fe("0x96")](iV) } } }; ej[fe("0xee")](ig["\x70\x72\x6f\x74\x6f\x74\x79\x70\x65"], gb); function hJ(i) { this.tileLayers = []; this.map = i; var e = this.config = dG[this.map.mapType]; this.errorUrl = e.errorUrl; this.tileSize = e.tileSize; this.baseUnits = e.baseUnits; this.baseZoomLevel = e.zoomLevelBase; this.tileURLs = e.tileUrls; this.tilesInfoCache = {}; this.loadDelay = 10; this._labelTextCanvas = null } bk.register(function (i) { if (i._renderType !== "webgl") { return } var e = i.tileMgr = new hJ(i); i.addEventListener("addtilelayer", function (iV) { e.addWebGLLayer(iV.target) }); i.addEventListener("removetilelayer", function (iV) { e.removeWebGLLayer(iV.target) }); i.on("update", function T(iW) { if (i.getFeatureStyleTags().length === 0 || !i.customLoaded) { return } var iV = false; if (iW.changedStatus && iW.changedStatus.onzoom_changed) { iV = true } e.loadLayersData({ zoomChanged: iV }) }); i.on("style_changed", function () { e.loadLayersData() }) }); ej.extend(hJ.prototype, { addWebGLLayer: function (T) { this.tileLayers.push(T); T.initDrawData(); if (this.tileLayers.length > 1) { for (var e = 1; e < this.tileLayers.length; e++) { if (this.tileLayers[e].isFlat) { this.map.setDisplayOptions({ isFlat: true }); break } } } if (this.map.getFeatureStyleTags().length > 0 && this.map.customLoaded) { this.loadLayersData() } else { var iV = this; this.map.loadMapStyleFiles(function () { iV.loadLayersData() }) } }, removeWebGLLayer: function (iX) { var iY = false; for (var iW = 0, iV = this.tileLayers.length; iW < iV; iW++) { if (iX === this.tileLayers[iW]) { iY = true; this.tileLayers.splice(iW, 1); break } } if (iY === false) { return } iX.destroyDrawData(); if (this.map.getFeatureStyleTags().length > 0) { this.loadLayersData() } if (this.tileLayers.length === 1) { this.map.setDisplayOptions({ isFlat: false }) } else { var e = false; for (var iW = 1; iW < this.tileLayers.length; iW++) { if (this.tileLayers[iW].isFlat) { e = true; break } } this.map.setDisplayOptions({ isFlat: e }) } var T = new eX("onrefresh"); T.source = "removewebgllayer"; this.map.fire(T) }, getLabelTextCanvas: function () { if (!this._labelTextCanvas) { this._labelTextCanvas = new al(this.map) } return this._labelTextCanvas }, loadLayersData: function (i) { if (this.map.suspendLoad) { return } var iV = this; i = i || {}; var T = !!i.zoomChanged; var e = (T === true || this.map.getTilt() > 50); if (!e) { if (!this.syncLoadTimer) { this.syncLoadTimer = setTimeout(function () { iV._loadLayersFromCache(T); iV.syncLoadTimer = null }, 40) } } else { this._loadLayersFromCache(T) } if (!iV.map.viewAnimationTime) { this.timer && window.clearTimeout(this.timer) } this.timer = window.setTimeout(function () { if (iV.map.viewAnimationTime) { if (new Date().getTime() - iV.map.viewAnimationTime < 1000) { return } iV.map.viewAnimationTime = new Date().getTime() } var iX = iV.tileLayers.length; iV.tilesInfoCache = {}; for (var iY = 0; iY < iX; iY++) { var i0 = iV.tileLayers[iY]; var iZ = i0.tileType; var iW = null; if (iV.tilesInfoCache[iZ.getName()]) { iW = iV.tilesInfoCache[iZ.getName()] } else { iW = iV.calcTilesInfo(iZ, i0); iV.tilesInfoCache[iZ.getName()] = iW } i0.loadLayerData(iW, false, T) } iV.timer = null }, this.loadDelay); if ((bF() || ej.Browser.ie) && T) { this.loadDelay = 200 } else { this.loadDelay = 80 } }, _loadLayersFromCache: function (iW) { this.map._featureMgr.clearData(); var iZ = this.tileLayers; iZ.sort(function (i0, i) { return i0.zIndex - i.zIndex > 0 }); var T = iZ.length; this.tilesInfoCache = {}; for (var iV = 0; iV < T; iV++) { var iY = iZ[iV]; var iX = iY.tileType; var e = null; if (this.tilesInfoCache[iX.getName()]) { e = this.tilesInfoCache[iX.getName()] } else { e = this.calcTilesInfo(iX, iY); this.tilesInfoCache[iX.getName()] = e } iY.loadLayerData(e, true, iW) } }, calcTilesInfo: function (i8, jz) { var jl = this.map; var jr = jl.getMapType(); var jm = dG[jr]; var jf = jl.getZoom(); var e = Math.floor(jf); var iY = i8.getDataZoom(jf); var jE = i8.getName(); iY = bR(iY, jm.minDataZoom, jm.maxDataZoom); var ju = e; if (i8._name === "web" || i8._name === "xyz") { ju = iY } else { if (ju < 3) { ju = 3 } } var jj = i8.getTileSize(jf); var iX = i8.getBaseTileSize(jf); var jh = jl.getBoundsIn(); var jc = i8.getMercatorSize(jf, iY); var jb; var js; var ji; var jw; var jn = jl.getCenterIn(); if (jr !== BMAP_SATELLITE_MAP) { jn = em.calcLoopCenterPoint(jn) } if (jE === "xyz") { return this.calcXYZTilesInfo(jn, jh, iY, jE, jz, jl) } var jg = Math.floor(jn.lng / jc); var i0 = Math.floor(jn.lat / jc); var jp = 0; var iV = 0; if (jE !== "web") { jh = em.calcLoopMapBounds(jh, jl.getCenter()) } if (jh.ne.lng > em._mc180X) { var i6 = em.getSpaceDistanceInPixel(iY); jp = Math.ceil(i6 / iX) } if (jh.sw.lng < em._mcM180X) { var i6 = em.getSpaceDistanceInPixel(iY); iV = Math.ceil(i6 / iX) } if (jh.ne.lat > 19505879.362428114 || jh.sw.lat < -15949096.637571886) { jh.ne.lat = 19505879.362428114; jh.sw.lat = -15949096.637571886 } var i2 = [Math.floor(jh.sw.lng / jc) - iV, Math.floor(jh.sw.lat / jc)]; var jC = [Math.floor(jh.ne.lng / jc) + jp, Math.floor(jh.ne.lat / jc)]; jb = i2[0]; js = jC[0] + 1; ji = i2[1]; jw = jC[1] + 1; var i7 = []; for (var i4 = jb; i4 < js; i4++) { if (em.isTileBlank(i4, iY, iX) === true) { continue } for (var i9 = ji; i9 < jw; i9++) { var jy = false; var i3 = 256; if (jE === "web") { var jt = em.calcLoopParam(i4, iY); var jB = { col: jt.col, row: i9, baseTileSize: 256, zoom: iY }; var jk = hZ.prototype.tileToBound(jB, jl.getCenter()); if (jk.LL.sw.lng * jk.LL.ne.lng < 0 && Math.floor(jk.LL.ne.lng) < 0) { jy = true; i3 = em.pixelWidth(jk.MC.sw.lng, jl.getZoom()) } } var i5 = { col: i4, row: i9, zoom: iY, useZoom: ju, tileTypeName: jE, loopOffsetX: 0, tileSize: jj, baseTileSize: iX, mercatorSize: jc, combine: jy, dataIndex: i3 }; i7.push(i5); var jq = "id_" + i4 + "_" + i9 + "_" + iY; i7[jq] = true } } if (jr !== BMAP_SATELLITE_MAP) { i7 = em.calcLoopTiles(i7, iY, iX, jc) } if (iY === 3) { for (var jA = 0, jx = i7.length; jA < jx; jA++) { var i4 = i7[jA].col; var i9 = i7[jA].row; var jt = em.calcLoopParam(i4, iY); var iZ = jt.T; var jd = i4 >= 0 ? i4 - iZ : i4 + iZ; var je = "id_" + jd + "_" + i9 + "_" + iY; if (!i7[je]) { var i5 = { col: jd, row: i9, zoom: iY, useZoom: ju, loopOffsetX: 0, tileSize: jj, baseTileSize: iX, mercatorSize: jc, combine: false }; i7.push(i5); i7[je] = true } } } if (this.map._tilt > 0) { for (var jA = 0; jA < i7.length; jA++) { var i1 = i7[jA]; var jv = i1.col; var jD = i1.row; var jo = []; jo.minX = jv * jc; jo.maxX = (jv + 1) * jc; jo.minY = jD * jc; jo.maxY = (jD + 1) * jc; var iW = new b8(0, 0); iW.lng = (jo.minX + jo.maxX) / 2; iW.lat = (jo.minY + jo.maxY) / 2; var ja = jl.pointToPixelIn(iW); if (ja.x > 0 && ja.x < this.map.width && ja.y > 0 && ja.y < this.map.height) { continue } if (jo.minX < jn.lng && jo.maxX > jn.lng && jo.minY < jn.lat && jo.maxY > jn.lat) { continue } if (!this.ifTileInMapBounds(jo, jh, jv, jD)) { i7.splice(jA, 1); jA-- } } } i7.sort((function (i) { return function (T, jF) { return ((0.4 * Math.abs(T.col - i[0]) + 0.6 * Math.abs(T.row - i[1])) - (0.4 * Math.abs(jF.col - i[0]) + 0.6 * Math.abs(jF.row - i[1]))) } })([jg, i0])); i7.zoom = iY; i7.tileTypeName = jE; return i7 }, calcXYZTilesInfo: function (i6, iZ, i5, ja, iY, jd) { var i1 = jd.width; var jb = jd.height; var i0 = Math.floor(i5); var iV = c3.transformBDmcPoint(i6); if (!iV) { return [] } var i2 = null; if (iY.transform.source === "BD09MC") { var iW = c3.getRangeExtent(iV, i1, jb, i0, iY.transform); i2 = [iW.minX, iW.minY, iW.maxX, iW.maxY] } else { var iX = c3.transformBDmcPoint(iZ.ne); var i4 = c3.transformBDmcPoint(iZ.sw); i2 = c3.getLoopBox(iV, [i4[0], i4[1], iX[0], iX[1]]) } if (!i2) { return [] } if (iY.transform.source === "BD09MC") { i0 += 1 } var T = c3.getTileRangeForExtentFactory(i2, i0, iY.transform); var e = []; var je = c3.getResolutionScale(i0, iY.transform); for (var i9 = T.minX; i9 <= T.maxX; i9++) { for (var i7 = T.minY; i7 <= T.maxY; i7++) { var i8 = { col: i9, row: i7, zoom: i0, useZoom: i0, tileTypeName: ja, loopOffsetX: 0, tileSize: 256 * je, transform: iY.transform, combine: false, dataIndex: 0 }; e.push(i8); var i3 = "id_" + i9 + "_" + i7 + "_" + i0; e[i3] = true } } var jc = c3.getTileCoordForCoordAndZ(iV, i0); e.sort((function (i) { return function (jf, jg) { return ((0.4 * Math.abs(jf.col - i[0]) + 0.6 * Math.abs(jf.row - i[1])) - (0.4 * Math.abs(jg.col - i[0]) + 0.6 * Math.abs(jg.row - i[1]))) } })([jc[1], jc[2]])); e.zoom = i0; e.tileTypeName = ja; return e }, getCurrentViewTilesInfo: function (i) { var e = this.tilesInfoCache[i.getName()]; if (!e) { return this.calcTilesInfo(i) } return e }, ifTileInMapBounds: function (e, iX, T, iW) { var i = iX.normalizedBottomLeft; var i8 = iX.normalizedTopRight; var i0 = iX.normalizedTopLeft; var iY = iX.normalizedBottomRight; var iV = false; var i7 = new b8(e.minX, e.minY); var i4 = new b8(e.maxX, e.maxY); var iZ = new b8(i4.lng, i7.lat); var i5 = new b8(i7.lng, i4.lat); var i2 = [i5, i4, iZ, i7]; for (var i6 = 0, i1 = i2.length; i6 < i1; i6++) { var i3 = i6 + 1; if (i3 === i1) { i3 = 0 } var i9 = i6; var ja = hY(i2[i3], i2[i9], i0, i); if (ja) { iV = true; break } ja = hY(i2[i3], i2[i9], iY, i8); if (ja) { iV = true; break } ja = hY(i2[i3], i2[i9], i8, i0); if (ja) { iV = true; break } ja = hY(i2[i3], i2[i9], i, iY); if (ja) { iV = true; break } } return iV }, getTileLayer: function (iW) { for (var iV = 0, e = this.tileLayers.length; iV < e; iV++) { var T = this.tileLayers[iV]; if (T.mapType === iW) { return T } } return null }, getZoomState: function (i) { var e = i - this.lastZoom; if (e > 0) { this.zoomState = 1 } else { if (e < 0) { this.zoomState = -1 } } this.lastZoom = i; return this.zoomState } }); function gv(e) { this._map = e; this._spotsId = null; this._init() } gv.prototype._init = function () { var e = this._map; e.addEventListener("onspotsdataready", function (T) { var i = T.spots; if (this._spotsId) { e.removeSpots(this._spotsId) } this._spotsId = e.addSpots(i) }) }; bk.register(function (e) { if (!e.config.enableIconClick) { return } e._mapIcon = new gv(e) }); function cC(e) { this._indoorData = {}; this._map = e; this.currentUid = null; this.currentFloor = null; this._indoorControl = null; this.enterMethod = null; this.showMask = false; this._isMobile = bF(); this._autoEnterZoom = 19; if (this._isMobile) { this._autoEnterZoom = 17 } this._init(e); window._indoorMgr = this } cC.prototype._init = function (i) { var e = this; i.on("indoor_status_changed", function (iY) { var T = iY.uid; var iW = iY.floor; if (T === null) { T = e.currentUid; if (e._indoorData[T]) { iW = e._indoorData[T].defaultFloor } if (e._indoorControl) { e._indoorControl.hide() } e.currentUid = null; e.currentFloor = null; e.enterMethod = null } else { if (e._indoorData[T]) { var iX = e._indoorData[T]; iW = (typeof iW === "number") ? iW : iX.defaultFloor; if (!e._indoorControl) { if (i.config.showControls && i._displayOptions.indoor) { e._indoorControl = new aj(i, iX) } } else { e._indoorControl.setInfo(iX); e._indoorControl.show() } e.currentUid = T; e.currentFloor = iW } } if (!e._indoorData || !e._indoorData[T] || e._indoorData[T].currentFloor === iW) { this.fire(new eX("onrefresh")); return } var iV = new eX("onindoor_data_refresh"); iV.uid = T; iV.floor = iW; iV.tileKey = e._indoorData[T].tileKey; e._indoorData[T].currentFloor = iW; e.currentFloor = iW; this.fire(iV) }); i.on("spotclick", function (iV) { var T = null; if (iV.curAreaSpot && this.areaSpots[iV.curAreaSpot]) { T = this.areaSpots[iV.curAreaSpot].userData.uid } if (T === e.currentUid) { if (iV.curAreaSpot) { e.enterMethod = "byClick" } return } if (T === null) { if (e.currentUid && e.enterMethod === "byClick") { i.showIndoor(null); e.enterMethod = null } } else { e.enterMethod = "byClick"; if (e.currentUid) { i.showIndoor(e.currentUid, e._indoorData[e.currentUid].defaultFloor) } i.showIndoor(T, e._indoorData[T].defaultFloor) } }); i.on("moveend", function () { if (this.getZoom() >= e._autoEnterZoom) { e._checkIndoorByMove() } }); i.on("zoomend", function () { if (this.getZoom() >= e._autoEnterZoom) { e._checkIndoorByMove() } else { if (e.enterMethod !== "byClick" && e.currentUid !== null) { this.showIndoor(null) } } }) }; cC.prototype._checkIndoorByMove = function () { var T = this._map; var i1 = T.getSize(); var i6 = { x: i1.width / 2, y: i1.height / 2 }; var i5 = Math.max(i1.width, i1.height); var i7 = []; for (var i2 in this._indoorData) { var e = this._indoorData[i2].center; var iV = T.pointToPixelIn(new bk.Point(e[0], e[1])); var iY = bX(i6, iV); i7.push({ uid: i2, distance: iY }) } if (i7.length === 0) { return } i7.sort(function (i8, i) { return i8.distance - i.distance }); var iX = i7[0]; var i3 = T.getCenterIn(); var iW = false; for (var i0 = 0; i0 < this._indoorData[iX.uid].contour.length; i0++) { if (bx([i3.lng, i3.lat], this._indoorData[iX.uid].contour[i0])) { iW = true; break } } if (iW === false && iX.uid === "e96b44200baa3b4082288acc") { var iZ = this._indoorData[iX.uid].boundsMin; var i4 = this._indoorData[iX.uid].boundsMax; if (i3.lng > iZ[0] && i3.lat > iZ[1] && i3.lng < i4[0] && i3.lat < i4[1]) { iW = true } } if (iW) { if (this.enterMethod !== "byClick") { if (this.currentUid !== null && this.currentUid !== iX.uid) { this._map.showIndoor(this.currentUid, this._indoorData[this.currentUid].defaultFloor) } if (this.currentUid !== iX.uid) { this._map.showIndoor(iX.uid, this._indoorData[iX.uid].defaultFloor) } this.enterMethod = "byMove" } } else { if (this.enterMethod !== "byClick") { this._map.showIndoor(null) } } }; cC.prototype.setData = function (iV) { if (iV === null) { return } for (var T in iV) { if (T === "tileInfo") { continue } var iW = iV[T].tileKey; if (this._indoorData[T]) { if (!this._indoorData[T][iW]) { this._indoorData[T].tileKeys.push(iW); this._indoorData[T][iW] = true } } else { this._indoorData[T] = iV[T]; this._indoorData[T].tileKeys = [iV[T].tileKey]; this._indoorData[T][iW] = true; for (var e = 0; e < this._indoorData[T].contour.length; e++) { this._map.addAreaSpot(this._indoorData[T].contour[e], { id: T + e, userData: { uid: T } }) } } } if (this._map.getZoom() >= this._autoEnterZoom) { this._checkIndoorByMove() } }; cC.prototype.removeData = function (T, iW) { if (!this._indoorData[T]) { return } var iV = this._indoorData[T]; for (var e = 0; e < iV.tileKeys.length; e++) { if (iV.tileKeys[e] === iW) { iV.tileKeys.splice(e, 1); break } } delete iV[iW]; if (iV.tileKeys.length === 0) { delete this._indoorData[T] } }; cC.prototype.getIndoorData = function (e) { return this._indoorData[e] || null }; cC.prototype.getData = function () { return this._indoorData }; bk.register(function (e) { e._indoorMgr = new cC(e) }); var aK = (function () { var iV = {}; var i4 = {}; var i0 = {}; function i2(i6) { if (Object.prototype.toString.call(i6) === "[object Object]") { for (var i5 in i6) { return false } return true } else { return false } } function i1(jc, jd, jg, i9, jf) { var i5 = i5 || null; i9 = i9 || i5; var i7; if (i9) { i7 = i3(jc, jd, jg, i9) } else { i7 = T(jc, jd, jg, jf) } var jb = i7.drawId; var i6 = i7.style; var je = i7.styleUpdate; var jh = []; if (!jb) { return jh } for (var i8 = 0; i8 < jb.length; i8++) { var ja = je[jb[i8]] || i6[jb[i8]]; if (ja) { switch (jd) { case "polygon": ja = iW(ja, jc); break; case "line": ja = iZ(ja, jc); break; case "pointText": ja = iX(ja, jc); break; case "point": ja = e(ja, jc); break; case "polygon3d": ja = iY(ja, jc); break }if (ja) { ja.did = jb[i8]; jh[jh.length] = ja } } } return jh } function i3(i6, i8, i9, i5) { var i7 = i5[2]; switch (i8) { case "point": i7 = i7[0]; break; case "pointText": i7 = i7[1]; break; case "line": i7 = i7[3]; break; case "polygon": i7 = i7[4]; break; case "polygon3d": i7 = i7[5]; break }var jb = i9 - 1; if (i8 === "line" && i9 === 12) { jb = i9 } var jc = i5[1][jb][0]; var ja = jc[i6]; if (!ja) { if (i8 === "point" || i8 === "pointText") { jc = i5[1][i9][0]; ja = jc[i6] } } return { drawId: ja, style: i7, styleUpdate: [] } } function T(i9, ja, jd, jc) { if (!jc) { return { drawId: null, style: [], styleUpdate: [] } } var jb; var i7 = jc.baseFs; if (i2(jc.zoomRegion)) { jb = jc.StyleBody || [] } else { jb = jc.zoomStyleBody[jd] || [] } var i6 = i7[2]; switch (ja) { case "point": i6 = i6[0]; jb = jb[0] || {}; break; case "pointText": i6 = i6[1]; jb = jb[1] || {}; break; case "line": i6 = i6[3]; jb = jb[3] || {}; break; case "polygon": i6 = i6[4]; jb = jb[4] || {}; break; case "polygon3d": i6 = i6[5]; jb = jb[5] || {}; break }var i5 = i7[1][jd - 1][0]; var i8 = i5[i9]; return { drawId: i8, style: i6, styleUpdate: jb } } function iX(i6, i5) { if (!i6 || i6.length === 0) { return null } return { sid: i5, fontRgba: i(i6[0]), haloRgba: i(i6[1]), backRgba: i(i6[2]), fontSize: i6[3], haloSize: i6[4], fontWeight: i6[5], fontStyle: i6[6], density: i6[7] } } function e(i6, i5) { return { sid: i5, rank: i6[0], ucflag: i6[1], icon: i6[2], iconType: i6[3], nineGG: i6[4], density: i6[5], zoom: i6[6] } } function iZ(i6, i5) { return { sid: i5, borderRgba: i(i6[0]), fillRgba: i(i6[1]), borderWidth: i6[2], fillWidth: i6[3], borderCap: i6[4], fillCap: i6[5], haveBorderLine: i6[6], haveBorderTexture: i6[7], haveFillTexture: i6[8], isUseBorderRgba: i6[9], isUseFillRgba: i6[10], borderTexture: i6[11], fillTexture: i6[12], borderTextureType: i6[13], fillTextureType: i6[14], isRealWidth: i6[15], haveArrow: i6[16], needRound: i6[17], realBorderWidth: i6[18] } } function iW(i6, i5) { return { sid: i5, fillRgba: i(i6[0]), borderRgba: i(i6[1]), borderWidth: i6[2], borderTexture: i6[3], borderTextureType: i6[4], waterStyle: i6[5], haloStyle: i6[6], textureStyle: i6[7], thickRgba: i(i6[8]) } } function iY(i6, i5) { return { sid: i5, filter: i6[0], ratio: i6[1], haveBorder: i6[2], borderWidth: i6[3], borderRgba: i(i6[4]), fillTop: i(i6[5]), fillSide: i(i6[6]), polyTexture: i6[7] } } function i(ja) { var i9 = ja; if (i0[i9]) { return i0[i9] } ja = ja >>> 0; var i8 = (ja) & 255; var i7 = (ja >> 8) & 255; var i5 = (ja >> 16) & 255; var i6 = (ja >> 24) & 255; i0[i9] = [i8, i7, i5, i6]; return i0[i9] } return { getStyleFromCache: function (jc, i7, ja, jb, i6, i9, i5) { jc = jc || "default"; var i8 = jc + "-" + i7 + "-" + ja + "-" + jb; if (i9) { i8 += "-indoor" } if (i6) { if (!i4[i8]) { i4[i8] = i1(i7, ja, jb, i6) } return i4[i8] } if (!iV[i8]) { iV[i8] = i1(i7, ja, jb, i6, i5) } return iV[i8] } } })(); bk.register(function (i) { var e = new ha(i) }); function ha(e) { e.container.appendChild(this.render()); this.bind(e) } ha.prototype.render = function () { var i = document.createElement("div"); i.className = "click-ripple-container"; var e = document.createElement("div"); e.className = "click-ripple"; i.appendChild(e); this._div = i; this._ripple = e; return i }; ha.prototype.bind = function (i) { var e = this; i.addEventListener("spotclick", function (T) { if (!T.spots || T.spots.length === 0) { return } e._div.style.left = T.pixel.x + "px"; e._div.style.top = T.pixel.y + "px"; ej.ac(e._ripple, "ripple-playing") }); ej.on(e._ripple, "transitionend", function () { ej.rc(e._ripple, "ripple-playing") }) }; function bE(e) { cD.call(this); if (!e) { return } this._opts = {}; this._map = e; this._maxLat = 84.6; this._minLat = -80.6; this._maxLatMC = hZ.convertLL2MC(new b3(this._maxLat, 0)).lat; this._minLatMC = hZ.convertLL2MC(new b3(this._minLat, 0)).lat } bE.inherits(cD, "ToolbarItem"); ej.extend(bE.prototype, { open: function () { if (this._isOpen == true) { return true } if (this._map._toolInUse) { return false } this._map._toolInUse = true; this._isOpen = true; return true }, close: function () { if (!this._isOpen) { return } this._map._toolInUse = false; this._isOpen = false }, _checkStr: function (e) { if (!e) { return "" } return e.replace(/</g, "&lt;").replace(/>/g, "&gt;") } }); function bV(T, i) { bE.call(this, T); i = i || {}; this._opts = ej.extend(ej.extend(this._opts || {}, { autoClear: false, tips: "测距", followText: "单击确定起点，双击结束绘制", unit: "metric", showResult: true, lineColor: "blue", lineStroke: 2, opacity: 1, lineStyle: "solid", cursor: u.distCursor, styleCodes: { lnCode: 0, spCode: 0, slCode: 0, tlCode: 0 }, enableMassClear: true }), i); if (this._opts.showResult === false) { if (typeof i.tips === "undefined") { this._opts.tips = "绘制折线" } if (!i.cursor) { this._opts.cursor = "crosshair" } } if (this._opts.lineStroke <= 0) { this._opts.lineStroke = 2 } if (this._opts.opacity > 1) { this._opts.opacity = 1 } else { if (this._opts.opacity < 0) { this._opts.opacity = 0 } } if (this._opts.lineStyle !== "solid" && this._opts.lineStyle !== "dashed") { this._opts.lineStyle = "solid" } this._checked = false; this._drawing = null; this.followTitle = null; this._totalDis = {}; this._points = []; this._paths = []; this._dots = []; this._segDistance = []; this._overlays = []; this._units = { metric: { name: "metric", conv: 1, incon: 1000, u1: "米", u2: "公里" }, us: { name: "us", conv: 3.2808, incon: 5279.856, u1: "英尺", u2: "英里" } }; if (!this._units[this._opts.unit]) { this._opts.unit = "metric" } this._dLineColor = "#ff6319"; this._dLineStroke = 3; this._dOpacity = 0.8; this._dLineStyle = "solid"; this._dCursor = u.distCursor; if (this._opts.showResult) { this._opts.followText = "单击确定起点" } this._followTextM = "单击确定地点，双击结束"; this._sectionMarkerTip = "单击可删除此点，拖拽可调整位置"; this._movingTimerId = null; if (this._opts.showResult) { this.text = "测距" } else { this.text = "绘线" } this._isOpen = false; var e = this; f8.load("tools", function () { e._draw() }) } bV.inherits(bE, "PolylineTItem"); ej.extend(bV.prototype, { setLineColor: function (e) { this._opts.lineColor = e }, setLineStroke: function (e) { if (Math.round(e) > 0) { this._opts.lineStroke = Math.round(e) } }, setOpacity: function (e) { if (e >= 0 && e <= 1) { this._opts.opacity = e } }, setLineStyle: function (e) { if (e === "solid" || e === "dashed") { this._opts.lineStyle = e } }, clear: function () { for (var T = 0, e = this._overlays.length; T < e; T++) { if (this._overlays[T]) { this._map.removeOverlay(this._overlays[T]) } } this._overlays.length = 0; for (var T = 0, e = this._dots.length; T < e; T++) { if (this._dots[T] && this._dots[T].parentNode) { this._dots[T].parentNode.removeChild(this._dots[T]) } } this._dots.length = 0 }, setCursor: function (e) { if (this._opts.showResult === true) { return } this._opts.cursor = e }, getCursor: function () { if (this._opts.showResult === true) { return this._dCursor } var e = this._opts.cursor.match(/^url\((.+)\)(,.*)?/); if (e !== null) { return e[1] } else { return this._opts.cursor } }, showResult: function (e) { this._opts.showResult = !!e } }); function bp() { var iW = 3; var i3 = 256; var iV = Math.pow(2, 18 - iW) * i3; var i4 = 2; var i2 = (i4 + 1) * iV; var T = hZ.convertLL2MC(new b8(180, 0)); var i0 = T.lng; var iY = i2 - i0; var i1 = -3; var e = i1 * iV; var iX = hZ.convertLL2MC(new b8(-180, 0)); var iZ = iX.lng; var i = iZ - e; this._validPixels = i0 / Math.pow(2, 18 - iW); this._mc180X = i0; this._mcM180X = iZ; this._loopOffset = iY + i; this._mcTSpan = i0 - iZ; this._spaceDistance = iY; this._mSpaceDistance = i } bp.prototype = { calcLoopParam: function (iV, i, i2) { i2 = i2 || 256; var iZ = 0; var iW = 3; var iY = 6; var iX = iY * Math.pow(2, (i - iW)) * 256 / i2; var i1 = iX / 2 - 1; var i0 = -iX / 2; while (iV > i1) { iV -= iX; iZ -= this._loopOffset } while (iV < i0) { iV += iX; iZ += this._loopOffset } var e = iZ; iZ = Math.round(iZ / Math.pow(2, 18 - i)); return { offsetX: iZ, geoOffsetX: e, col: iV, T: iX, maxCol: i1, minCol: i0 } }, calcLoopCenterPoint: function (i) { var e = i.lng; while (e > this._mc180X) { e -= this._mcTSpan } while (e < this._mcM180X) { e += this._mcTSpan } i.lng = e; return i }, calcLoopMapBounds: function (T, iV) { var i = iV || T.getCenter(); var e = T.sw.lng; var iW = T.ne.lng; while (i.lng > this._mc180X) { i.lng -= this._mcTSpan; e -= this._mcTSpan; iW -= this._mcTSpan } while (i.lng < this._mcM180X) { i.lng += this._mcTSpan; e += this._mcTSpan; iW += this._mcTSpan } T.sw.lng = e; T.ne.lng = iW; if (T.pointBottomLeft) { T.pointBottomLeft = this.calcLoopCenterPoint(T.pointBottomLeft); T.pointTopLeft = this.calcLoopCenterPoint(T.pointTopLeft); T.pointTopRight = this.calcLoopCenterPoint(T.pointTopRight); T.pointBottomRight = this.calcLoopCenterPoint(T.pointBottomRight) } return T }, calcLoopTiles: function (i3, e, i7, i0) { i7 = i7 || 256; var iW = i0 || Math.pow(2, 18 - e) * i7; var i2 = Math.floor(this._mc180X / iW); var iY = Math.floor(this._mcM180X / iW); var i4 = Math.floor(this._loopOffset / iW); var i5 = []; for (var iZ = 0; iZ < i3.length; iZ++) { var i6 = i3[iZ]; var iV = i6[0]; var i8 = i6[1]; if (iV >= i2) { var i1 = iV + i4; if (this.isTileBlank(i1, e, i7) === true) { continue } var T = "id_" + i1 + "_" + i8 + "_" + e; if (!i3[T]) { i3[T] = true; i5.push([i1, i8, e, 0]) } } else { if (iV <= iY) { var i1 = iV - i4; if (this.isTileBlank(i1, e, i7) === true) { continue } var T = "id_" + i1 + "_" + i8 + "_" + e; if (!i3[T]) { i3[T] = true; i5.push([i1, i8, e, 0]) } } } } for (var iZ = 0, iX = i5.length; iZ < iX; iZ++) { i3.push(i5[iZ]) } for (var iZ = i3.length - 1; iZ >= 0; iZ--) { var iV = i3[iZ][0]; if (this.isTileBlank(iV, e, i7)) { i3.splice(iZ, 1) } } return i3 }, isTileBlank: function (T, iW, e) { var iX = Math.pow(2, iW - 3); var i = Math.round(this._validPixels * iX); var iV = 6 * iX * 256 / e; while (T > iV / 2 - 1) { T -= iV } while (T < -(iV / 2)) { T += iV } if (T > 0 && T * e > i) { return true } if (T < 0 && Math.abs((T + 1) * e) > i) { return true } return false }, isAddWidth: function (e, i) { return e < this._mcM180X || i > this._mc180X }, pixelWidth: function (e, i) { if (e < 0) { e = -e } return Math.abs(e - this._mc180X) / (Math.pow(2, 18 - i)) }, getSpaceDistanceInPixel: function (i) { var e = Math.round((this._spaceDistance + this._mSpaceDistance) / Math.pow(2, 18 - i)); return e } }; var em = new bp(); var io = (function () { var i = true; var iW = 256; var e = true; var iY = iB("ditu", "normalTraffic"); var iV = iY.udt; var iZ = "//its.map.baidu.com/traffic/"; var iX = [[2, "79,210,125,1", 3, 2, 0, [], 0, 0], [2, "79,210,125,1", 3, 2, 0, [], 0, 0], [2, "79,210,125,1", 4, 2, 0, [], 0, 0], [2, "79,210,125,1", 5, 2, 0, [], 0, 0], [2, "79,210,125,1", 6, 2, 0, [], 0, 0], [2, "255,208,69,1", 3, 2, 0, [], 0, 0], [2, "255,208,69,1", 3, 2, 0, [], 0, 0], [2, "255,208,69,1", 4, 2, 0, [], 0, 0], [2, "255,208,69,1", 5, 2, 0, [], 0, 0], [2, "255,208,69,1", 6, 2, 0, [], 0, 0], [2, "232,14,14,1", 3, 2, 0, [], 0, 0], [2, "232,14,14,1", 3, 2, 0, [], 0, 0], [2, "232,14,14,1", 4, 2, 0, [], 0, 0], [2, "232,14,14,1", 5, 2, 0, [], 0, 0], [2, "232,14,14,1", 6, 2, 0, [], 0, 0], [2, "181,0,0,1", 3, 2, 0, [], 0, 0], [2, "181,0,0,1", 3, 2, 0, [], 0, 0], [2, "181,0,0,1", 4, 2, 0, [], 0, 0], [2, "181,0,0,1", 5, 2, 0, [], 0, 0], [2, "181,0,0,1", 6, 2, 0, [], 0, 0], [2, "255,255,255,1", 4, 0, 0, [], 0, 0], [2, "255,255,255,1", 5.5, 0, 0, [], 0, 0], [2, "255,255,255,1", 7, 0, 0, [], 0, 0], [2, "255,255,255,1", 8.5, 0, 0, [], 0, 0], [2, "255,255,255,1", 10, 0, 0, [], 0, 0]]; var T = new gy({ transparentPng: true, dataType: 2, cacheSize: 256, clipTile: true, isFlat: true }); T.zIndex = 2; T.getTilesUrl = function (i2, i3) { if (!i2 || i3 < 7) { return null } var i1 = i2.x; var i4 = i2.y; var i0 = iZ + "TrafficTileService?level=" + i3 + "&x=" + i1 + "&y=" + i4 + "&time=" + (+new Date()); if (this.map.getRenderType() === "webgl") { i0 = iZ + "?qt=vtraffic&z=" + i3 + "&x=" + i1 + "&y=" + i4 + "&udt=" + iV } return i0 }; T.setColors = function (i0) { for (var i3 = 0; i3 < iX.length; i3++) { var i2 = Math.floor(i3 / 5); var i1 = i0[i2]; if (i1) { if (Object.prototype.toString.call(i1) === "[object String]") { i1 = gC.parseCSSColor(i1) } iX[i3][1] = [i1[0], i1[1], i1[2], i1[3] / 255].join(",") } } }; T.setEdge = function (i0) { e = !!i0 }; T.processData = function (i3) { var i7 = i3.content; var i5 = 10; if (typeof i3.precision === "number") { i5 = i3.precision * 10 } var je = { road: [[], []] }; if (!i7) { return je } var jc = i7.tf; if (!jc) { return je } for (var i4 = 0; i4 < jc.length; i4++) { var jd = jc[i4][1]; var jb = []; var i9 = 0; var i8 = 0; var ja = iX[jc[i4][3]]; for (var i2 = 0, i0 = jd.length; i2 < i0 / 2; i2++) { i9 += jd[i2 * 2] / i5; i8 += jd[i2 * 2 + 1] / i5; jb.push(i9, 256 - i8) } var i1 = ja[1].split(","); i1[3] = i1[3] * 255; var i6 = ja[2] / 2; if (e) { je.road[0].push([jb, 1, 2, [255, 255, 255, 255], i6 + 2]) } je.road[1].push([jb, 1, 2, i1, i6]) } return je }; return T })(); function dp(e) { dX.call(this); e = e || {}; this._opts = {}; this._opts.districts = e.name || ""; this._opts.kind = e.kind || 0; this._config = {}; this._config.strokeColor = e.strokeColor || "#00f"; this._config.strokeOpacity = typeof e.strokeOpacity === "number" ? e.strokeOpacity : 1; bR(this._config.strokeOpacity, 0, 1); this._config.fillColor = e.fillColor || "#ff0"; this._config.fillOpacity = typeof e.fillOpacity === "number" ? e.fillOpacity : 0.6; bR(this._config.fillOpacity, 0, 1); this._config.strokeWeight = e.strokeWeight || 1; this._config.viewport = e.viewport || false; this.disOverlays = []; this.eventAndCallback = {}; var i = this; f8.load("layer", function () { i._asyncSearch() }) } dp.inherits(cD, "DistrictLayer"); ej.extend(dp.prototype, { initialize: function (e) { this._map = e; this.addDistrict() }, removeDistrict: function (i, e) { this._map = i; this.deleteDistrict(e) }, toString: function () { return "DistrictLayer" } }); var iK = function (i) { var i = i || {}; const iW = i.transform || { source: "EPSG3857", target: "BD09MC" }; const iV = i.tileUrlTemplate || ""; const iZ = i.xTemplate || function (i6, i8, i7) { return i6 }; const i3 = i.yTemplate || (i.tms ? function (i6, i8, i7) { return Math.pow(2, i7) - i8 - 1 } : function (i6, i8, i7) { return i8 }); const iY = i.zTemplate || function (i6, i8, i7) { return i7 }; const i2 = i.bTemplate || function (i6, i9, i8) { const i7 = c3.getTileRangeExtent([i8, i6, i9]); return i7.minX + "," + i7.minY + "," + i7.maxX + "," + i7.maxY }; var i4 = i.extent || []; const iX = i.extentCRSIsWGS84 || false; var T = i.minZoom || 0; var i1 = i.maxZoom || 23; var i0 = true; var i5 = new gy({ transform: iW, transparentPng: i0, dataType: 1, tileTypeName: "xyz", cacheSize: 256, customLayer: true, clipTile: false, boundary: i.boundary || false, useThumbData: i.useThumbData || false }); i5.zIndex = 2; (i4.length === 4) && iX && (i4 = c3.fromEPSG4326(i4)); i5.getTilesUrl = function (i7, jd, jb) { if (!i7 || jd < 0 || jd < T || jd > i1) { i5.tileCache.clear(); return null } if (iW.source !== "BD09MC") { i7.x = c3.getTilesLoop(jd, i7.x) } var jc = c3.getTileRangeExtent([jd, i7.x, i7.y]); var ja = e([jc.minX, jc.minY, jc.maxX, jc.maxY]); if (!ja) { return null } var i8 = ""; if (iV) { i8 = iV; var i9 = /[^\{}]*\{(.*)\}[^\}]*/; i8.match(i9); var i6 = []; if (RegExp.$1) { i6 = RegExp.$1.split(",") } i8 = i8.replace(/\{(.*)\}/, i6[(i7.x + i7.y) % i6.length]); i8 = i8.replace(/\[x\]/gi, iZ(i7.x, i7.y, jd)); i8 = i8.replace(/\[y\]/gi, i3(i7.x, i7.y, jd)); i8 = i8.replace(/\[z\]/gi, iY(i7.x, i7.y, jd)); i8 = i8.replace(/\[b\]/gi, i2(i7.x, i7.y, jd)) } else { return null } return i8 }; function e(i6) { if (i4 && i4 instanceof Array && i4.length === 4) { if ((i4[0] <= i6[2] && i4[1] <= i6[3]) && (i4[2] >= i6[0] && i4[3] >= i6[1])) { return true } else { return false } } return true } return i5 }; var L = function (e) { var e = e || {}; this.inputCRS = e.inputCRS || "EPSG3857"; this.outCRS = e.outCRS || "EPSG3857"; this.minZoom = e.minZoom || 3; this.maxZoom = e.maxZoom || 19; this.retry = e.retry || false; this.retryTime = e.retryTime || 600; this.useThumbData = e.useThumbData || true; this.lastZoom = 3; this.cacheSize = e.cacheSize || 128; this.tileType = g1.getInstance("web"); this._mapCenter = {}; this._featureMgr = [[], [], []]; this._gridRefs = { row: {}, col: {} }; this.tileCache = new ao(this.cacheSize, { clearCallback: function (i) { } }) }; L.inherits(cD, "BaiduLayer"); ej.extend(L.prototype, { fetch: function (i, iV, iW) { var iV = Math.ceil(iV) || 3; var i = i || []; if (i.length !== 4 || iV > 19) { iW(null); return } var e = this.getZoomState(iV); var T = this.calCoord(i, iV, e); this.curViewTilesInfo = this.calTilesOrders(T.sw, T.ne, iV); this.clearData(); this.clearRefs(); this.loadLayerData(this.curViewTilesInfo, e, true, iW) }, calCoord: function (T, iV, i) { if (T.length !== 4) { return } var e = gcoord.transform([T[0], T[1]], gcoord[this.inputCRS], gcoord.BD09MC); var iW = gcoord.transform([T[2], T[3]], gcoord[this.inputCRS], gcoord.BD09MC); if (iW[1] > 19505879.362428114 || e[1] < -15949096.637571886) { iW[1] = 19505879.362428114; e[1] = -15949096.637571886 } this._mapCenter[iV] = new b8((e[0] + iW[0]) / 2, (e[1] + iW[1]) / 2); return { sw: e, ne: iW } }, calTilesOrders: function (i0, i6, i2) { var i3 = this.tileType.getMercatorSize(i2, i2); var iY = [Math.floor(i0[0] / i3), Math.floor(i0[1] / i3)]; var i = [Math.floor(i6[0] / i3), Math.floor(i6[1] / i3)]; var iZ = iY[0] - 1; var iX = i[0] + 2; var iW = iY[1] - 1; var i5 = i[1] + 2; var i1 = []; for (var iV = iZ; iV < iX; iV++) { for (var i4 = iW; i4 < i5; i4++) { var T = { col: iV, row: i4, zoom: i2, useZoom: i2, tileTypeName: "web", loopOffsetX: 0, tileSize: 256, baseTileSize: 256, mercatorSize: i3, combine: false, dataIndex: 256 }; i1.push(T); var e = "id_" + iV + "_" + i4 + "_" + i2; i1[e] = true } } i1.sort((function (i7) { return function (i8, i9) { return ((0.4 * Math.abs(i8.col - i7[0]) + 0.6 * Math.abs(i8.row - i7[1])) - (0.4 * Math.abs(i9.col - i7[0]) + 0.6 * Math.abs(i9.row - i7[1]))) } })([(iZ + iX) / 2, (iW + i5) / 2])); i1.zoom = i2; i1.tileTypeName = "web"; return i1 }, getZoomState: function (i) { var e = i - this.lastZoom; if (e > 0) { this.zoomState = 1 } else { if (e < 0) { this.zoomState = -1 } } this.lastZoom = i; return this.zoomState || 0 }, loadLayerData: function (i2, iV, iW, i1) { this.thumbCache = {}; if (iW) { for (var iZ = 0, iX = i2.length; iZ < iX; iZ++) { var T = i2[iZ]; var iY = this.getTileKey(T); var e = this.tileCache.getData(iY); if (e && e.status === "ready") { e.key = iY; this.setData(e, 2) } else { if (this.useThumbData) { iV === 1 && this.setThumbData(T.col, T.row, T.zoom, T.useZoom, iV) } } } this.calOutData(i1) } for (var iZ = 0, iX = i2.length; iZ < iX; iZ++) { var T = i2[iZ]; var iY = this.getTileKey(T); var e = this.tileCache.getData(iY); if (!e) { this.tileCache.setData(iY, {}); var i0 = this; this.loadRasterTileData(T, function (i, i3) { i0.rasterTileDataCbk(i, i3, i1) }) } } }, loadRasterTileData: function (i, e) { var T = new Image(); var iW = i.col; var iZ = i.row; var iX = i.zoom; var iV = this.getTilesUrl(new eB(iW, iZ), iX); if (!iV) { return } var iY = this.getTileKey(i); T = this.loadTileImage(iV, i, iY, e); T.tileInfo = i }, loadTileImage: function (iZ, e, T, iX) { var iV = new Image(); iV.crossOrigin = "anonymous"; var iY = this; var iW; function i0() { if (iY.retry) { iW && clearInterval(iW); iW = null } } if (this.retry) { var i = 1; iW = setInterval(function () { if (i > 3) { i0(); return } var i1 = iY.getTilesUrl(new eB(e.col, e.row), e.zoom, i); iV.src = i1; i++ }, this.retryTime) } iV.onload = function () { i0(); iX && iX(this, T) }; iV.onerror = function () { i0(); iX && iX(null, T) }; iV.src = iZ; return iV }, rasterTileDataCbk: function (iW, iV, iZ) { if (!iW || typeof iW === "string") { this.tileCache.removeData(iV); return } var i = iW.tileInfo; var T = i.col; var i1 = i.row; var i0 = i.zoom; var e = this.tileCache.getData(iV); if (!e) { return } e.textureSource = iW; e.dataType = fO; e.tileInfo = i; e.status = "ready"; this.tileCache.setData(iV, e); var iX = "id_" + T + "_" + i1 + "_" + i0; var iY = false; if (this.curViewTilesInfo[iX]) { e.png8 = this.png8 || false; e.key = iV; this.setData(e, 2); iY = true } if (iY) { this.calOutData(iZ, e) } }, getTilesUrl: function (iW, i3, i) { var iY = i || 0; var T = iW.x; var i4 = iW.y; var i0 = iB("ditu", "normal"); var iZ = i0.udt; var i2 = dG.B_NORMAL_MAP.tileUrls; var iX = Math.abs(T + i4 + iY) % i2.length; var i1 = i2[iX]; if (T < 0) { T = "M" + (-T) } if (i4 < 0) { i4 = "M" + (-i4) } var iV = "x=" + T + "&y=" + i4 + "&z=" + Math.floor(i3); iV += "&styles=pl&scaler=2&udt=" + iZ + "&from=jsapi3_0"; var e = i1 + "?qt=vtile&" + iV; return e }, calOutData: function (i1, T) { if (!T) { for (var iY = 0; iY < this._featureMgr.length; iY++) { var e = this._featureMgr[iY]; for (var iW = 0; iW < e.length; iW++) { var iV = e[iW].tileInfo; if (iY === 2) { var iZ = e[iW].extent; if (iZ) { this.addRefs(iZ, iV.col, iV.row) } else { var i0 = this.calBoxCoord(iV); if (!i0) { continue } e[iW].extent = this.findRefs(i0, iV.col, iV.row) } } } } i1({ size: this.curViewTilesInfo.length, zoom: this.lastZoom, data: this._featureMgr }) } else { var iX = this.calBoxCoord(T.tileInfo); if (!iX) { return } T.extent = this.findRefs(iX, T.tileInfo.col, T.tileInfo.row); i1({ zoom: this.lastZoom, size: this.curViewTilesInfo.length, data: [[], [], [T]] }) } }, calOutData_back: function (i3, iV) { if (!iV) { var iX; var i4; var i1; for (var iZ = 0; iZ < this._featureMgr.length; iZ++) { var T = this._featureMgr[iZ]; for (var iY = 0; iY < T.length; iY++) { var iW = T[iY].tileInfo; if (iZ === 2) { if (iY === 0) { var i0 = this.calBoxCoord(iW); T[0].extent = i0; iX = T[0]; i4 = i0[2] - i0[0]; i1 = i0[3] - i0[1] } else { if (iX && i4 && i1) { var e = (iW.row - iX.tileInfo.row) * i1; var i2 = (iW.col - iX.tileInfo.col) * i4; var i0 = iX.extent; T[iY].extent = [i0[0] + i2, i0[1] + e, i0[2] + i2, i0[3] + e] } } } else { var i0 = this.calBoxCoord(iW); T[iY].extent = i0 } } } i3({ size: this.curViewTilesInfo.length, zoom: this.lastZoom, data: this._featureMgr }) } else { if (this._featureMgr[2].length === 1) { var i0 = this.calBoxCoord(iV.tileInfo); iV.extent = i0; this.featureCell = iV; this.cellW = i0[2] - i0[0]; this.cellH = i0[3] - i0[1] } else { var e = (iV.tileInfo.row - this.featureCell.tileInfo.row) * this.cellH; var i2 = (iV.tileInfo.col - this.featureCell.tileInfo.col) * this.cellW; var i0 = this.featureCell.extent; iV.extent = [i0[0] + i2, i0[1] + e, i0[2] + i2, i0[3] + e] } i3({ zoom: this.lastZoom, size: this.curViewTilesInfo.length, data: [[], [], [iV]] }) } }, calBoxCoord: function (e) { var i = hZ.prototype.tileToBound(e, this._mapCenter[e.zoom]).LL; var T = gcoord.transform([i.sw.lng, i.sw.lat], gcoord.BD09LL, gcoord[this.outCRS]); var iV = gcoord.transform([i.ne.lng, i.ne.lat], gcoord.BD09LL, gcoord[this.outCRS]); return [T[0], T[1], iV[0], iV[1]] }, clearData: function () { this._featureMgr = [[], [], []] }, addRefs: function (i, e, T) { this._gridRefs.row[T] = i[1]; this._gridRefs.row[T + 1] = i[3]; this._gridRefs.col[e] = i[0]; this._gridRefs.col[e + 1] = i[2] }, findRefs: function (i, e, iV) { var T = []; this._gridRefs.row[iV] && (T[1] = this._gridRefs.row[iV]); this._gridRefs.row[iV + 1] && (T[3] = this._gridRefs.row[iV + 1]); this._gridRefs.col[e] && (T[0] = this._gridRefs.col[e]); this._gridRefs.col[e + 1] && (T[2] = this._gridRefs.col[e + 1]); !this._gridRefs.row[iV] && (this._gridRefs.row[iV] = i[1]) && (T[1] = i[1]); !this._gridRefs.row[iV + 1] && (this._gridRefs.row[iV + 1] = i[3]) && (T[3] = i[3]); !this._gridRefs.col[e] && (this._gridRefs.col[e] = i[0]) && (T[0] = i[0]); !this._gridRefs.col[e + 1] && (this._gridRefs.col[e + 1] = i[2]) && (T[2] = i[2]); return T }, clearRefs: function () { this._gridRefs = { row: {}, col: {} } }, destroy: function () { this.tileCache.clear(); this.clearData(); this.clearRefs(); this._mapCenter = {} }, setData: function (iW, T) { var e = this._featureMgr[T]; for (var iV = 0; iV < e.length; iV++) { if (e[iV].key && e[iV].key === iW.key) { e[iV] = iW; return } } e.push(iW) }, getTileKey: function (e, iV) { iV = iV || {}; var i = typeof iV.useZoom === "number" ? iV.useZoom : e.useZoom; var T = "default"; return "web_" + T + "_" + e.col + "_" + e.row + "_" + e.zoom + "_" + i }, setThumbData: function (i, iW, iV, e, T) { if (T === 1) { if (this._findParentZoomTile(i, iW, iV, e, 8) === false) { this._findChildZoomTile(i, iW, iV, e, 3) } } else { if (T === -1) { if (this._findChildZoomTile(i, iW, iV, e, 3) === false) { this._findParentZoomTile(i, iW, iV, e, 8) } } } this.sortThumbData() }, _findParentZoomTile: function (iY, i7, i6, iW, i1) { var iX = "web"; var T = 3; var e = iY; var i4 = i7; var i2 = i6; var i3 = iW; for (var i0 = 1; i0 <= i1; i0++) { var iV = this.tileType.getParentTile(e, i4, i2, i3, T); if (iV === null) { continue } var i5 = this.getTileKey(iV); var iZ = this.tileCache.getData(i5); if (iZ && iZ.status === "ready") { if (this.thumbCache[i5]) { continue } iZ.key = i5; this.setData(iZ, 0); this.thumbCache[i5] = true; return true } e = iV.col; i4 = iV.row; i2 = iV.zoom; i3 = iV.useZoom } return false }, _findChildZoomTile: function (iZ, i1, e, iW, ja) { var i8 = "web"; var i4 = 21; var iY = iZ; var i0 = i1; var i2 = e; var iV = iW; var iX = true; for (var i7 = 1; i7 <= ja; i7++) { var i5 = false; var T = this.tileType.getChildTiles(iY, i0, i2, iV, i4, i7); if (!T) { continue } for (var i6 = 0; i6 < T.length; i6++) { var i3 = this.getTileKey(T[i6]); var i9 = this.tileCache.getData(i3); if (i9 && i9.status === "ready") { if (!this.thumbCache[i3]) { i9.key = i3; this.setData(i9, 1); this.thumbCache[i3] = true } i5 = true } else { iX = false } } if (i5) { break } } return iX }, sortThumbData: function () { var e = this._featureMgr; if (!e) { return } if (e[0] && e[0].length > 0) { e[0].sort(function (T, i) { return T.tileInfo.useZoom - i.tileInfo.useZoom }) } } }); bk.register(function (i) { if (i.config && i.config.isOverviewMap) { return } if (i.isLoaded()) { C(i) } else { i.addEventListener("load", function () { C(this) }) } i.cityName = "中国"; i.cCode = "1"; var e = {}; e.enableRequest = true; e.request = function () { if (e.enableRequest) { e.enableRequest = false; setTimeout(function () { e._request() }, 500) } }; e._request = function () { var iV = i.getBoundsIn(); var iX = i.getZoom(); var T = iV.getSouthWest(); var iW = iV.getNorthEast(); iH.request(function (i1) { if (i1.current_city["code"] >= 9000 && i1.current_city["code"] <= 9378) { i1.current_city["name"] = "台湾省" } if (i1.current_city["code"] >= 20000 && i1.current_city["code"] <= 20499) { i1.current_city["name"] = "新加坡" } if (i1.current_city["code"] >= 20500 && i1.current_city["code"] <= 25999) { i1.current_city["name"] = "泰国" } if (i1.current_city["code"] >= 26000 && i1.current_city["code"] <= 29999) { i1.current_city["name"] = "日本" } if (i1.current_city["code"] >= 30000 && i1.current_city["code"] <= 30999) { i1.current_city["name"] = "韩国" } if (i1.current_city["code"] >= 31000 && i1.current_city["code"] <= 37000) { i1.current_city["name"] = "亚太" } if (i1.current_city["code"] >= 46609 && i1.current_city["code"] <= 52505) { i1.current_city["name"] = "欧洲" } if (i1.current_city["code"] >= 39509 && i1.current_city["code"] <= 53500) { i1.current_city["name"] = "南美洲" } if (i1.current_city["code"] >= 54000 && i1.current_city["code"] <= 70000) { i1.current_city["name"] = "北美洲" } if (i1.current_city["code"] === 54003 && i1.current_city["code"] >= 60731 && i1.current_city["code"] <= 61123) { i1.current_city["name"] = "美国" } if (i1.current_city["code"] === 54015 || i1.current_city["code"] >= 57970 && i1.current_city["code"] <= 60223) { i1.current_city["name"] = "加拿大" } if (i1.current_city["code"] === 54025 || i1.current_city["code"] >= 54338 && i1.current_city["code"] <= 57374) { i1.current_city["name"] = "墨西哥" } e.enableRequest = true; if (i1 && i1.current_city) { var i0 = i1.current_city["name"]; var iZ = i1.current_city["code"]; if (iZ !== i.cCode) { var iY = new eX("oncitychange"); iY.name = i0; iY.code = iZ; i.dispatchEvent(iY) } i.cityName = i0; i.cCode = iZ; if (!bF()) { cy(i) } } }, { qt: "cen", b: T.lng + "," + T.lat + ";" + iW.lng + "," + iW.lat, l: iX }, "", "", true) }; i.addEventListener("load", function (T) { e.request() }); i.addEventListener("moveend", function (T) { e.request() }); i.addEventListener("zoomend", function (T) { e.request() }); e.request() }); function C(i) { if (i.temp.copyadded) { return } i.temp.copyadded = true; if (!i.cpyCtrl) { var iV = new hS(2, 2); i.config.cpyCtrlOffset = iV; if (bF()) { iV.width = 72; iV.height = 0 } var T = new fj({ offset: iV, printable: true }); i.cpyCtrl = T } if (!bF()) { cy(i); i.addEventListener("maptypechange", function () { cy(i) }) } i.addControl(T); var e = new bn(); e._opts = { printable: true }; i.logoCtrl = e; i.addControl(e); i.addEventListener("resize", function () { if (this.getSize().width >= 300 && i.getSize().height >= 100) { e.show(); T.setOffset(i.config.cpyCtrlOffset) } else { e.hide(); T.setOffset(new hS(4, 2)) } }); if (i.getSize().width >= 300 && i.getSize().height >= 100) { e.show() } else { e.hide(); T.setOffset(new hS(4, 2)) } i.addEventListener("oncopyrightoffsetchange", function (iW) { i.logoCtrl.setOffset(iW.target.logo); i.cpyCtrl.setOffset(iW.target.cpy) }); i.dispatchEvent(new eX("oncopyrightaddend")) } function cy(ja) { if (!ja.cpyCtrl) { var ji = new hS(2, 2); if (bF()) { ji.width = 72; ji.height = 0 } var jd = new fj({ offset: ji, printable: true }); ja.cpyCtrl = jd } var jr = ja.cityName || "中国"; var jb = ja.getMapType(); var jc = ["常州市", "南昌市", "乌鲁木齐市", "无锡市", "福州市", "泉州市", "珠海市", "贵阳市"]; var i4 = ["北京市", "上海市", "广州市", "深圳市", "宁波市", "石家庄市", "沈阳市", "长春市", "青岛市", "温州市", "台州市", "金华市", "佛山市", "中山市", "昆明市", "南宁市", "苏州市", "西安市", "济南市", "郑州市", "合肥市", "呼和浩特市", "杭州市", "成都市", "武汉市", "长沙市", "天津市", "南京市", "重庆市", "大连市", "东莞市", "厦门市"]; var i6 = ["香港特别行政区"]; var i0 = ["台湾省"]; var jj = ["日本"]; var jp = ["韩国"]; var je = ["泰国"]; var jh = ["亚太"]; var i1 = ["新加坡"]; var jq = ["欧洲"]; var iV = ["南美洲"]; var jm = ["北美洲"]; var T = ["美国"]; var jg = ["墨西哥"]; var iY = ["加拿大"]; for (var jn in jc) { if (jc[jn] === jr) { var i7 = true; break } } for (var jn in i4) { if (i4[jn] === jr) { var iW = true; break } } for (var jn in i6) { if (i6[jn] === jr) { var jt = true; break } } if (i0[0] === jr) { var jl = true } if (i1[0] === jr) { var i = true } if (jj[0] === jr) { var i3 = true } if (jp[0] === jr) { var i9 = true } if (je[0] === jr) { var i8 = true } if (jh[0] === jr) { var iZ = true } if (jq[0] === jr) { var i5 = true } if (iV[0] === jr) { var i2 = true } if (jm[0] === jr) { var e = true } if (T[0] === jr) { var jo = true } if (iY[0] === jr) { var jk = true } if (jg[0] === jr) { var iX = true } var js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "]; var jf = "rgba(255, 255, 255, 0.701961)"; if (ja.getZoom() <= 9) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } else { if (jl) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } else { if (i3 || i9) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } else { if (i || i8) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } else { if (iZ) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } else { if (i5) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } else { if (i2) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } else { if (e) { js = ["&copy;&nbsp;2022 Baidu - GS(2021)6026号 - 甲测资字11111342 - 京ICP证030173号 - Data &copy; "] } } } } } } } } if (ja.getZoom() <= 9) { js.push("长地万方"); js.push(' &amp; <a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); js.push(' &amp; <a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); if (jb === BMAP_SATELLITE_MAP || jb === BMAP_HYBRID_MAP) { js.push(' &amp; <a target="_blank" href="http://www.eso.org/public/">ESO</a>'); jf = "rgba(0,0,0,.7)" } } else { if (i3 || i9) { js.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>') } else { if (i || i8) { js.push('<a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>') } else { if (iZ) { js.push('<a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); js.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (i5) { js.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); js.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (i2) { js.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); js.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (jo || iX || jk) { js.push('<a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); js.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (e) { js.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); js.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { js.push("长地万方"); if (i7) { js.push(' &amp; <a target="_blank" href="http://www.palmcity.cn/palmcity/">PalmCity</a>') } if (jt) { js.push(' &amp; <a target="_blank" href="http://www.mapking.com/HongKong/eng/home/MapKing_Webmap.html">MapKing</a>') } if (jl) { js.push(' &amp; <a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); js.push(' &amp; <a target="_blank" href="http://www.localking.com.tw/about/localking.aspx">樂客LocalKing</a>') } if (jb === BMAP_SATELLITE_MAP || jb === BMAP_HYBRID_MAP) { jf = "rgba(0,0,0,.7)" } } } } } } } } } js.unshift('<span style="background: ' + jf + ';padding: 0px 1px;line-height: 16px;display: inline;height: 16px;">'); js.push("</span>"); js = js.join(""); ja.cpyCtrl.addCopyright({ id: 1, content: js }) } window.BMAP_STATUS_SUCCESS = 0; window.BMAP_STATUS_CITY_LIST = 1; window.BMAP_STATUS_UNKNOWN_LOCATION = 2; window.BMAP_STATUS_UNKNOWN_ROUTE = 3; window.BMAP_STATUS_INVALID_KEY = 4; window.BMAP_STATUS_INVALID_REQUEST = 5; window.BMAP_STATUS_PERMISSION_DENIED = 6; window.BMAP_STATUS_SERVICE_UNAVAILABLE = 7; window.BMAP_STATUS_TIMEOUT = 8; window.BMAP_ROUTE_TYPE_WALKING = 2; window.BMAP_ROUTE_TYPE_DRIVING = 3; window.BMAP_ROUTE_TYPE_RIDING = 6; window.BMAP_ROUTE_STATUS_NORMAL = 0; window.BMAP_ROUTE_STATUS_EMPTY = 1; window.BMAP_ROUTE_STATUS_ADDRESS = 2; var cK = "cur"; var Q = "cen"; var B = "s"; var c0 = "con"; var cT = "bd"; var cp = "nb"; var f5 = "bt"; var aA = "nav"; var g9 = "walk"; var e4 = "gc"; var dl = "rgc"; var D = "dec"; var fR = "bse"; var fq = "nse"; var cH = "bl"; var dK = "bsl"; var e2 = "bda"; var dH = "sa"; var aV = "nba"; var he = "drag"; var hT = "ext"; var ip = "exts"; var it = "hip"; var gA = "ride"; var iF = "drct"; var eH = 2; var a1 = 4; var fb = 7; var hf = 11; var bO = 12; var ee = 14; var cm = 15; var dy = 18; var ap = 20; var aU = 21; var A = 19; var a = 23; var hx = 26; var aq = 28; var fr = 31; var er = 35; var hm = 44; var aZ = 45; var am = 46; var im = 47; var fv = -1; var aX = 0; var bj = 1; var hX = 2; var dc = 3; window.BMAP_POI_TYPE_NORMAL = 0; var cb = 1; var hh = 2; BMapGL.I = ej.I; var bt = {}; bt.removeHtml = function (e) { e = e.replace(/<\/?[^>]*>/g, ""); e = e.replace(/[ | ]* /g, " "); return e }; bt.parseGeoExtReg1 = function (e) { return e.replace(/([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0|[1-9]\d*),([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0|[1-9]\d*)(,)/g, "$1,$2;") }; bt.parseGeoExtReg2 = function (i, e) { var T = new RegExp("(((-?\\d+)(\\.\\d+)?),((-?\\d+)(\\.\\d+)?);)(((-?\\d+)(\\.\\d+)?),((-?\\d+)(\\.\\d+)?);){" + e + "}", "ig"); return i.replace(T, "$1") }; var c6 = 0; var cJ = 1; var K = 2; bt.unique = function (T) { var iX = false; var iW = []; var iY = {}; for (var iV = 0, e = T.length; iV < e; iV++) { if (!iY[T[iV]]) { iY[T[iV]] = true; iW.push(T[iV]) } } return iW }; bt.getBestLevel = function (T, i) { if (i) { var e = Math.min(i.width / 1100, i.height / 660); T = Math.round(T + (Math.log(e) / Math.log(2))) } if (T < 1) { T = 1 } if (T > 21) { T = 21 } return T }; bt.parseGeo = function (iY, i1) { if (typeof iY != "string" || !iY) { return } var i3 = iY.split("|"); var e; var iW; var T; if (i3.length == 1) { e = bJ(iY) } else { e = bJ(i3[2]); iW = bJ(i3[0]); T = bJ(i3[1]); if (!i1) { return e } } var iZ = { type: e.geoType }; if (i1) { switch (iZ.type) { case K: var i0 = new b8(e.geo[0][0], e.geo[0][1]); var i2 = hZ.convertMC2LL(i0); iZ.point = i2; iZ.points = [i2]; break; case cJ: iZ.points = []; var i4 = e.geo[0]; for (var iX = 0, iV = i4.length - 1; iX < iV; iX += 2) { var i5 = new b8(i4[iX], i4[iX + 1]); i5 = hZ.convertMC2LL(i5); iZ.points.push(i5) } iW = new b8(iW.geo[0][0], iW.geo[0][1]); T = new b8(T.geo[0][0], T.geo[0][1]); iW = hZ.convertMC2LL(iW); T = hZ.convertMC2LL(T); iZ.bounds = new g0(iW, T); break; default: break } } return iZ }; bt.parseGeoExt = function (je, i5) { if (!i5) { i5 = 0 } else { if (i5 < 0.25) { i5 = 0 } else { if (i5 > 0.25 && i5 < 1) { i5 = 1 } else { if (i5 > 32) { i5 = 32 } } } } var i0 = je.split("|"); if (i0.length == 1) { var iV = bJ(i0[0]); return { type: iV.type, bound: "", points: iV.geo.join(",") } } else { if (i0.length > 1) { var i6 = je.split(";.="); var i2 = []; var iW = []; var i7 = 0; var jb = i6.length; for (var i8 = 0; i8 < jb; i8++) { var jd = i6[i8]; if (jb > 1) { if (i8 == 0) { jd = jd + ";" } if (i8 > 0 && i8 < jb - 1) { jd = ".=" + jd + ";" } if (i8 == jb - 1) { jd = ".=" + jd } } var iX = jd.split("|"); var ja = bJ(iX[0]); var i9 = bJ(iX[1]); i2.push(ja.geo.join(",")); i2.push(i9.geo.join(",")); var iV = bJ(iX[2]); i7 = iV.type; var jc = iV.geo.join(","); jc = bt.parseGeoExtReg1(jc); if (i5 > 0) { jc = bt.parseGeoExtReg2(jc, i5) } iW.push(jc) } if (jb <= 1) { iW = iW.join(";") } if (jb == 2) { var T = iW[0] + ";" + iW[1]; var iY = T.split(";"); var e = []; for (var i8 = 0; i8 < iY.length; i8++) { var i1 = iY[i8].split(",")[0]; var iZ = iY[i8].split(",")[1]; var i3 = new b8(i1, iZ); var i4 = hZ.convertMC2LL(i3); e.push(i4) } iW = e } return { type: i7, bound: i2.join(";"), points: iW } } } }; bt.getPoiPoint = function (e) { var T = []; var i = null; if (e.toString() == "Point") { i = e } else { if (typeof e == "string") { T = ej.trim(e).split(","); if (T.length < 2) { return } T[0] = parseFloat(ej.trim(T[0])); T[1] = parseFloat(ej.trim(T[1])) } else { T = e.slice(0); if (T.length < 2) { return } } i = new BMap.Point(T[0], T[1]) } return i }; bt.parseGeoStr = function (T) { var i = T.split(","); var e = new b8(i[0], i[1]); return hZ.convertMC2LL(e) }; bt.level = { country: 4, province: 11, city: 12, area: 13 }; var gg = ["=", ".", "-", "*"]; var cE = 1 << 23; function bJ(i1) { var i0 = gW(i1.charAt(0)); var T = i1.substr(1); var i3 = 0; var e = T.length; var i4 = []; var iY = []; var iZ = []; while (i3 < e) { if (T.charAt(i3) == gg[0]) { if ((e - i3) < 13) { return 0 } iZ = dx(T.substr(i3, 13), i4); if (iZ < 0) { return 0 } i3 += 13 } else { if (T.charAt(i3) == ";") { iY.push(i4.slice(0)); i4.length = 0; ++i3 } else { if ((e - i3) < 8) { return 0 } iZ = bU(T.substr(i3, 8), i4); if (iZ < 0) { return 0 } i3 += 8 } } } for (var iX = 0, iV = iY.length; iX < iV; iX++) { for (var iW = 0, i2 = iY[iX].length; iW < i2; iW++) { iY[iX][iW] /= 100 } } return { geoType: i0, geo: iY } } function gW(i) { var e = -1; if (i == gg[1]) { e = K } else { if (i == gg[2]) { e = cJ } else { if (i == gg[3]) { e = c6 } } } return e } function dx(iW, T) { var e = 0; var iY = 0; var iX = 0; for (var iV = 0; iV < 6; iV++) { iX = cZ(iW.substr(1 + iV, 1)); if (iX < 0) { return -1 - iV } e += iX << (6 * iV); iX = cZ(iW.substr(7 + iV, 1)); if (iX < 0) { return -7 - iV } iY += iX << (6 * iV) } T.push(e); T.push(iY); return 0 } function bU(iX, iV) { var T = iV.length; if (T < 2) { return -1 } var e = 0; var iZ = 0; var iY = 0; for (var iW = 0; iW < 4; iW++) { iY = cZ(iX.substr(iW, 1)); if (iY < 0) { return -1 - iW } e += iY << (6 * iW); iY = cZ(iX.substr(4 + iW, 1)); if (iY < 0) { return -5 - iW } iZ += iY << (6 * iW) } if (e > cE) { e = cE - e } if (iZ > cE) { iZ = cE - iZ } iV.push(iV[T - 2] + e); iV.push(iV[T - 1] + iZ); return 0 } function cZ(i) { var e = i.charCodeAt(0); if (i >= "A" && i <= "Z") { return e - "A".charCodeAt(0) } else { if (i >= "a" && i <= "z") { return (26 + e - "a".charCodeAt(0)) } else { if (i >= "0" && i <= "9") { return (52 + e - "0".charCodeAt(0)) } else { if (i == "+") { return 62 } else { if (i == "/") { return 63 } } } } } return -1 } bt.pathToPoints = function (iX) { var iV = []; if (typeof iX !== "string") { return iV } else { var iW = iX.split(";"); for (var T = 0; T < iW.length; T++) { var e = iW[T].split(","); iV.push(new b8(e[0], e[1])) } } return iV }; window.BMAP_POI_TYPE_NORMAL = 0; window.BMAP_POI_TYPE_BUSSTOP = 1; window.BMAP_POI_TYPE_BUSLINE = 2; window.BMAP_POI_TYPE_SUBSTOP = 3; window.BMAP_POI_TYPE_SUBLINE = 4; var I = 0; var gF = 1; var eT = {}; window.APIPack = eT; function av(i, e) { cD.call(this); this._loc = {}; this.setLocation(i); e = e || {}; e.renderOptions = e.renderOptions || {}; this._opts = { renderOptions: { panel: e.renderOptions.panel || null, map: e.renderOptions.map || null, autoViewport: e.renderOptions.autoViewport || true, selectFirstResult: e.renderOptions.selectFirstResult, highlightMode: e.renderOptions.highlightMode, enableDragging: e.renderOptions.enableDragging || false }, onSearchComplete: e.onSearchComplete || function () { }, onMarkersSet: e.onMarkersSet || function () { }, onInfoHtmlSet: e.onInfoHtmlSet || function () { }, onResultsHtmlSet: e.onResultsHtmlSet || function () { }, onGetBusListComplete: e.onGetBusListComplete || function () { }, onGetBusLineComplete: e.onGetBusLineComplete || function () { }, onBusListHtmlSet: e.onBusListHtmlSet || function () { }, onBusLineHtmlSet: e.onBusLineHtmlSet || function () { }, onPolylinesSet: e.onPolylinesSet || function () { }, reqFrom: e.reqFrom || "" }; if (typeof e != "undefined" && typeof e.renderOptions != "undefined" && typeof e.renderOptions["autoViewport"] != "undefined") { this._opts.renderOptions.autoViewport = e.renderOptions["autoViewport"] } else { this._opts.renderOptions.autoViewport = true } this._opts.renderOptions.panel = ej.G(this._opts.renderOptions.panel) } av.inherits(cD, "BaseSearch"); ej.extend(av.prototype, { getResults: function () { if (!this._isMultiKey) { return this._results } else { return this._arrResults } }, enableAutoViewport: function () { this._opts.renderOptions.autoViewport = true }, disableAutoViewport: function () { this._opts.renderOptions.autoViewport = false }, setLocation: function (e) { if (!e) { return } this._loc.src = e }, setSearchCompleteCallback: function (e) { this._opts.onSearchComplete = e || function () { } }, setMarkersSetCallback: function (e) { this._opts.onMarkersSet = e || function () { } }, setPolylinesSetCallback: function (e) { this._opts.onPolylinesSet = e || function () { } }, setInfoHtmlSetCallback: function (e) { this._opts.onInfoHtmlSet = e || function () { } }, setResultsHtmlSetCallback: function (e) { this._opts.onResultsHtmlSet = e || function () { } }, getStatus: function () { return this._status } }); var ca = function (T, i) { av.call(this, T, i); i = i || {}; i.renderOptions = i.renderOptions || {}; this.setPageCapacity(i.pageCapacity); if (typeof i.renderOptions["selectFirstResult"] != "undefined" && !i.renderOptions["selectFirstResult"]) { this.disableFirstResultSelection() } else { this.enableFirstResultSelection() } this._overlays = []; this._arrPois = []; this._curIndex = -1; this._queryList = []; var e = this; f8.load("localSearch", function () { e._check() }, true) }; ca.inherits(av, "LocalSearch"); ca.DEFAULT_PAGE_CAPACITY = 10; ca.MIN_PAGE_CAPACITY = 1; ca.MAX_PAGE_CAPACITY = 100; ca.DEFAULT_RADIUS = 2000; ca.MAX_RADIUS = 100000; ej.extend(ca.prototype, { search: function (e, i) { this._queryList.push({ method: "search", arguments: [e, i] }) }, searchInBounds: function (e, T, i) { this._queryList.push({ method: "searchInBounds", arguments: [e, T, i] }) }, searchNearby: function (T, i, e, iV) { this._queryList.push({ method: "searchNearby", arguments: [T, i, e, iV] }) }, clearResults: function () { delete this._json; delete this._status; delete this._results; delete this._ud; this._curIndex = -1; this._setStatus(); if (this._opts.renderOptions.panel) { this._opts.renderOptions.panel.innerHTML = "" } }, gotoPage: function () { }, enableFirstResultSelection: function () { this._opts.renderOptions.selectFirstResult = true }, disableFirstResultSelection: function () { this._opts.renderOptions.selectFirstResult = false }, setPageCapacity: function (e) { if (typeof e == "number" && !isNaN(e)) { this._opts.pageCapacity = e < 1 ? ca.DEFAULT_PAGE_CAPACITY : (e > ca.MAX_PAGE_CAPACITY ? ca.DEFAULT_PAGE_CAPACITY : e) } else { this._opts.pageCapacity = ca.DEFAULT_PAGE_CAPACITY } }, getPageCapacity: function () { return this._opts.pageCapacity }, toString: function () { return "LocalSearch" } }); function a2(i) { this._opts = {}; ej.extend(this._opts, i); this._queryList = []; var e = this; f8.load("otherSearch", function () { e._asyncSearch() }) } a2.inherits(cD, "Geocoder"); ej.extend(a2.prototype, { getPoint: function (e, T, i) { this._queryList.push({ method: "getPoint", arguments: [e, T, i] }) }, getLocation: function (e, T, i) { this._queryList.push({ method: "getLocation", arguments: [e, T, i] }) }, toString: function () { return "Geocoder" } }); function cu(e) { e = e || {}; this.config = { timeout: e.timeout || 1000 * 10, maximumAge: e.maximumAge || 0, enableHighAccuracy: e.enableHighAccuracy || true, SDKLocation: e.SDKLocation || false }; this._pendingCalls = []; var i = this; f8.load("otherSearch", function () { var T = i._pendingCalls.length; for (var iV = 0; iV < T; iV++) { var iW = i._pendingCalls[iV]; i[iW.method].apply(i, iW.arguments) } }) } ej.extend(cu.prototype, { getCurrentPosition: function (e, i) { this._pendingCalls.push({ method: "getCurrentPosition", arguments: arguments }) }, getStatus: function () { return BMAP_STATUS_UNKNOWN_LOCATION }, enableSDKLocation: function () { if (bF()) { this.config.SDKLocation = true } }, disableSDKLocation: function () { this.config.SDKLocation = false } }); function eD() { this._queryList = []; var e = this; f8.load("otherSearch", function () { e._asyncSearch() }) } eD.inherits(cD, "Boundary"); ej.extend(eD.prototype, { get: function (i, e) { this._queryList.push({ method: "get", arguments: [i, e] }) }, toString: function () { return "Boundary" }, parsebdStr: function (i, e) { } }); function ex(i) { i = i || {}; i.renderOptions = i.renderOptions || {}; this._opts = { renderOptions: { map: i.renderOptions.map || null } }; this._queryList = []; var e = this; f8.load("otherSearch", function () { e._asyncSearch() }) } ex.inherits(cD, "LocalCity"); ej.extend(ex.prototype, { get: function (e) { this._queryList.push({ method: "get", arguments: [e] }) }, toString: function () { return "LocalCity" } }); function gk(e, T) { cD.call(this); this.markersList = []; this.destList = []; this.pointsList = []; this._opts = T; this.json = e; this.map = this._opts.renderOptions.map || null; this.sType = this._opts.sType; this.infoWindow = null; this.curPointIndex = 0; this.startName = ""; this.endIndex = 1; this.endName = ""; this.resCity = [0, 0, 0, 0, 0, 0, 0]; this.locPois = []; this.curPageIndex = [1, 1, 1, 1, 1, 1, 1]; this.totalPage = [1, 1, 1, 1, 1, 1, 1]; this.resCount = [0, 0, 0, 0, 0, 0, 0]; this.resType = [0, 0, 0, 0, 0, 0, 0]; this.qInfo = [{ n: "", c: 0, u: 0, x: 0, y: 0, t: -1 }, { n: "", c: 0, u: 0, x: 0, y: 0, t: -1 }, { n: "", c: 0, u: 0, x: 0, y: 0, t: -1 }, { n: "", c: 0, u: 0, x: 0, y: 0, t: -1 }, { n: "", c: 0, u: 0, x: 0, y: 0, t: -1 }, { n: "", c: 0, u: 0, x: 0, y: 0, t: -1 }, { n: "", c: 0, u: 0, x: 0, y: 0, t: -1 }]; this.curSelectedIndex = -1; this.tpList = []; this.tpListInMap = []; var i = this; f8.load("route", function () { }) } gk.inherits(cD, "RouteAddr"); function dU(T, i) { av.call(this, T, i); this.QUERY_TYPE_BUSLIST = cH; this.RETURN_TYPE_BUSLIST = cm; this.QUERY_TYPE_BUSLINE = dK; this.RETURN_TYPE_BUSLINE = dy; this._queryList = []; var e = this; f8.load("buslineSearch", function () { e._asyncSearch() }) } var eS = u.staticHost + "/wolfman/static/common/images/"; dU._iconOpen = u.apiIMG + "/iw_plus.gif"; dU._iconClose = u.apiIMG + "/iw_minus.gif"; dU._stopUrl = eS + "new/bus-stop-1x_ddd4723.png"; dU.inherits(av, "BusLineSearch"); ej.extend(dU.prototype, { getBusList: function (e) { this._queryList.push({ method: "getBusList", arguments: [e] }) }, getBusLine: function (e) { this._queryList.push({ method: "getBusLine", arguments: [e] }) }, setGetBusListCompleteCallback: function (e) { this._opts.onGetBusListComplete = e || function () { } }, setGetBusLineCompleteCallback: function (e) { this._opts.onGetBusLineComplete = e || function () { } }, setBusListHtmlSetCallback: function (e) { this._opts.onBusListHtmlSet = e || function () { } }, setBusLineHtmlSetCallback: function (e) { this._opts.onBusLineHtmlSet = e || function () { } }, setPolylinesSetCallback: function (e) { this._opts.onPolylinesSet = e || function () { } } }); function hU(i) { av.call(this, i); i = i || {}; this._options = { input: i.input || null, baseDom: i.baseDom || null, types: i.types || [], onSearchComplete: i.onSearchComplete || function () { } }; this._loc.src = i.location || "全国"; this._word = ""; this._show = false; this._suggestion = null; this._inputValue = ""; this._initialize(); var e = this; f8.load("autocomplete", function () { e._asyncSearch() }, true) } hU.inherits(av, "Autocomplete"); ej.extend(hU.prototype, { _initialize: function () { }, show: function () { this._show = true }, hide: function () { this._show = false }, setTypes: function (e) { this._options.types = e }, setLocation: function (e) { this._loc.src = e }, search: function (e) { this._word = e }, setInputValue: function (e) { this._inputValue = e }, setSearchCompleteCallback: function (e) { this._options.onSearchComplete = e } }); var iw = function (i, e) { av.call(this, i, e) }; ej.inherit(iw, av, "BaseRoute"); ej.extend(iw.prototype, { clearResults: function () { } }); window.BMAP_TRANSIT_POLICY_RECOMMEND = 0; window.BMAP_TRANSIT_POLICY_LEAST_TIME = 4; window.BMAP_TRANSIT_POLICY_LEAST_TRANSFER = 1; window.BMAP_TRANSIT_POLICY_LEAST_WALKING = 2; window.BMAP_TRANSIT_POLICY_AVOID_SUBWAYS = 3; window.BMAP_TRANSIT_POLICY_FIRST_SUBWAYS = 5; window.BMAP_LINE_TYPE_BUS = 0; window.BMAP_LINE_TYPE_SUBWAY = 1; window.BMAP_LINE_TYPE_FERRY = 2; window.BMAP_LINE_TYPE_TRAIN = 3; window.BMAP_LINE_TYPE_AIRPLANE = 4; window.BMAP_LINE_TYPE_COACH = 5; var hi = 3; var dw = 4; var Y = 1; var hg = 2; var aI = 5; var co = 6; window.BMAP_TRANSIT_TYPE_IN_CITY = 0; window.BMAP_TRANSIT_TYPE_CROSS_CITY = 1; window.BMAP_TRANSIT_PLAN_TYPE_ROUTE = 0; window.BMAP_TRANSIT_PLAN_TYPE_LINE = 1; window.BMAP_TRANSIT_TYPE_POLICY_TRAIN = 0; window.BMAP_TRANSIT_TYPE_POLICY_AIRPLANE = 1; window.BMAP_TRANSIT_TYPE_POLICY_COACH = 2; window.BMAP_INTERCITY_POLICY_LEAST_TIME = 0; window.BMAP_INTERCITY_POLICY_EARLY_START = 1; window.BMAP_INTERCITY_POLICY_CHEAP_PRICE = 2; function d9(T, i) { iw.call(this, T, i); i = i || {}; this.setPolicy(i.policy); this.setIntercityPolicy(i.intercityPolicy); this.setTransitTypePolicy(i.transitTypePolicy); this.setPageCapacity(i.pageCapacity); this.QUERY_TYPE = f5; this.RETURN_TYPE = ee; this.ROUTE_TYPE = gF; this._overlays = []; this._curIndex = -1; this._opts._enableTraffic = i.enableTraffic || false; this._queryList = []; var e = this; f8.load("route", function () { e._asyncSearch() }, true) } d9.MAX_PAGE_CAPACITY = 100; d9.LINE_TYPE_MAPPING = [0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1]; d9.LINE_TYPE_MAPPING_CROSS_CITY = [0, 3, 4, 0, 0, 0, 5]; ej.inherit(d9, iw, "TransitRoute"); ej.extend(d9.prototype, { setPolicy: function (e) { if (e >= BMAP_TRANSIT_POLICY_RECOMMEND && e <= BMAP_TRANSIT_POLICY_FIRST_SUBWAYS) { this._opts.policy = e } else { this._opts.policy = BMAP_TRANSIT_POLICY_RECOMMEND } }, setIntercityPolicy: function (e) { if (e >= BMAP_INTERCITY_POLICY_LEAST_TIME && e <= BMAP_INTERCITY_POLICY_CHEAP_PRICE) { this._opts.intercityPolicy = e } else { this._opts.intercityPolicy = BMAP_INTERCITY_POLICY_LEAST_TIME } }, setTransitTypePolicy: function (e) { if (e >= BMAP_TRANSIT_TYPE_POLICY_TRAIN && e <= BMAP_TRANSIT_TYPE_POLICY_COACH) { this._opts.transitTypePolicy = e } else { this._opts.transitTypePolicy = BMAP_TRANSIT_TYPE_POLICY_TRAIN } }, _internalSearch: function (i, e) { this._queryList.push({ method: "_internalSearch", arguments: [i, e] }) }, search: function (i, e) { this._queryList.push({ method: "search", arguments: [i, e] }) }, setPageCapacity: function (e) { if (typeof e === "string") { e = parseInt(e, 10); if (isNaN(e)) { this._opts.pageCapacity = d9.MAX_PAGE_CAPACITY; return } } if (typeof e !== "number") { this._opts.pageCapacity = d9.MAX_PAGE_CAPACITY; return } if (e >= 1 && e <= d9.MAX_PAGE_CAPACITY) { this._opts.pageCapacity = Math.round(e) } else { this._opts.pageCapacity = d9.MAX_PAGE_CAPACITY } }, toString: function () { return "TransitRoute" }, _shortTitle: function (e) { return e.replace(/\(.*\)/, "") } }); window.BMAP_HIGHLIGHT_STEP = 1; window.BMAP_HIGHLIGHT_ROUTE = 2; var cd = function (e, iV) { iw.call(this, e, iV); this._overlays = []; this._curIndex = -1; this._queryList = []; var T = this; var i = this._opts.renderOptions; if (i.highlightMode !== BMAP_HIGHLIGHT_STEP && i.highlightMode !== BMAP_HIGHLIGHT_ROUTE) { i.highlightMode = BMAP_HIGHLIGHT_STEP } this._enableDragging = this._opts.renderOptions.enableDragging ? true : false; f8.load("route", function () { T._asyncSearch() }, true); if (this.init_d) { this.init_d() } }; cd.ROAD_TYPE = ["", "环岛", "无属性道路", "主路", "高速连接路", "交叉点内路段", "连接道路", "停车场内部道路", "服务区内部道路", "桥", "步行街", "辅路", "匝道", "全封闭道路", "未定义交通区域", "POI连接路", "隧道", "步行道", "公交专用道", "提前右转道"]; ej.inherit(cd, iw, "DWRoute"); ej.extend(cd.prototype, { search: function (T, e, i) { this._queryList.push({ method: "search", arguments: [T, e, i] }) } }); window.BMAP_DRIVING_POLICY_DEFAULT = 0; window.BMAP_DRIVING_POLICY_AVOID_HIGHWAYS = 3; window.BMAP_DRIVING_POLICY_FIRST_HIGHWAYS = 4; window.BMAP_DRIVING_POLICY_AVOID_CONGESTION = 5; window.BMAP_TRAFFICE_STATUS_NONE = 0; window.BMAP_TRAFFICE_STATUS_NORMAL = 1; window.BMAP_TRAFFICE_STATUS_SLOW = 2; window.BMAP_TRAFFICE_STATUS_JAM = 3; function b2(e, i) { cd.call(this, e, i); i = i || {}; this._opts._enableTraffic = i.enableTraffic || false; this.setPolicy(i.policy); this.QUERY_TYPE = aA; this.RETURN_TYPE = ap; this.ROUTE_TYPE = BMAP_ROUTE_TYPE_DRIVING } ej.inherit(b2, cd, "DrivingRoute"); b2.prototype.setPolicy = function (e) { if (e >= BMAP_DRIVING_POLICY_DEFAULT && e <= BMAP_DRIVING_POLICY_AVOID_CONGESTION) { this._opts.policy = e } else { this._opts.policy = BMAP_DRIVING_POLICY_DEFAULT } }; function eI(e, i) { cd.call(this, e, i); this.QUERY_TYPE = g9; this.RETURN_TYPE = fr; this.ROUTE_TYPE = BMAP_ROUTE_TYPE_WALKING; this._enableDragging = false } ej.inherit(eI, cd, "WalkingRoute"); function cA(e, i) { cd.call(this, e, i); this.QUERY_TYPE = gA; this.ROUTE_TYPE = BMAP_ROUTE_TYPE_RIDING; this._enableDragging = false } ej.inherit(cA, cd, "RidingRoute"); window.BMAP_MODE_DRIVING = "driving"; window.BMAP_MODE_TRANSIT = "transit"; window.BMAP_MODE_WALKING = "walking"; window.BMAP_MODE_NAVIGATION = "navigation"; var aO = { web: "//api.map.baidu.com/direction?", android: "bdapp://map/direction?", ios: "baidumap://map/direction?" }; function hC(e) { this.opts = e || {} } ej.extend(hC.prototype, { routeCall: function (iV, e, T) { var i = this; f8.load("route", function () { i._asyncSearch(iV, e, T) }) } }); bk.Map = gL; bk.MapType = dG; bk.Point = b8; bk.Pixel = eB; bk.Size = hS; bk.Bounds = g0; bk.PrivateRegionDataModel = ck; bk.TileLayer = gy; bk.Copyright = g; bk.Projection = bk.Project = hZ; bk.XYZProjection = bk.XYZProject = c3; bk.Convertor = e6; bk.RenderTypeUtils = cB; bk.Overlay = aD; bk.Label = gT; bk.Marker = p; bk.Icon = id; bk.Polyline = a8; bk.BezierCurve = cg; bk.PolylineMultipart = dI; bk.Polygon = hB; bk.Prism = bd; bk.Marker3D = dz; bk.GroundOverlay = fc; bk.InfoWindow = ds; bk.SimpleInfoWindow = g3; bk.Circle = aG; bk.Control = fQ; bk.NavigationControl = ir; bk.NavigationControl3D = el; bk.CopyrightControl = fj; bk.ScaleControl = iU; bk.CityListControl = be; bk.MapTypeControl = s; bk.ZoomControl = h2; bk.LocationControl = fz; bk.LogoControl = bn; bk.DistanceTool = bV; bk.ContextMenu = gp; bk.MenuItem = gX; bk.OperationMask = ab; bk.Animation = eQ; bk.ViewAnimation = l; bk.Transitions = fJ; bk.Event = eX; bk.trafficLayer = io; bk.XYZLayer = iK; bk.BaiduLayer = L; bk.Geolocation = cu; bk.Geocoder = a2; bk.Boundary = eD; bk.DistrictLayer = dp; bk.LocalCity = ex; bk.LocalSearch = ca; bk.Autocomplete = hU; bk.BusLineSearch = dU; bk.WalkingRoute = eI; bk.RidingRoute = cA; bk.DrivingRoute = b2; bk.TransitRoute = d9; bk.RouteSearch = hC; function gh(e, i) { for (var T in i) { e[T] = i[T] } } bk.fetchDebug && bk.fetchDebug.init(); bk.verify(); bk.apiLoad(); bk.frequency(); bk.getSeckeyCid(); window._layer = 1; ej.extend(dp.prototype, { _asyncSearch: function () { for (var T = 0, e = this._queryList.length; T < e; T++) { var iV = this._queryList[T]; this[iV.method].apply(this, iV.arguments) } delete this._queryList }, addDistrict: function () { if (this._opts.districts) { var e = this._opts.districts; if (typeof e === "string") { this.getDistrictData(e) } else { if (Object.prototype.toString.call(e) === "[object Array]") { var i = this.parseArrayParams(e); this.getDistrictData(i) } } } }, parseArrayParams: function (e) { var iW = ""; for (var iV = 0; iV < e.length; iV++) { if (e[iV] instanceof Array) { iW += "("; for (var T = 0; T < e.length; T++) { iW += e[T] } iW += ")" } else { iW += "(" + e[iV] + ")" } } return iW }, getDistrictData: function (e) { var i = this; iH.request(function (iV) { var T = i._parseGeoData(iV); i._drawToMap(i, T) }, { qt: ip, adnames: e, level: i._opts.kind }) }, _drawToMap: function (i4, i0) { var i3 = i0.boundaries.length; if (i3 === 0) { alert("未能获取当前输入行政区域"); return } var i5 = this._config.fillColor; var iX = this._config.fillOpacity; var T = this._config.strokeColor; var e = this._config.strokeOpacity; var i1 = this._config.strokeWeight; if (typeof i5 === "string") { var iV = i5; var i6 = []; for (var iZ = 0; iZ < i3; iZ++) { var i2 = new BMapGL.Polygon(i0.boundaries[iZ], { strokeWeight: i1, strokeColor: T, strokeOpacity: e, fillColor: iV, fillOpacity: iX }); i2.style = { strokeWeight: i1, strokecolor: T, strokeOpacity: e, fillColor: iV, fillOpacity: iX }; this.disOverlays.push(i2); this.addEventListenerIn(); i4._map.addOverlay(i2); i6 = i6.concat(i2.getPath()) } if (this._config.viewport) { i4._map.setViewport(i6) } } else { if (Object.prototype.toString.call(i5) === "[object Array]") { var i6 = []; var iY = i5.length; if (iY < i3) { for (var iZ = 0, iW = 0; iZ < i3 - iY; iZ++) { if (iW < iY - 1) { i5.push(i5[iW++]) } else { i5.push(i5[0]) } } } for (var iZ = 0; iZ < i3; iZ++) { var iV = i5[iZ]; var i2 = new BMapGL.Polygon(i0.boundaries[iZ], { strokeWeight: i1, strokeColor: T, strokeOpacity: e, fillColor: iV, fillOpacity: iX }); i2.style = { strokeWeight: i1, strokecolor: T, strokeOpacity: e, fillColor: iV, fillOpacity: iX }; this.disOverlays.push(i2); this.addEventListenerIn(); i4._map.addOverlay(i2); i6 = i6.concat(i2.getPath()) } if (this._config.viewport) { i4._map.setViewport(i6) } } } }, _parseGeoData: function (i4) { var i7 = {}; i7.boundaries = []; if (i4 && i4.content && i4.content["geo"]) { for (var jc = 0; jc < i4.content["geo"].length; jc++) { var iV = bt.parseGeo(i4.content["geo"][jc], false); if (iV.geo && iV.geo.length && iV.geo.length > 0) { var ja = iV.geo.length; for (ia = 0; ia < ja; ia++) { var T = iV.geo[ia]; if (T && T.length && T.length > 0) { var i2 = T.length - 1; var i9 = []; var i1 = false; var i8 = 0; var i6 = 0; for (var jb = 0; jb < i2; jb += 2) { var iZ = T[jb]; var iX = T[jb + 1]; var i5 = new b8(iZ, iX); i5 = hZ.convertMC2LL(i5); if (jb < i2 - 3) { var i = T[jb + 2]; var e = T[jb + 3]; var i3 = new b8(i, e); i3 = hZ.convertMC2LL(i3) } i9.push(i5.lng + ", " + i5.lat) } if (i1 === true) { if (i8 > i6) { var jd = i8; i8 = i6; i6 = jd } var i0 = i9; var iY = i9.splice(i8 + 1); var iW = iY.splice(i6 - i8); i0 = i0.concat(iW); i7.boundaries.push(i0.join(";")); i7.boundaries.push(iY.join(";")); i1 = false; continue } if (i9.length !== 0) { i7.boundaries.push(i9.join(";")) } } } } } } return i7 }, deleteDistrict: function (iV) { var T = iV.disOverlays; for (var e = 0; e < T.length; e++) { this._map.removeOverlay(T[e]) } }, addEventListener: function (e, i) { this.eventAndCallback[e] = i }, addEventListenerIn: function () { var iV = this; var iX = Object.keys(iV.eventAndCallback); if (iX.length > 0) { for (var T = 0; T < iX.length; T++) { var iW = iV.eventAndCallback[iX[T]]; for (var e = 0; e < iV.disOverlays.length; e++) { iV.disOverlays[e].addEventListener(iX[T], iW) } } } }, searchBoundary: function (i, iW) { i = i || {}; var e = i.name || ""; var T = i.kind || 0; var iV = this; iH.request(function (iY) { var iX = iV._parseGeoData(iY); iW && iW(iX) }, { qt: ip, adnames: e, level: T }) } }); window._layer = 2;
})(BMapGL, "BMapGL");